{"pages":[{"title":"About Me","text":"LunarScents (Jasmine)Web Front-End Developer경험하고 학습한 내용을 기록하고 있습니다.문의 내용이 있다면 언제든 연락바랍니다! email: lunarscent7@gmail.com","link":"/about/index.html"}],"posts":[{"title":"모의고사","text":"문제 설명수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.수포자는 수학을 포기한 사람의 준말입니다.수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, … 1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한사항 시험은 최대 10,000 문제로 구성되어있습니다. 문제의 정답은 1, 2, 3, 4, 5중 하나입니다. 가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요. 입출력 예 answers return [1,2,3,4,5] [1] [1,3,2,4,2] [1,2,3] 입출력 예 설명 입출력 예 #1 수포자 1은 모든 문제를 맞혔습니다. 수포자 2는 모든 문제를 틀렸습니다. 수포자 3은 모든 문제를 틀렸습니다.따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다. 입출력 예 #2 모든 사람이 2문제씩을 맞췄습니다. Solution123456789101112131415161718192021222324252627function solution(answers) { const patterns = [ [1, 2, 3, 4, 5], [2, 1, 2, 3, 2, 4, 2, 5], [3, 3, 1, 1, 2, 2, 4, 4, 5, 5] ]; const { scores } = (answers || []).reduce((target, answer, index)=&gt;{ patterns.forEach((pattern, idx)=&gt;{ let value = pattern.shift(); (value === answer) &amp;&amp; target['scores'][idx]++; patterns[idx].push(value); }); return target; }, { scores: new Array(patterns.length).fill(0) }); let max = Math.max(...scores); return scores.reduce((target, score, index) =&gt; { (score === max) &amp;&amp; target.push(index + 1); return target; }, []);}","link":"/2019/05/30/exam/"},{"title":"완주하지 못한 선수","text":"문제 설명수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요. 제한사항 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다. 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다. 참가자 중에는 동명이인이 있을 수 있습니다. 입출력 예 participant completion return [leo, kiki, eden] [eden, kiki] leo [marina, josipa, nikola, vinko, filipa] [josipa, filipa, marina, nikola] vinko [stanko, ana, mislav] [mislav, stanko, mislav, ana] mislav 입출력 예 설명 예제 #1 leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #2 vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다. 예제 #3 mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다. Solution12345678910function solution(participant, completion) { participant.sort(); completion.sort(); return participant.reduce((target, name, index) =&gt; { (name !== completion[index]) &amp;&amp; target.push(name); return target; }, [])[0];}","link":"/2019/05/30/unfinishedPlayer/"},{"title":"알고리즘 문제 풀이 로드맵","text":"출처 : https://raw.githubusercontent.com/stack07142/BOJ","link":"/2019/05/29/algorithm-roadmap/"},{"title":"같은 숫자는 싫어","text":"문제 설명배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 배열 arr에서 제거 되고 남은 수들을 return 하는 solution 함수를 완성해 주세요. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다.예를들면, arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다. arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다. 배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요. 제한사항 배열 arr의 크기 : 1,000,000 이하의 자연수 배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수 입출력 예 arr answer [1,1,3,3,0,1,1] [1,3,0,1] [4,4,4,3,3] [4,3] 입출력 예 설명입출력 예 #1,2문제의 예시와 같습니다. Solution 123function solution(s) { return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);}","link":"/2019/06/01/dislikeSameNumber/"},{"title":"K번째수","text":"문제 설명배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 에서 나온 배열의 3번째 숫자는 5입니다. 배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때,commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요. 제한사항 array의 길이는 1 이상 100 이하입니다. array의 각 원소는 1 이상 100 이하입니다. commands의 길이는 1 이상 50 이하입니다. commands의 각 원소는 길이가 3입니다. 입출력 예 array commands return [1, 5, 2, 6, 3, 7, 4] [[2, 5, 3], [4, 4, 1], [1, 7, 3]] [5, 6, 3] 입출력 예 설명[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다. Solution 1234567function solution(array, commands) { return (commands || []).reduce((target, command) =&gt; { target.push(((array|| []).slice(command[0] - 1, command[1]).sort((a, b) =&gt; a - b))[command[2] - 1]); return target; }, []);}","link":"/2019/05/31/kthNumber/"},{"title":"가운데 글자 가져오기","text":"문제 설명단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다. 제한사항 s는 길이가 1 이상, 100이하인 스트링입니다. 입출력 예 s return “abcde” “c” “qwer” “we” Solution 123function solution(s) { return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);}","link":"/2019/06/01/extractMiddleLetters/"},{"title":"Day 1: Arithmetic Operators","text":"ObjectiveIn this challenge, we practice using arithmetic operators. Check out the attached tutorial for resources. TaskComplete the following functions in the editor below: getArea(length, width): Calculate and return the area of a rectangle having sides length and width. getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides length and width. The values returned by these functions are printed to stdout by locked stub code in the editor. Input FormatgetArea Data Type Parameter Description Number length A number denoting the length of a rectangle. Number height A number denoting the height of a rectangle. getPerimeter(length, height) Data Type Parameter Description Number length A number denoting the length of a rectangle. Number height A number denoting the height of a rectangle. Constraints 1 &lt;= length,width &lt;= 100 length and height are scaled to at most three decimal places. Output Format Function Return Type Description getArea Number The area of a rectangle having sides length and width. getPerimeter Number The perimeter of a rectangle having sides length and width. Sample Input 01234.5 ##Sample Output 0 1213.515 ExplanationThe area of the rectangle is length X width = 3 X 4.5 = 13.5.The perimeter of the rectangle is 2 X (length + height) = 2 X (3 + 4.5) = 15. Solution12345678910111213141516171819202122232425262728293031/** * Calculate the area of a rectangle. * * length: The length of the rectangle. * width: The width of the rectangle. * * Return a number denoting the rectangle's area. **/function getArea(length, width) { let area; // Write your code here area = length * width; return area;}/** * Calculate the perimeter of a rectangle. * * length: The length of the rectangle. * width: The width of the rectangle. * * Return a number denoting the perimeter of a rectangle. **/function getPerimeter(length, width) { let perimeter; // Write your code here perimeter = 2 * (length + width); return perimeter;}","link":"/2019/06/02/arithmeticOperators/"},{"title":"Day 0: Data Types","text":"ObjectiveToday, we’re discussing data types. Check out the attached tutorial for more details. TaskVariables named firstInteger, firstDecimal, and firstString are declared for you in the editor below. You must use the + operator to perform the following sequence of operations: Convert secondInteger to an integer (Number type), then sum it with firstInteger and print the result on a new line using console.log. Convert secondDecimal to a floating-point number (Number type), then sum it with firstDecimal and print the result on a new line using console.log. Print the concatenation of firstString and secondString on a new line using console.log. Note that must be printed first. Input Format Data Type Parameter Description string secondInteger The string representation of an integer you must sum with firstInteger. string secondDecimal The string representation of a floating-point number you must sum with firstDecimal. string secondString A string of one or more space-separated words you must append to secondString. Output FormatPrint the following three lines of output: On the first line, print the sum of firstInteger and the integer representation of secondInteger. On the second line, print the sum of firstDecimal and the floating-point representation of secondDecimal. On the third line, print firstString concatenated with secondString. You must print firstString before secondString. Sample Input 0123124.32is the best place to learn and practice coding! ##Sample Output 0 123168.32HackerRank is the best place to learn and practice coding! ExplanationWhen we sum the integers 4 and 12, we get the integer 16.When we sum the floating-point numbers 4.0 and 4.32, we get 8.32. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above. Solution12345678910111213141516171819202122232425262728293031/** * The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them. * Print three lines: * 1. The sum of 'firstInteger' and the Number representation of 'secondInteger'. * 2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'. * 3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first). * * Parameter(s): * secondInteger - The string representation of an integer. * secondDecimal - The string representation of a floating-point number. * secondString - A string consisting of one or more space-separated words. **/function performOperation(secondInteger, secondDecimal, secondString) { // Declare a variable named 'firstInteger' and initialize with integer value 4. const firstInteger = 4; // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0. const firstDecimal = 4.0; // Declare a variable named 'firstString' and initialize with the string \"HackerRank\". const firstString = 'HackerRank '; // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number type) on a new line. console.log(firstInteger + Number(secondInteger)); // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number type) on a new line. console.log(firstDecimal + Number(secondDecimal)); // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The variable 'firstString' must be printed first. console.log((firstString || '').concat(secondString));}","link":"/2019/06/02/dataTypes/"},{"title":"나누어 떨어지는 숫자 배열","text":"문제 설명array의 각 element 중 divisor로 나누어 떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수, solution을 작성해주세요.divisor로 나누어 떨어지는 element가 하나도 없다면 배열에 -1을 담아 반환하세요. 제한사항 arr은 자연수를 담은 배열입니다. 정수 i, j에 대해 i ≠ j 이면 arr[i] ≠ arr[j] 입니다. divisor는 자연수입니다. array는 길이 1 이상인 배열입니다. 입출력 예 arr divisor answer [5, 9, 7, 10] 5 [5, 10] [2, 36, 1, 3] 1 [1, 2, 3, 36] [3,2,6] 10 [-1] 입출력 예 설명입출력 예#1arr의 원소 중 5로 나누어 떨어지는 원소는 5와 10입니다. 따라서 [5, 10]을 리턴합니다. 입출력 예#2arr의 모든 원소는 1으로 나누어 떨어집니다. 원소를 오름차순으로 정렬해 [1, 2, 3, 36]을 리턴합니다. 입출력 예#33, 2, 6은 10으로 나누어 떨어지지 않습니다. 나누어 떨어지는 원소가 없으므로 [-1]을 리턴합니다. Solution 123function solution(s) { return s.substr(Math.ceil(s.length / 2) - 1, s.length % 2 === 0 ? 2 : 1);}","link":"/2019/06/02/divideNumbers/"},{"title":"Day 1: Functions","text":"ObjectiveToday, we’re discussing JavaScript functions. Check out the attached tutorial for more details. TaskImplement a function named factorial that has one parameter: an integer, n. It must return the value of n! (i.e., n factorial). Input FormatLocked stub code in the editor reads a single integer, n, from stdin and passes it to a function named factorial. Constraints 1 &lt;= n &lt;= 10 Output FormatThe function must return the value of n!. Sample Input 014 ##Sample Output 0 124 ExplanationWe return the value of 4! = 4 X 3 X 2 X 1 = 24. SolutionsSolution 11const factorial = n =&gt; (n - 1 &gt; 0 ? n * factorial(n - 1) : 1); Solution 212345678let memoization = [0, 1];const factorial = n =&gt; { typeof memoization[n] !== 'number' &amp;&amp; (memoization[n] = n - 1 &gt; 0 ? n * factorial(n - 1) : 1); return memoization[n];};","link":"/2019/06/02/functions/"},{"title":"Day 0: Hello, World","text":"Overview: 10 Days of JavaScriptThis series focuses on learning and practicing JavaScript. Each challenge comes with a tutorial article, and you can view these articles by clicking either the Topics tab along the top or the article icon in the right-hand menu. ObjectiveIn this challenge, we review some basic concepts that will get you started with this series. Check out the tutorial to learn more about JavaScript’s lexical structure. TaskA greeting function is provided for you in the editor below. It has one parameter, . Perform the following tasks to complete this challenge: Use console.log() to print Hello, World! on a new line in the console, which is also known as stdout or standard output. The code for this portion of the task is already provided in the editor. Use console.log() to print the contents of (i.e., the argument passed to main).You’ve got this! Input Format Data Type Parameter Description string parameterVariable A single line of text containing one or more space-separated words. Output FormatPrint the following two lines of output: On the first line, print Hello, World! (this is provided for you in the editor). On the second line, print the contents of parameterVariable. Sample Input 01Welcome to 10 Days of JavaScript! ##Sample Output 0 12Hello, World!Welcome to 10 Days of JavaScript! ExplanationWe printed two lines of output: We printed the literal string Hello, World! using the code provided in the editor. The value of parameterVariable passed to our main function in this Sample Case was Welcome to 10 Days of JavaScript!. We then passed our variable to console.log, which printed the contents of parameterVariable. Solution1234567891011121314/** * A line of code that prints \"Hello, World!\" on a new line is provided in the editor. * Write a second line of code that prints the contents of 'parameterVariable' on a new line. * * Parameter: * parameterVariable - A string of text. **/function greeting(parameterVariable) { // This line prints 'Hello, World!' to the console: console.log('Hello, World!'); // Write a line of code that prints parameterVariable to stdout using console.log: console.log(parameterVariable);}","link":"/2019/06/02/helloWorld/"},{"title":"2016년","text":"문제 설명2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요?두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요.요일의 이름은 일요일부터 토요일까지 각각 1SUN,MON,TUE,WED,THU,FRI,SAT 입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요. 제한 조건 2016년은 윤년입니다. 2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다) 입출력 예 a b result 5 24 TUE Solution 123function solution(a, b) { return ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'][new Date(2016, a - 1, b).getDay()];}","link":"/2019/05/31/2016/"},{"title":"Day 1: Let and Const","text":"ObjectiveIn this challenge, we practice declaring variables using the let and const keywords. Check out the attached tutorial for more details. Task Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase). Read a number, r, denoting the radius of a circle from stdin. Use PI and r to calculate the area and perimeter of a circle having radius . Print area as the first line of output and print perimeter as the second line of output. Input FormatA single integer, r, denoting the radius of a circle. Constraints 0 &lt;= n &lt;= 100 r is a floating-point number scaled to at most 3 decimal places. Output FormatPrint the following two lines: On the first line, print the area of the circle having radius r. On the second line, print the perimeter of the circle having radius r. Sample Input 012.6 ##Sample Output 0 1221.23716633826700216.336281798666924 ExplanationGiven the radius r = 2.6, we calculate the following: area = (pi*r^2) perimeter = ({2}pir^2) We then print area as our first line of output and perimeter as our second line of output. Solution1234567891011121314151617181920function main() { // Write your code here. Read input using 'readLine()' and print output using 'console.log()'. let r = parseFloat(readLine()); const PI = Math.PI; // Print the area of the circle: console.log(PI * r * r); // Print the perimeter of the circle: console.log(PI * 2 * r); try { // Attempt to redefine the value of constant variable PI PI = 0; // Attempt to print the value of PI console.log(PI); } catch (error) { console.error(\"You correctly declared 'PI' as a constant.\"); }}","link":"/2019/06/03/letConst/"},{"title":"Day 2: Conditional Statements: Switch","text":"ObjectiveIn this challenge, we learn about switch statements. Check out the attached tutorial for more details. TaskComplete the getLetter(s) function in the editor. It has one parameter: a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria: If the first character in string s is in the set {a, e, i, o, u}, then return A. If the first character in string s is in the set {b, c, d, f, g}, then return B. If the first character in string s is in the set {h, j, k, l, m}, then return C. If the first character in string s is in the set {n, p ,q,r, s, t, v, w, x, y, z}, then return D.Hint: You can get the letter at some index i in s using the syntax s[i] or s.charAt(i). Input FormatStub code in the editor reads a single string denoting s from stdin. Constraints 1 &lt;= |s| &lt;= 100, where |s| is the length of s. String s contains lowercase English alphabetic letters (i.e., a through z) only. Output FormatReturn either A, B, C, or D according to the criteria given above. Sample Input 01adfgt ##Sample Output 0 1AA ExplanationThe first character of string s = adfgt is a. Because the given criteria stipulate that we print A any time the first character is in {a, e, i, o, u}, we return A as our answer. Solution1234567891011121314151617181920212223242526272829303132function getLetter(s) { let letter; // Write your code here switch (s[0]) { case 'a' || 'e' || 'o' || 'i' || 'u': letter = 'A'; break; case 'b' || 'c' || 'd' || 'f' || 'g': letter = 'B'; break; case 'h' || 'j' || 'k' || 'l' || 'm': letter = 'C'; break; case 'z' || 'n' || 'p' || 'q' || 'r' || 's' || 't' || 'v' || 'w' || 'x' || 'y': letter = 'D'; } return letter;}","link":"/2019/06/03/switch/"},{"title":"Day 2: Loops","text":"ObjectiveIn this challenge, we practice looping over the characters of string. Check out the attached tutorial for more details. TaskComplete the vowelsAndConsonants function in the editor below. It has one parameter, a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must do the following: First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s. Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it appeared in s. Input FormatLocked stub code in the editor reads string s from stdin and passes it to the function. Output FormatFirst, print each vowel in s on a new line (in the same order as they appeared in s). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s). Sample Input 01javascriptloops ##Sample Output 0 123456789101112131415aaioojvscrptlps Explanation 0Observe the following: Each letter is printed on a new line. Then the vowels are printed in the same order as they appeared in s. Then the consonants are printed in the same order as they appeared in s. Solution1234567891011121314151617181920/* * Complete the vowelsAndConsonants function. * Print your output using 'console.log()'. */const vowel = ['a', 'e', 'i', 'o', 'u'];function vowelsAndConsonants(s) { let { vowels, consonants } = (s.split('') || []).reduce( (target, item) =&gt; { target[vowel.includes(item) ? 'vowels' : 'consonants'].push(item); return target; }, { vowels: [], consonants: [] } ); vowels.concat(consonants).forEach(item =&gt; { console.log(item); });}","link":"/2019/06/04/loops/"},{"title":"문자열 내 마음대로 정렬하기","text":"문제 설명문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다. 제한 조건 strings는 길이 1 이상, 50이하인 배열입니다. strings의 원소는 소문자 알파벳으로 이루어져 있습니다. strings의 원소는 길이 1 이상, 100이하인 문자열입니다. 모든 strings의 원소의 길이는 n보다 큽니다. 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다. 입출력 예 strings n return [sun, bed, car] 1 [car, bed, sun] [abce, abcd, cdx] 2 [abcd, abce, cdx] 입출력 예 설명입출력 예 1sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다. 입출력 예 2abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다. Solution 12345function solution(strings, n) { return (strings || []).sort((a, b) =&gt; (a[n] === b[n] ? (a &lt; b ? -1 : (a &gt; b ? 1 : 0)) : (a[n] &lt; b[n] ? -1 : (a[n] &gt; b[n] ? 1 : 0))) );}","link":"/2019/06/04/sortStrings/"},{"title":"두 정수 사이의 합","text":"문제 설명두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다. 제한 조건 a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요. a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다. a와 b의 대소관계는 정해져있지 않습니다. 입출력 예 a b return 3 5 12 3 3 3 5 5 12 Solution 123function solution(a, b) { return (a + b) * ((a &gt; b ? a - b : b - a) + 1) / 2;}","link":"/2019/06/02/sumTwoIntegers/"},{"title":"Day 2: Conditional Statements: If-Else","text":"ObjectiveIn this challenge, we learn about if-else statements. Check out the attached tutorial for more details. TaskComplete the getGrade(score) function in the editor. It has one parameter: an integer, score, denoting the number of points Julia earned on an exam. It must return the letter corresponding to her grade according to the following rules: If (25 &lt; score &lt;= 30), then grade = A. If (20 &lt; score &lt;= 25), then grade = B. If (15 &lt; score &lt;= 20), then grade = C. If (10 &lt; score &lt;= 15), then grade = D. If (5 &lt; score &lt;= 10), then grade = E. If (0 &lt; score &lt;= 5), then grade = F. Input FormatStub code in the editor reads a single integer denoting score from stdin and passes it to the function. Constraints 0 &lt;= score &lt;= 30 Output FormatThe function must return the value of grade (i.e., the letter grade) that Julia earned on the exam. Sample Input 0111 ##Sample Output 0 1D ExplanationBecause score = 11, it satisfies the condition (10 &lt; score &lt;= 15) (which corresponds to D). Thus, we return D as our answer. Solution1234567891011121314151617181920function getGrade(score) { let grade; // Write your code here grade = score &lt;= 5 ? 'F' : score &lt;= 10 ? 'E' : score &lt;= 15 ? 'D' : score &lt;= 20 ? 'C' : score &lt;= 25 ? 'B' : score &lt;= 30 ? 'A' : ''; return grade;}","link":"/2019/06/03/ifElse/"},{"title":"Day 4: Count Objects","text":"ObjectiveIn this challenge, we learn about iterating over objects. Check the attached tutorial for more details. TaskComplete the function in the editor. It has one parameter: an array, a, of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects o in array a that satisfy o.x = o.y. Constraints 5 &lt;= n &lt;= 10 1 &lt;= x,y &lt;= 100 Output FormatReturn a count of the total number of objects o such that o.x = o.y. Locked stub code in the editor prints the returned value to STDOUT. Sample Input 012345651 12 33 33 44 5 Sample Output 012 Explanation 0There are n = 5 objects in the objects array: Objects[0] = {x: 1, y: 1} Objects[1] = {x: 2, y: 3} Objects[2] = {x: 3, y: 3} Objects[3] = {x: 4, y: 4} Objects[4] = {x: 5, y: 5} Because we have two objects o that satisfy o.x = o.y (i.e., Objects[0] and Objects[2]), we return 2 as our answer. Solution12345678910111213/* * Return a count of the total number of objects 'o' satisfying o.x == o.y. * * Parameter(s): * objects: an array of objects with integer properties 'x' and 'y' */function getCount(objects) { return objects.reduce((target, item) =&gt; { item.x === item.y &amp;&amp; (target += 1); return target; }, 0);}","link":"/2019/06/05/countObjects/"},{"title":"Day 3: Throw","text":"ObjectiveIn this challenge, we practice using throw and catch statements to work with custom error messages. TaskComplete the isPositive function below. It has one integer parameter, a. If the value of a is positive, it must return the string YES. Otherwise, it must throw an Error according to the following rules: If a is 0, throw an Error with message = Zero Error. If a is negative, throw an Error with message = Negative Error. Input FormatLocked stub code in the editor reads the following input from stdin and passes each value of a to the function as an argument: The first line is an integer, n, denoting the number of times the function will be called with some a.Each line i of the n subsequent lines contains an integer denoting some a. Constraints 1 &lt;= n &lt;= 5 -100 &lt;= a &lt;= 100 Output FormatIf the value of a is positive, the function must return the string YES. Otherwise, it must throw an Error according to the following rules: If a is 0, throw an Error with message = Zero Error. If a is negative, throw an Error with message = Negative Error. Sample Input 012343123 ##Sample Output 0 123YESYESYES Explanation 0Each of the given values is positive, so we return YES each time. The value returned during each function call is printed on a new line by locked stub code in the editor. Sample Input 112343206 ##Sample Output 1 123YESZero ErrorYES Explanation 1Locked stub code in the editor makes the following three calls to the isPositive function: isPositive(2): This returns YES because 2 is positive. isPositive(0): Because a = 0, we throw an Error with message = Zero Error. This is caught by the locked stub code and the value of its message is printed. isPositive(6): This returns YES because 6 is positive. Sample Input 21232-120 ##Sample Output 2 12Negative ErrorYES Explanation 2Locked stub code in the editor makes the following two calls to the isPositive function: isPositive(-1): Because a = -1, we throw an Error with message = Negative Error.This is caught by the locked stub code and the value of its message is printed. isPositive(20): This returns YES because 20 is positive. Solution1234567891011121314151617/* * Complete the isPositive function. * If 'a' is positive, return \"YES\". * If 'a' is 0, throw an Error with the message \"Zero Error\" * If 'a' is negative, throw an Error with the message \"Negative Error\" */function isPositive(a) { let result = 'YES'; if (a &lt; 0) { throw { message: 'Negative Error' }; } else if (a === 0) { throw { message: 'Zero Error' }; } return result;}","link":"/2019/06/05/throw/"},{"title":"Day 3: Try, Catch, and Finally","text":"ObjectiveIn this challenge, we learn about strings and exceptions. Check out the attached tutorials for more details. TaskComplete the reverseString function; it has one parameter, s. You must perform the following actions: Try to reverse string s using the split, reverse, and join methods. If an exception is thrown, catch it and print the contents of the exception’s message on a new line. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string. Input FormatLocked stub code in the editor reads variable s from stdin and passes it to the function. Output FormatYou must write two print statements using console.log(): Print the contents of a caught exception’s message on a new line. If no exception was thrown, this line should not be printed. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string. Sample Input 01&quot;1234&quot; ##Sample Output 0 14321 Explanation 0s = “1234” is a string type, so it can be reversed without throwing an exception. Thus, we print the reversed value, 4321, as our answer. Sample Input 11Number(1234) ##Sample Output 1 12s.split is not a function1234 Explanation 1s = Number(1234) is not a string type, so it can’t be reversed using string functions. When we try to reverse it anyway, it throws an exception. We then catch the exception and print its message, which is s.split is not a function. Next, we finally print s which, because it wasn’t able to be reversed, is Number(1234). SolutionsSolution 112345678910111213141516171819/* * Complete the isPositive function. * If 'a' is positive, return \"YES\". * If 'a' is 0, throw an Error with the message \"Zero Error\" * If 'a' is negative, throw an Error with the message \"Negative Error\" *//* * Complete the reverseString function * Use console.log() to print to stdout. */function reverseString(s) { try { s = s.split('').reverse().join(''); } catch (e) { console.log('s.split is not a function'); } console.log(s);} Solution 21234567891011/* * Complete the reverseString function * Use console.log() to print to stdout. */function reverseString(s) { typeof s !== 'string' ? console.log('s.split is not a function') : (s = s.split('').reverse().join('')); console.log(s);}","link":"/2019/06/05/tryCatch/"},{"title":"Day 5: Arrow Functions","text":"ObjectiveIn this challenge, we practice using arrow functions. Check the attached tutorial for more details. TaskComplete the function in the editor. It has one parameter: an array, nums. It must iterate through the array performing one of the following actions on each element: If the element is even, multiply the element by 2. If the element is odd, multiply the element by 3. The function must then return the modified array. Input FormatThe first line contains an integer, n, denoting the size of nums. The second line contains n space-separated integers describing the respective elements of nums. Constraints 1 &lt;= n &lt;= 10 1 &lt;= nums[i] &lt;= 100, where nums[i] is the ith element of nums. Output FormatReturn the modified array where every even element is doubled and every odd element is tripled. Sample Input 01251 2 3 4 5 Sample Output 013 4 9 8 15 Explanation 0Given nums = [1,2,3,4,5], we modify each element so that all even elements are multiplied by 2 and all odd elements are multipled by 3. In other words, [1,2,3,4,5] =&gt; [13,22,33,42,5*3] -&gt; [3,4,9,8,15]. We then return the modified array as our answer. Solution123456789/* * Modify and return the array so that all even elements are doubled and all odd elements are tripled. * * Parameter(s): * nums: An array of numbers. */function modifyArray(nums) { return (nums || []).map(num =&gt; num * (num % 2 === 0 ? 2 : 3));}","link":"/2019/06/06/arrowFunctions/"},{"title":"문자열 내 p와 y의 개수","text":"문제 설명대문자와 소문자가 섞여있는 문자열 s가 주어집니다. s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다. 단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다. 예를들어 s가 pPoooyY면 true를 return하고 Pyy라면 false를 return합니다. 제한사항 문자열 s의 길이 : 50 이하의 자연수 문자열 s는 알파벳으로만 이루어져 있습니다. 입출력 예| s | answer || — | — | — || pPoooyY | true || Pyy | false | 입출력 예 설명입출력 예 1‘p’의 개수 2개, ‘y’의 개수 2개로 같으므로 true를 return 합니다. 입출력 예 2‘p’의 개수 1개, ‘y’의 개수 2개로 다르므로 false를 return 합니다. Solution 123function solution(s){ return s.toUpperCase().split('P').length === s.toUpperCase().split('Y').length;}","link":"/2019/06/06/countInStrings/"},{"title":"Day 3: Arrays","text":"ObjectiveIn this challenge, we learn about Arrays. Check out the attached tutorial for more details. TaskComplete the getSecondLargest function in the editor below. It has one parameter: an array, nums, of n numbers. The function must find and return the second largest number in nums. Input FormatLocked stub code in the editor reads the following input from stdin and passes it to the function: The first line contains an integer, n, denoting the size of the nums array. The second line contains n space-separated numbers describing the elements in nums. Constraints 1 &lt;= n &lt;= 10 0 &lt;= nums &lt;= 100, where nums is the number at index i. The numbers in are not distinct. Output FormatReturn the value of the second largest number in the nums array. Sample Input 01252 3 6 6 5 ##Sample Output 0 15 ExplanationGiven the array nums = [2,3,6,6,5], we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5 as our answer. SolutionsSolution 112345678function getSecondLargest(nums) { // Complete the function const max = Math.max(...nums); nums = nums.filter(num =&gt; num !== max); return Math.max(...nums);} Solution 212345678function getSecondLargest(nums) { // Complete the function let results = nums .sort((a, b) =&gt; a - b) .filter((el, index, array) =&gt; index === array.indexOf(el)); return results[results.length - 2];}","link":"/2019/06/04/arrays/"},{"title":"Day 5: Inheritance","text":"ObjectiveIn this challenge, we practice implementing inheritance and use JavaScript prototypes to add a new method to an existing prototype. Check out the attached Classes tutorial to refresh what we’ve learned about these topics. TaskWe provide the implementation for a Rectangle class in the editor. Perform the following tasks: Add an area method to Rectangle’s prototype. Create a Square class that satisfies the following: It is a subclass of Rectangle. It contains a constructor and no other methods. It can use the Rectangle class’ area method to print the area of a Square object. Locked code in the editor tests the class and method implementations and prints the area values to STDOUT. Solution123456789101112131415/* * Write code that adds an 'area' method to the Rectangle class' prototype */Rectangle.prototype.area = function () { return (this.w * this.h);}/* * Create a Square class that inherits from Rectangle and implement its class constructor */class Square extends Rectangle { constructor(s) { super(s, s); }}","link":"/2019/06/06/inheritance/"},{"title":"Day 4: Classes","text":"ObjectiveIn this challenge, we practice using JavaScript classes. Check the attached tutorial for more details. TaskCreate a Polygon class that has the following properties: A constructor that takes an array of integer values describing the lengths of the polygon’s sides. A perimeter() method that returns the polygon’s perimeter.Locked code in the editor tests the Polygon constructor and the perimeter method. Note: The perimeter method must be lowercase and spelled correctly. Input FormatThere is no input for this challenge. Output FormatThe perimeter method must return the polygon’s perimeter using the side length array passed to the constructor. ExplanationConsider the following code: 12345// Create a polygon with side lengths 3, 4, and 5let triangle = new Polygon([3, 4, 5]);// Print the perimeterconsole.log(triangle.perimeter()); When executed with a properly implemented Polygon class, this code should print the result of 3 + 4 + 5 = 12. Solution1234567891011121314/* * Implement a Polygon class with the following properties: * 1. A constructor that takes an array of integer side lengths. * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths. */class Polygon { constructor(args) { this.values = args; } perimeter() { return (this.values || []).reduce((target, item) =&gt; target + item); }}","link":"/2019/06/05/classes/"},{"title":"Day 5: Template Literals","text":"ObjectiveIn this challenge, we practice using JavaScript Template Literals. Check the attached tutorial for more details. TaskThe code in the editor has a tagged template literal that passes the area and perimeter of a rectangle to a tag function named sides. Recall that the first argument of a tag function is an array of string literals from the template, and the subsequent values are the template’s respective expression values. Complete the function in the editor so that it does the following: Finds the initial values of s1 and s2 by plugging the area and perimeter values into the formula: $$$**(s = (P+-sqrt(P^ - 16A)) / 4)P$$$ where A is the rectangle’s area and P is its perimeter. Creates an array consisting of s1 and s2 and sorts it in ascending order. Returns the sorted array. Input FormatThe first line contains an integer denoting s1. The second line contains an integer denoting s2. Constraints 1 &lt;= s1, s2 &lt;= 100 Output FormatReturn an array consisting of s1 and s2, sorted in ascending order. Sample Input 0121014 Sample Output 0121014 Explanation 0The locked code in the editor passes the following arrays to the tag function: The value of literals is [ ‘The area is: ‘, ‘.\\nThe perimeter is: ‘, ‘.’ ]. The value of expressions is [ 140, 48 ], where the first value denotes the rectangle’s area, A, and the second value denotes its perimeter, P. When we plug those values into our formula, we get the following: 12s1=s2= We then store these values in an array, [14, 10], sort the array, and return the sorted array, [10, 14], as our answer. Solution123456789101112131415/* * Determine the original side lengths and return an array: * - The first element is the length of the shorter side * - The second element is the length of the longer side * * Parameter(s): * literals: The tagged template literal's array of strings. * expressions: The tagged template literal's array of expression values (i.e., [area, perimeter]). */function sides(literals, ...expressions) { const [a, p] = expressions; const value = Math.sqrt((p ** 2 - (16 * a))); return [((p - value) / 4), ((p + value) / 4)];}","link":"/2019/06/06/templateLiterals/"},{"title":"Day 6: Bitwise Operators","text":"ObjectiveToday, we’re practicing bitwise operations. Check the attached tutorial for more details. TaskWe define S to be a sequence of distinct sequential integers from 1 to n; in other words, S = {1,2,3,…,n}. We want to know the maximum bitwise AND value of any two integers, a and b (where (a &lt; b)), in sequence S that is also less than a given integer, k. Complete the function in the editor so that given n and k, it returns the maximum a &amp; b &lt; k. Note: The &amp; symbol represents the bitwise AND operator. Input FormatThe first line contains an integer, q, denoting the number of function calls.Each of the q subsequent lines defines a dataset for a function call in the form of two space-separated integers describing the respective values of n and k. Constraints 1 &lt;= q &lt;= 10^3 2 &lt;= n &lt;= 10^3 2 &lt;= k &lt;= n Output FormatReturn the maximum possible value of a &amp; b &lt; k for any a &lt; b in sequence S. Sample Input 0123435 28 52 2 Sample Output 0123140 Explanation 0We perform the following q = 3 function calls: When n = 5 and k = 2, we have the following possible a and b values in set S = {1,2,3,4,5}: a b a &amp; b 1 2 001 &amp; 010 = (000)^2 =&gt; (0) 1 3 001 &amp; 011 = (001)^2 =&gt; (1) 1 4 001 &amp; 100 = (000)^2 =&gt; (0) 1 5 001 &amp; 101 = (001)^2 =&gt; (1) 2 3 010 &amp; 011 = (010)^2 =&gt; (2) 2 4 010 &amp; 100 = (000)^2 =&gt; (0) 2 5 010 &amp; 101 = (000)^2 =&gt; (0) 3 4 011 &amp; 100 = (000)^2 =&gt; (0) 3 5 011 &amp; 101 = (001)^2 =&gt; (1) 4 5 100 &amp; 101 = (100)^2 =&gt; (4) The maximum of any a &amp; b that is also &lt; k is 1, so we return 1. When n = 8 and k = 5, the maximum of any a &amp; b &lt; k in set S = {1,2,3,4,5,6,7,8} is 4 (see table above), so we return 4. When n = 2 and k = 2, the maximum of any a &amp; b &lt; k in set S = {1,2} is 0 (see table above), so we return 0. Sample Input 112329 28 3 Sample Output 11212 Explanation 1We perform the following q = 2 function calls: When n = 9 and k = 2, we have the following possible a and b values in set S = {1,2,3,4,5,6,7,8,9}** is 1 (see table above), so we return 1. When n = 8 and k = 3, the maximum of any a &amp; b &lt; k in set S = {1,2,3,4,5,6,7,8} is 2 (see table above), so we return 2. Solution12345678910111213function getMaxLessThanK(n, k) { let max = 0; for (let a = 1; a &lt;= n; a++) { for (let b = a + 1; b &lt;= n; b++) { let bw = (a &amp; b); (bw &lt; k &amp;&amp; bw &gt; max) &amp;&amp; (max = bw); } } return max;}","link":"/2019/06/07/bitwiseOperators/"},{"title":"Day 4: Create a Rectangle Object","text":"ObjectiveIn this challenge, we practice creating objects. Check out the attached tutorial for more details. TaskComplete the function in the editor. It has two parameters: and . It must return an object modeling a rectangle that has the following properties: length : This value is equal to a. width : This value is equal to b. perimeter : This value is equal to 2 X (a + b) area : This value is equal to a X b Note: The names of the object’s properties must be spelled correctly to pass this challenge. Input FormatThe first line contains an integer denoting a.The second line contains an integer denoting b. Constraints 1 &lt;= x,y &lt;= 100 Output FormatReturn a object that has the properties specified above. Locked code in the editor prints the returned object’s length, width, perimeter, and area to STDOUT. Sample Input 01245 Sample Output 01234451820 Explanation 0Given a length of a = 3 and a width of b = 5, the Rectangle object’s perimeter is 4 + 4 + 5 + 5 = 18 and its area is 4 X 5 = 20. Solution123456789/* * Complete the Rectangle function */function Rectangle(a, b) { this.length = a; this.width = b; this.perimeter = (a + b) * 2; this.area = a * b;}","link":"/2019/06/06/rectangleObject/"},{"title":"Day 6: JavaScript Dates","text":"ObjectiveIn this challenge, we learn about JavaScript Dates. Check out the attached tutorial for more details. TaskGiven a date string, dateString, in the format MM/DD/YYYY, find and return the day name for that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016 is Wednesday. Input FormatLocked stub code in the editor reads the following input from stdin:The first line contains an integer, d, denoting the number of dates to check.Each line i of the d subsequent lines contains a date in MM/DD/YYYY format; each date denotes some dateString that is passed to the function. Constraints It is guaranteed that the input only consists of valid dates. Output FormatThe function must return a string denoting the day of the week corresponding to the date denoted by dateString. Sample Input 0123210/11/200911/10/2010 Sample Output 012SundayWednesday Explanation 0The function is called for the following d = 2 dates: The date 10/11/2009 was a Sunday, so we return Sunday. The date 11/10/2010 was a Wednesday, so we return Wednesday. Solution1234// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"function getDayName(dateString) { return [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday' ][(new Date(dateString)).getDay()];}","link":"/2019/06/07/javaScriptDates/"},{"title":"Day 0: Hello, World","text":"ObjectiveIn this challenge, we review some basic concepts that will get you started with this series. You will need to use the same (or similar) syntax to read input and write output in challenges throughout HackerRank. Check out the Tutorial tab for learning materials and an instructional video! TaskTo complete this challenge, you must save a line of input from stdin to a variable, print Hello, World. on a single line, and finally print the value of your variable on a second line. You’ve got this! Note: The instructions are Java-based, but we support submissions in many popular languages. You can switch languages using the drop-down menu above your editor, and the InputString variable may be written differently depending on the best-practice conventions of your submission language. Input FormatA single line of text denoting inputString (the variable whose contents must be printed). Output FormatPrint Hello, World. on the first line, and the contents of inputString on the second line. Sample Input 01Welcome to 30 Days of Code! ##Sample Output 0 12Hello, World. Welcome to 30 Days of Code! ExplanationOn the first line, we print the string literal Hello, World.. On the second line, we print the contents of the inputString variable which, for this sample case, happens to be Welcome to 30 Days of Code!. If you do not print the variable’s contents to stdout, you will not pass the hidden test case. Solution123456function processData(inputString) { // This line of code prints the first line of output console.log(\"Hello, World.\"); // Write the second line of output that prints the contents of 'inputString' here.}","link":"/2019/06/08/helloWorld/"},{"title":"Day 7: Regular Expressions I","text":"ObjectiveIn this challenge, we use a Regular Expression to evaluate a string. Check out the attached tutorial for more details. TaskComplete the function in the editor below by returning a RegExp object, re, that matches any string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i, o, and u. Constraints The length of string s is &gt;= 3. String s consists of lowercase letters only (i.e., [a-z]). Output FormatThe function must return a RegExp object that matches any string s beginning with and ending in the same vowel. Sample Input 01bcd Sample Output 01false Explanation 0This string starts with (and ends in) a consonant, so it cannot start and end with the same vowel. Sample Input 11abcd Sample Output 11false Explanation 1This string ends in a consonant, so it cannot start and end with the same vowel. Sample Input 21abcda Sample Output 21true Explanation 2This string starts and ends with the same vowel (a). Sample Input 31abcdo Sample Output 31false Explanation 3This string starts with the vowel a but ends in the vowel o. Solution12345678910111213function regexVar() { /* * Declare a RegExp object variable named 're' * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u}) */ return new RegExp(/^([aeiou]).*\\1$/); /* * Do not remove the return statement */ return re;}","link":"/2019/06/08/regx1/"},{"title":"Day 7: Regular Expressions II","text":"TaskComplete the function in the editor below by returning a RegExp object, re, that matches any string s satisfying both of the following conditions: String s starts with the prefix Mr., Mrs., Ms., Dr., or Er. The remainder of string s (i.e., the rest of the string after the prefix) consists of one or more upper and/or lowercase English alphabetic letters (i.e., [a-z] and [A-Z]). Constraints The length of string s is &gt;= 3. Output FormatThe function must return a RegExp object that matches any string s satisfying both of the given conditions. Sample Input 01Mr.X Sample Output 01true Explanation 0This string starts with Mr., followed by an English alphabetic letter (X). Sample Input 11Mrs.Y Sample Output 11true Explanation 1This string starts with Mrs., followed by an English alphabetic letter (Y). Sample Input 21Dr#Joseph Sample Output 21false Explanation 2This string starts with Dr# instead of Dr., so it’s invalid. Sample Input 31Er .Abc Sample Output 31false Explanation 3This string starts with Er but there is a space before the period (.), making the string invalid. Solution123456789101112function regexVar() { /* * Declare a RegExp object variable named 're' * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', * followed by one or more letters. */ const re = new RegExp(/^(Mr\\.|Dr\\.|Er\\.|Ms\\.|Mrs\\.)\\s?[a-z|A-Z]+$/); /* * Do not remove the return statement */ return re;}","link":"/2019/06/08/regx2/"},{"title":"Day 7: Regular Expressions III","text":"TaskComplete the function in the editor below by returning a RegExp object, re, that matches every integer in some string s. Constraints The length of string s is &gt;= 3. It’s guaranteed that string s contains at least one integer. Output FormatThe function must return a RegExp object that matches every integer in some string s. Sample Input 01102, 1948948 and 1.3 and 4.5 Sample Output 012345610219489481345 Explanation 0When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ ‘102’, ‘1948948’, ‘1’, ‘3’, ‘4’, ‘5’ ]. Sample Input 111 2 3 Sample Output 1123123 Explanation 1When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ ‘1’, ‘2’, ‘3’ ]. Solution123456789101112function regexVar() { /* * Declare a RegExp object variable named 're' * It must match ALL occurrences of numbers in a string. */ const re = new RegExp(/[0-9]+/gm); /* * Do not remove the return statement */ return re;}","link":"/2019/06/08/regx3/"},{"title":"Day 8: Create a Button","text":"ObjectiveIn this challenge, we practice creating buttons in JavaScript. Check out the attached tutorial for learning materials. TaskComplete the code in the editor so that it creates a clickable button satisfying the following properties: The button’s id is btn. The button’s initial text label is . After each click, the button must increment by . Recall that the button’s text label is the JS object’s innerHTML property. The button has the following style properties: A width of 96px. A height of 48px. The font-size attribute is 24px. The .js and .css files are in different directories, so use the link tag to provide the CSS file path and the script tag to provide the JS file path: 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/button.css&quot; type=&quot;text/css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=&quot;js/button.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; SubmissionsThis is a new style of challenge involving Front-End rendering. It may take up to seconds to see the result of your code, so please be patient after clicking Submit. The Submissions page contains screenshots to help you gauge how well you did. Ask questions in the Discussions forum and submit any bug reports to support@hackerrank.com. Enjoy! ExplanationInitially, the button looks like this: After the first 4 clicks, it looks like this: After 5 more clicks, it looks like this: Solutionjs123456789document.addEventListener('DOMContentLoaded', () =&gt; { const button = document.getElementById('btn'); button.addEventListener('click', (e) =&gt; { const count = Number(e.currentTarget.innerText) + 1; e.currentTarget.innerText = count; });}); html12345678910111213&lt;!-- Enter your HTML code here --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Button&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"css/button.css\" type=\"text/css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=\"btn\" type=\"button\"&gt;0&lt;/button&gt; &lt;script src=\"js/button.js\" type=\"text/javascript\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; css12345#btn { width: 96px; height: 48px; font-size: 24px;}","link":"/2019/06/09/createButton/"},{"title":"Day 1: Data Types","text":"ObjectiveToday, we’re discussing data types. Check out the Tutorial tab for learning materials and an instructional video! TaskComplete the code in the editor below. The variables i, d, and s are already declared and initialized for you. You must: Declare 3 variables: one of type int, one of type double, and one of type String. Read 3 lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your 3 variables. Use the + operator to perform the following operations: Print the sum of i plus your int variable on a new line. Print the sum of d plus your double variable to a scale of one decimal place on a new line. Concatenate s with the string you read as input and print the result on a new line. Note: If you are using a language that doesn’t support using + for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input. Input FormatThe first line contains an integer that you must sum with i. The second line contains a double that you must sum with d. The third line contains a string that you must concatenate with s. Output FormatPrint the sum of both integers on the first line, the sum of both doubles (scaled to 1 decimal place) on the second line, and then the two concatenated strings on the third line. Sample Input 0123124.0is the best place to learn and practice coding! ##Sample Output 0 123168.0HackerRank is the best place to learn and practice coding! ExplanationWhen we sum the integers 4 and 12, we get the integer 16.When we sum the floating-point numbers 4.0 and 4.0, we get 8.0. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!. You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin. SolutionsSolution 11234567891011121314151617// Declare second integer, double, and String variables.var first = +input_stdin_array[0];var second = +input_stdin_array[1];var third = input_stdin_array[2];// Read and save an integer, double, and String to your variables.// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s+third); Solution 21234567891011121314151617// Declare second integer, double, and String variables.let first, second, third;// Read and save an integer, double, and String to your variables.first = parseInt(readLine());second = parseFloat(readLine());third = readLine();// Print the sum of both integer variables on a new line.console.log(i + first);// Print the sum of the double variables on a new line.console.log((d + second).toFixed(1));// Concatenate and print the String variables on a new line// The 's' variable above should be printed first.console.log(s + third);","link":"/2019/06/09/dataTypes/"},{"title":"서울에서 김서방 찾기","text":"문제 설명String형 배열 seoul의 element중 Kim의 위치 x를 찾아, 김서방은 x에 있다는 String을 반환하는 함수, solution을 완성하세요. seoul에 “Kim”은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다. 제한 사항 seoul은 길이 1 이상, 1000 이하인 배열입니다. seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다. “Kim”은 반드시 seoul 안에 포함되어 있습니다. 입출력 예| seoul | return || — | — | — || [“Jane”, “Kim”] | “김서방은 1에 있다” | Solution 123function solution(seoul) { return `김서방은 ${seoul.indexOf('Kim')}에 있다`;}","link":"/2019/06/09/findingKim/"},{"title":"Day 2: Operators","text":"ObjectiveIn this challenge, you’ll work with arithmetic operators. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven the meal price (base cost of a meal), tip percent (the percentage of the meal price being added as tip), and tax percent (the percentage of the meal price being added as tax) for a meal, find and print the meal’s total cost. Note: Be sure to use precise values for your calculations, or you may end up with an incorrectly rounded result! Input FormatThere are 3 lines of numeric input: The first line has a double, mealCost (the cost of the meal before tax and tip). The second line has an integer, tipPercent (the percentage of mealCost being added as tip). The third line has an integer, taxPercent (the percentage of mealCost being added as tax). Output FormatPrint the total meal cost, where totalCost is the rounded integer result of the entire bill (mealCost with added tax and tip). Sample Input 012312.00208 ##Sample Output 0 115 ExplanationGiven:mealCost = 12, tipPercent = 20, taxPercent = 8 Calculations: tip = 12 x = 2.4 tax = 12 x = 0.96 totalCost = mealCost + tip + tax = 12 + 2.4 + 0.96 = 15.36 round(totalCost) = 15 We round totalCost to the nearest dollar (integer) and then print our result, 15. SolutionsSolution 1123456789function main() { var cost = +input_stdin_array[0]; var tip = cost * input_stdin_array[1] / 100; var tax = cost * input_stdin_array[2] / 100; var total = cost + tip + tax; var round = Math.round(total); console.log('The total meal cost is ' + round + ' dollars.');} Solution 2123456// Complete the solve function below.function solve(meal_cost, tip_percent, tax_percent) { let totalCost = meal_cost * (1 + (tip_percent / 100) + (tax_percent / 100)); console.log(Math.round(totalCost));}","link":"/2019/06/09/operators/"},{"title":"Day 4: Class vs. Instance","text":"ObjectiveIn this challenge, we’re going to learn about the difference between a class and an instance; because this is an Object Oriented concept, it’s only enabled in certain languages. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Person class with an instance variable, , and a constructor that takes an integer, , as a parameter. The constructor must assign to after confirming the argument passed as is not negative; if a negative argument is passed as , the constructor should set to and print Age is not valid, setting age to 0.. In addition, you must write the following instance methods: yearPasses() should increase the instance variable by .amIOld() should perform the following conditional actions:If , print You are young..If and , print You are a teenager..Otherwise, print You are old..To help you learn by example and complete this challenge, much of the code is provided for you, but you’ll be writing everything in the future. The code that creates each instance of your Person class is in the main method. Don’t worry if you don’t understand it all quite yet! Note: Do not remove or alter the stub code in the editor. Input FormatInput is handled for you by the stub code in the editor. The first line contains an integer, T (the number of test cases), and the T subsequent lines each contain an integer denoting the age of a Person instance. Constraints 1 &lt;= T &lt;= 4 -5 &lt;= age &lt;= 30 Output FormatComplete the method definitions provided in the editor so they meet the specifications outlined above; the code to test your work is already in the editor. If your methods are implemented correctly, each test case will print 2 or 3 lines (depending on whether or not a valid initialAge was passed to the constructor). Sample Input123454-1101618 ##Sample Output 123456789101112Age is not valid, setting age to 0.You are young.You are young.You are young.You are a teenager.You are a teenager.You are old.You are old.You are old. ExplanationTest Case 0: initialAge = -1Because initialAge &lt; 0, our code must set age to 0 and print the “Age is not valid…” message followed by the young message. Three years pass and age = 3, so we print the young message again. Test Case 1: initialAge = 10Because initialAge &lt; 13, our code should print that the person is young. Three years pass and age = 13, so we print that the person is now a teenager. Test Case 2: initialAge = 16Because 13 &lt;= initialAge &lt; 18, our code should print that the person is a teenager. Three years pass and age = 19, so we print that the person is old. Test Case 3: initialAge = 18Because initialAge &gt;= 18, our code should print that the person is old. Three years pass and the person is still old at age = 21, so we print the old message again. The extra line at the end of the output is supposed to be there and is trimmed before being compared against the test case’s expected output. If you’re failing this challenge, check your logic and review your print statements for spelling errors. Solution123456789101112131415161718function Person(initialAge){ // Add some more code to run some checks on initialAge (initialAge &lt;= 0) &amp;&amp; (console.log('Age is not valid, setting age to 0.')); this.age = (initialAge &lt;= 0) ? 0 : initialAge; this.amIOld=function(){ // Do some computations in here and print out the correct statement to the console let age = this.age; let result = ''; console.log(`You are ${(age &gt;= 13 &amp;&amp; age &lt; 18) ? 'a teenager.' : ((age &lt; 13) ? 'young.' : 'old.')}`); }; this.yearPasses=function(){ // Increment the age of the person in here return this.age++; };}","link":"/2019/06/10/classvsInstance/"},{"title":"Day 3: Intro to Conditional Statements","text":"ObjectiveIn this challenge, we’re getting started with conditional statements. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an integer, n, perform the following conditional actions: If n is odd, print Weird If n is even and in the inclusive range of 2 to 5, print Not Weird If n is even and in the inclusive range of 6 to 20, print Weird If n is even and greater than 20, print Not Weird Complete the stub code provided in your editor to print whether or not is weird. Input FormatA single line containing a positive integer, n. Constraints 1 &lt;= n &lt;= 100 Output FormatPrint Weird if the number is weird; otherwise, print Not Weird. Sample Input 013 ##Sample Output 0 1Weird Sample Input 1124 ##Sample Output 1 1Not Weird ExplanationSample Case 0: n = 3n is odd and odd numbers are weird, so we print Weird. Sample Case 1: n = 24n &gt; 20 and n is even, so it isn’t weird. Thus, we print Not Weird. SolutionsSolution 112345678910111213141516// Complete the solve function below.function main() { var N = parseInt(readLine()); if(N % 2 == 0) { if(N &gt;= 2 &amp;&amp; N &lt; 6) { console.log('Not Weird'); } else if(N &gt;= 6 &amp;&amp; N &lt;= 20) { console.log('Weird'); } else if(N &gt; 20) { console.log('Not Weird'); } } else { console.log('Weird'); }} Solution 21234567// Complete the solve function below.function main() { const N = parseInt(readLine(), 10); let result = (N % 2 === 1 || (N % 2 === 0 &amp;&amp; N &gt;= 6 &amp;&amp; N &lt;= 20)) ? 'Weird' : 'Not Weird'; console.log(result);}","link":"/2019/06/10/conditionalStatements/"},{"title":"문자열 다루기 기본","text":"문제 설명문자열 s의 길이가 4 혹은 6이고, 숫자로만 구성돼있는지 확인해주는 함수, solution을 완성하세요. 예를 들어 s가 a234이면 False를 리턴하고 1234라면 True를 리턴하면 됩니다. 제한사항 s는 길이 1 이상, 길이 8 이하인 문자열입니다. 입출력 예| s | return || — | — | — || “a234” | false || “1234” | true | Solution 123function solution(s) { return /^\\d{6}$|^\\d{4}$/.test(s);}","link":"/2019/06/08/handlingStringBasic/"},{"title":"Day 5: Loops","text":"ObjectiveIn this challenge, we’re going to use loops to help us do some simple math. Check out the Tutorial tab to learn more. TaskGiven an integer, n, print its first 10 multiples. Each multiple n x i (where 1 &lt;= i &lt;= 10) should be printed on a new line in the form: n x i = result. Input FormatA single integer, n. Constraints 2 &lt;= n &lt;= 20 Output FormatPrint 10 lines of output; each line i (where 1 &lt;= i &lt;= 10) contains the result of n x i in the form:n x i = result. Sample Input12 ##Sample Output 123456789102 x 1 = 22 x 2 = 42 x 3 = 62 x 4 = 82 x 5 = 102 x 6 = 122 x 7 = 142 x 8 = 162 x 9 = 182 x 10 = 20 Solution1234567function main() { const n = parseInt(readLine(), 10); new Array(10).fill(n).forEach((time, index) =&gt; { console.log(`${time} x ${index + 1} = ${time * (index + 1)}`); });}","link":"/2019/06/11/loops/"},{"title":"Day 6: Let's Review","text":"ObjectiveToday we’re expanding our knowledge of Strings and combining it with what we’ve already learned about loops. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a string, S, of length N that is indexed from 0 to N - 1, print its even-indexed and odd-indexed characters as 2 space-separated strings on a single line (see the Sample below for more detail). Note: 0 is considered to be an even index. Input FormatThe first line contains an integer, T (the number of test cases).Each line i of the T subsequent lines contain a String, S. Constraints 1 &lt;= T &lt;= 10 2 &lt;= length of S &lt;= 10000 Output FormatFor each String Sj (where 0 &lt;= j &lt;= T - 1), print Sj‘s even-indexed characters, followed by a space, followed by Sj‘s odd-indexed characters. Sample Input1232HackerRank ##Sample Output 12Hce akrRn ak ##Explanation Test Case 0: S = “Hacker”S[0] = “H”S[1] = “a”S[2] = “c”S[3] = “k”S[4] = “e”S[5] = “r” The even indices are 0, 2, and 4, and the odd indices are 1, 3, and 5. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Hce), and the second string contains the ordered characters from S‘s odd indices (akr). Test Case 1: S = “Rank”S[0] = “R”S[1] = “a”S[2] = “n”S[3] = “k” The even indices are 0 and 2, and the odd indices are 1 and 3. We then print a single line of 2 space-separated strings; the first string contains the ordered characters from S‘s even indices (Rn), and the second string contains the ordered characters from S‘s odd indices (ak). Solution12345678910111213141516function processData(input) { //Enter your code here input.split(\"\\n\").reduce((target, item, index) =&gt; { if (index &amp;&amp; Number.isNaN(+item)) { let result = item.split('').reduce((target, text, index) =&gt; { target[+(index % 2 !== 0)] += text; return target; }, new Array(2).fill('')).join(' ') console.log(result); } return target; }, '');}","link":"/2019/06/11/review/"},{"title":"Day 10: Binary Numbers","text":"ObjectiveToday, we’re working with binary numbers. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a base-10 integer, n, convert it to binary (base-2). Then find and print the base-10 integer denoting the maximum number of consecutive 1‘s in n‘s binary representation. Input FormatA single integer, n. Constraints 1 &lt;= n &lt;= 106 Output FormatPrint a single base-10 integer denoting the maximum number of consecutive 1‘s in the binary representation of n. Sample Input 115 Sample Output 111 Sample Input 2113 Sample Output 212 ExplanationSample Case 1:The binary representation of 5 is 101, so the maximum number of consecutive 1‘s is 1. Sample Case 2:The binary representation of 13 is 1101, so the maximum number of consecutive 1‘s is 2. SolutionsSolution 112345678910111213141516171819202122function main() { let n = parseInt(readLine(), 10); let values = []; while (+n != 0) { values.push(n % 2); n = Math.floor(n / 2); } let { result } = values.reduce((target, item, index) =&gt; { item ? target['accumulator']++ : (target['accumulator'] = 0); target['accumulator'] &gt; target['result'] &amp;&amp; (target['result'] = target['accumulator']); return target; }, { accumulator: 0, result: 0 }) console.log(result);} Solution 212345678910111213141516function main() { const n = parseInt(readLine(), 10); let result = 0; const temp = n.toString(2).split('').reduce((target, num) =&gt; { let value = Number(num) &gt; 0 ? Number(target) + Number(num) : ( result = target &gt; result ? target : result, 0 ) return value; }, 0) console.log(result - temp &gt; 0 ? result : temp)} Solution 3123456789101112131415161718192021222324function main() { const n = parseInt(readLine(), 10); const array = n.toString(2).split(''); let max = 0; let cur = 0; for (let i = 0, itotal = array.length; i &lt; itotal; i++) { if (array[i] == 1) { cur++; } else if (array[i] == 0) { if (cur &gt; max) { max = cur; } cur = 0; } } if (cur &gt; max) { max = cur; } console.log(max);}`","link":"/2019/06/12/binaryNumbers/"},{"title":"Day 8: Dictionaries and Maps","text":"ObjectiveToday, we’re learning about Key-Value pair mappings using a Map or Dictionary data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven n names and phone numbers, assemble a phone book that maps friends’ names to their respective phone numbers. You will then be given an unknown number of names to query your phone book for. For each name queried, print the associated entry from your phone book on a new line in the form name=phoneNumber; if an entry for name is not found, print Not found instead. Note: Your phone book should be a Dictionary/Map/HashMap data structure. Input FormatThe first line contains an integer, n, denoting the number of entries in the phone book.Each of the n subsequent lines describes an entry in the form of 2 space-separated values on a single line. The first value is a friend’s name, and the second value is an 8-digit phone number. After the n lines of phone book entries, there are an unknown number of lines of queries. Each line (query) contains a name to look up, and you must continue reading lines until there is no more input. Note: Names consist of lowercase English alphabetic letters and are first names only. Constraints 1 &lt;= n &lt;= 105 1 &lt;= queries &lt;= 105 Output FormatOn a new line for each query, print Not found if the name has no corresponding entry in the phone book; otherwise, print the full name and phoneNumber in the format name=phoneNumber. Sample Input12345673sam 99912222tom 11122222harry 12299933samedwardharry Sample Output123sam=99912222Not foundharry=12299933 ExplanationWe add the following n = 3 (Key,Value) pairs to our map so it looks like this: phoneBook = {(sam, 99912222), (tom, 11122222), (harry, 12299933)} We then process each query and print key=value if the queried key is found in the map; otherwise, we print Not found. Query 0: samSam is one of the keys in our dictionary, so we print sam=99912222. Query 1: edwardEdward is not one of the keys in our dictionary, so we print Not found. Query 2: harryHarry is one of the keys in our dictionary, so we print harry=12299933. SolutionsSolution 1123456789101112131415161718192021222324function processData(input) { //Enter your code here const { phoneBook, queries } = input.split('\\n').reduce((target, item, index) =&gt; { let total = !index ? item : target['total']; let { 0: key, 1: value } = item.split(' '); !index ? (target['total'] = total) : ( index &lt;= total ? (target['phoneBook'][key] = value) : target['queries'].push(item) ) return target; }, { total: 0, phoneBook: [], queries: [] }); queries.forEach((query) =&gt; { let value = phoneBook[String(query)]; console.log(value ? `${query}=${value}` : 'Not found'); });} Solution 212345678910111213141516function processData(input) { //Enter your code here const inputData = input.split('\\n'); const dataLength = Number(inputData.shift()); const phoneBook = new Map(); const queryData = inputData.reduce((target, item, index) =&gt; { index &lt; dataLength ? phoneBook.set(item.split(' ')[0], item.split(' ')[1]) : target.push(item); return target; }, []); queryData.forEach((val, index) =&gt; { console.log(phoneBook.get(val) ? `${val}=${phoneBook.get(val)}` : 'Not found'); })} Solution 31234567891011121314151617181920212223242526function processData(input) { //Enter your code here const splitInput = input.split(\"\\n\"); const phoneBookSize = +splitInput[0]; const inputValue = splitInput.slice(phoneBookSize + 1); const temp = splitInput.slice(1, phoneBookSize + 1).map(list =&gt; { let result = { name: list.split(\" \")[0], phoneNumber: list.split(\" \")[1] } return result; }); let phoneBook = []; for (let list of temp) { phoneBook[list.name] = list.phoneNumber; } for (let name of inputValue) { if (phoneBook[name]) { console.log(`${name}=${phoneBook[name]}`); } else { console.log('Not found') } }}","link":"/2019/06/12/maps/"},{"title":"Day 9: Recursion 3","text":"ObjectiveToday, we’re learning and practicing an algorithmic concept called Recursion. Check out the Tutorial tab for learning materials and an instructional video! Recursive Method for Calculating Factorial TaskWrite a factorial function that takes a positive integer, N as a parameter and prints the result of N! (N factorial). Note: If you fail to use recursion or fail to name your recursive function factorial or Factorial, you will get a score of 0. Input FormatA single integer, N (the argument to pass to factorial). Constraints 2 &lt;= N &lt;= 12 Your submission must contain a recursive function named factorial. Output FormatPrint a single integer denoting N!. Sample Input13 Sample Output16 ExplanationConsider the following steps: factorial(3) = 3 X factorial(2) factorial(2) = 2 X factorial(1) factorial(1) = 1 From steps 2 and 3, we can say factorial(2) = 2 X 1 = 2; then when we apply the value from factorial(2) to step 1, we get factorial(3) = 3 X 2 X 1 = 6. Thus, we print 6 as our answer. SolutionsSolution 11234// Complete the factorial function below.function factorial(n) { return (!+n) ? 1 : n * factorial(n - 1);} Solution 212345678910// Complete the factorial function below.let memoization = [0, 1];const factorial = (n) =&gt; { (typeof memoization[n] !== 'number') &amp;&amp; ( memoization[n] = (n - 1) &gt; 0 ? n * factorial(n - 1) : 1 ); return memoization[n];}","link":"/2019/06/12/recursion/"},{"title":"소수 찾기","text":"문제 설명1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요. 소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.(1은 소수가 아닙니다.) 제한 사항 n은 2이상 1000000이하의 자연수입니다. 입출력 예| n | return || — | — | — || 10 | 4 || 5 | 3 | 입출력 예 설명입출력 예 #11부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환 입출력 예 #21부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환 Solution 123456789101112131415161718192021function solution(n) { let isPrime = [false, false, ...new Array(n - 1).fill(true)]; const answers = []; for (let item = 2; item &lt;= n; item++) { if (isPrime[item] ) { answers.push(item); let index = item * item; while (index &lt;= n) { isPrime[index] = false; index += item; } } } return answers.length;}","link":"/2019/06/10/findingPrimeNumber/"},{"title":"Day 7: Arrays","text":"ObjectiveToday, we’re learning about the Array data structure. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven an array, A, of N integers, print A‘s elements in reverse order as a single line of space-separated numbers. Input FormatThe first line contains an integer, N (the size of our array).The second line contains N space-separated integers describing array A‘s elements. Constraints 1 &lt;= N &lt;= 1000 1 &lt;= Ai &lt;= 10000, where Ai is the ith integer in the array. Output FormatPrint the elements of array A in reverse order as a single line of space-separated numbers. Sample Input1241 4 3 2 ##Sample Output 12 3 4 1 SolutionsSolution 11234567function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); console.log(arr.reverse().join(' '));} Solution 212345678910111213141516171819function main() { const n = parseInt(readLine(), 10); const arr = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); const reverseArray = (array) =&gt; { let temp = null; const length = array.length; for (let i = 0; i &lt; length / 2; i++){ temp = array[i]; array[i] = array[length - 1 - i]; array[length - 1 - i] = temp; } return array; } console.log(reverseArray(arr).join(' '));}","link":"/2019/06/11/arrays/"},{"title":"Day 13: Abstract Classes","text":"ObjectiveToday, we’re taking what we learned yesterday about Inheritance and extending it to Abstract Classes. Because this is a very specific Object-Oriented concept, submissions are limited to the few languages that use this construct. Check out the Tutorial tab for learning materials and an instructional video! TaskGiven a Book class and a Solution class, write a MyBook class that does the following: Inherits from Book Has a parameterized constructor taking these 3 parameters: string title string author int price Implements the Book class’ abstract display() method so it prints these 3 lines: title, a space, and then the current instance’s title. author, a space, and then the current instance’s author. price, a space, and then the current instance’s price. Note: Because these classes are being written in the same file, you must not use an access modifier (e.g.: public) when declaring MyBook or your code will not execute. Input FormatYou are not responsible for reading any input from stdin. The Solution class creates a Book object and calls the MyBook class constructor (passing it the necessary arguments). It then calls the display method on the Book object. Output FormatThe void display() method should print and label the respective title, author, and price of the MyBook object’s instance (with each value on its own line) like so: 123Title: $titleAuthor: $authorPrice: $price Note: The $ is prepended to variable names to indicate they are placeholders for variables. Sample InputThe following input from stdin is handled by the locked stub code in your editor: 123The AlchemistPaulo Coelho248 Sample OutputThe following output is printed by your display() method: 123Title: The AlchemistAuthor: Paulo CoelhoPrice: 248 Solution123456789101112131415161718192021222324252627// Declare your class here.class MyBook extends Book { /** * Class Constructor * * @param title The book's title. * @param author The book's author. * @param price The book's price. **/ // Write your constructor here constructor(title, author, price) { super(title, author); this.price = price; } /** * Method Name: display * * Print the title, author, and price in the specified format. **/ // Write your method here display() { console.log(`Title: ${this.title}\\nAuthor: ${this.author}\\nPrice: ${this.price}`); }}// End class","link":"/2019/06/13/abstractClasses/"},{"title":"수박수박수박수박수박수?","text":"문제 설명길이가 n이고, 수박수박수박수….와 같은 패턴을 유지하는 문자열을 리턴하는 함수, solution을 완성하세요. 예를들어 n이 4이면 수박수박을 리턴하고 3이라면 수박수를 리턴하면 됩니다. 제한 조건 n은 길이 10,000이하인 자연수입니다. 입출력 예 n return 3 수박수 4 수박수박 Solution 123function solution(n) { return `${'수박'.repeat(Math.floor(n / 2))}${n % 2 ? '수' : ''}`;}","link":"/2019/06/11/repeatWatermelon/"},{"title":"문자열을 정수로 바꾸기","text":"문제 설명문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요. 제한 조건 s의 길이는 1 이상 5이하입니다. s의 맨앞에는 부호(+, -)가 올 수 있습니다. s는 부호와 숫자로만 이루어져있습니다. s는 0으로 시작하지 않습니다. 입출력 예예를들어 str이 1234이면 1234를 반환하고, -1234이면 -1234를 반환하면 됩니다.str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다. Solution 123function solution(s) { return +s;}","link":"/2019/06/12/replaceStringsToInteger/"},{"title":"Day 12: Inheritance","text":"ObjectiveToday, we’re delving into Inheritance. Check out the attached tutorial for learning materials and an instructional video! TaskYou are given two classes, Person and Student, where Person is the base class and Student is the derived class. Completed code for Person and a declaration for Student are provided for you in the editor. Observe that Student inherits all the properties of Person. Complete the Student class by writing the following: A Student class constructor, which has 4 parameters: A string, firstName. A string, lastName. An integer, id. An integer array (or vector) of test scores, scores. A char calculate() method that calculates a Student object’s average and returns the grade character representative of their calculated average: Input FormatThe locked stub code in your editor calls your Student class constructor and passes it the necessary arguments. It also calls the calculate method (which takes no arguments). You are not responsible for reading the following input from stdin:The first line contains firstName, lastName, and id, respectively. The second line contains the number of test scores. The third line of space-separated integers describes scores. Constraints 1 &lt;= |firstName|,|lastName| &lt;= 10 |id| = 7 0 &lt;= score,average &lt;= 100 Output FormatThis is handled by the locked stub code in your editor. Your output will be correct if your Student class constructor and calculate() method are properly implemented. Sample Input123Heraldo Memelli 81356272100 80 Sample Output123Name: Memelli, HeraldoID: 8135627Grade: O ExplanationThis student had 2 scores to average: 100 and 80. The student’s average grade is https://latex.codecogs.com/svg.latex?\\frac{(100&space;&plus;&space;80)}{2} = 90. An average grade of 90 corresponds to the letter grade O, so our calculate() method should return the character’O’. SolutionsSolution 1123456789101112131415161718192021222324252627282930313233343536373839404142434445class Student extends Person { constructor(firstName, lastName, id, scores) { super(firstName, lastName, id, scores); this.scores = scores; } calculate() { const average = this.scores.reduce((target, score) =&gt; { return target + score }) / this.scores.length; const range = (average &lt; 70) ? Math.ceil((100 - average) / 15) : Math.floor((100 - average - 1) / 10); let letter = ''; switch (range) { case -1: case 0: letter = 'O'; break; case 1: letter = 'E'; break; case 2: letter = 'A'; break; case 3: letter = 'P'; break; case 4: letter = 'D'; break; default: letter = 'T'; break; } return letter; }} Solution 21234567891011121314151617181920212223242526272829class Student extends Person { constructor(firstName, lastName, idNumber, testScores) { super(firstName, lastName, idNumber); this.testScores = testScores; } calculate() { let average = 0; let sum = 0; let grade = ''; for (let i = 0, length = this.testScores.length; i &lt; length; i++) { sum += this.testScores[i]; } average = sum / this.testScores.length; if (90 &lt;= average &amp;&amp; average &lt;= 100) { grade = 'O'; } else if (80 &lt;= average &amp;&amp; average &lt; 90) { grade = 'E'; } else if (70 &lt;= average &amp;&amp; average &lt; 80) { grade = 'A'; } else if (55 &lt;= average &amp;&amp; average &lt; 70) { grade = 'P'; } else if (40 &lt;= average &amp;&amp; average &lt; 55) { grade = 'D'; } else { grade = 'T'; } return grade; }}","link":"/2019/06/13/inheritance/"},{"title":"Day 11: 2D Arrays","text":"ObjectiveToday, we’re building on our knowledge of Arrays by adding another dimension. Check out the Tutorial tab for learning materials and an instructional video! ContextGiven a 6 X 6 2D Array, A: 1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 0 0 0 00 0 0 0 0 00 0 0 0 0 0 We define an hourglass in A to be a subset of values with indices falling in this pattern in A‘s graphical representation: 123a b c de f g There are 16 hourglasses in A, and an hourglass sum is the sum of an hourglass’ values. TaskCalculate the hourglass sum for every hourglass in A, then print the maximum hourglass sum. Input FormatThere are 6 lines of input, where each line contains 6 space-separated integers describing 2D Array A; every value in A will be in the inclusive range of -9 to 9. Constraints -9 &lt;= A[i][j] &lt;= 9 0 &lt;= i,j &lt;= 5 Output FormatPrint the largest (maximum) hourglass sum found in A. Sample Input1234561 1 1 0 0 00 1 0 0 0 01 1 1 0 0 00 0 2 4 4 00 0 0 2 0 00 0 1 2 4 0 Sample Output119 ExplanationA contains the following hourglasses: 1234567891011121314151 1 1 1 1 0 1 0 0 0 0 0 1 0 0 01 1 1 1 1 0 1 0 0 0 0 00 1 0 1 0 0 0 0 0 0 0 0 1 1 0 00 0 2 0 2 4 2 4 4 4 4 01 1 1 1 1 0 1 0 0 0 0 0 0 2 4 40 0 0 0 0 2 0 2 0 2 0 00 0 2 0 2 4 2 4 4 4 4 0 0 0 2 00 0 1 0 1 2 1 2 4 2 4 0 The hourglass with the maximum sum (19) is: 1232 4 4 21 2 4 SolutionsSolution 112345678910111213141516171819202122function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } let result = arr.reduce((target, rows, index) =&gt; { rows.reduce((subTarget, item, subIndex) =&gt; { ( index &lt; arr.length - 2 &amp;&amp; subIndex &lt; arr.length - 2 ) &amp;&amp; target.push( arr[index][subIndex] + arr[index][subIndex + 1] + arr[index][subIndex + 2] + arr[index + 1][subIndex + 1] + arr[index + 2][subIndex] + arr[index + 2][subIndex + 1] + arr[index + 2][subIndex + 2] ); }, []); return target; }, []); console.log(Math.max.apply(null, result));} Solution 21234567891011121314151617181920212223242526272829303132function main() { let arr = Array(6); let maxSum; for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const findMaxSum = (n, m) =&gt; { let sum = 0; for (let i = 0; i &lt; 3; i++) { for (let j = 0; j &lt; 3; j++) { sum += !(i === 1 &amp;&amp; (j === 0 || j === 2)) &amp;&amp; arr[n + i][m + j]; } } return sum; } const search = () =&gt; { let sum; for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { sum = findMaxSum(i, j); (i === 0 &amp;&amp; j === 0) &amp;&amp; (maxSum = sum); maxSum &lt; sum &amp;&amp; (maxSum = sum); } } } search(); console.log(maxSum);} Solution 21234567891011121314151617181920function main() { let arr = Array(6); for (let i = 0; i &lt; 6; i++) { arr[i] = readLine().split(' ').map(arrTemp =&gt; parseInt(arrTemp, 10)); } const temp = [] for (let i = 0; i &lt; 4; i++) { for (let j = 0; j &lt; 4; j++) { temp.push(arr[i][j] + arr[i][j + 1] + arr[i][j + 2] + arr[i + 1][j + 1] + arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2]) } } let max = temp.reduce(function (previous, current) { return previous &gt; current ? previous : current; }); console.log(max);}","link":"/2019/06/13/2DArrays/"},{"title":"Day 16: Exceptions - String to Integer","text":"ObjectiveToday, we’re getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video! TaskRead a string, S, and print its integer value; if S cannot be converted to an integer, print Bad String. Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a 0 score. Input FormatA single string, S. Constraints 1 &lt;= |S| &lt;= 6, where |S| is the length of string S. S is composed of either lowercase letters (a - z) or decimal digits (0 - 9). Output FormatPrint the parsed integer value of S, or Bad String if S cannot be converted to an integer. Sample Input 013 Sample Output 013 Sample Input 11za Sample Output 11Bad String ExplanationSample Case 0 contains an integer, so it should not raise an exception when we attempt to convert it to an integer. Thus, we print the 3.Sample Case 1 does not contain any integers, so an attempt to convert it to an integer will raise an exception. Thus, our exception handler prints Bad String. Solution1234567891011121314151617181920212223242526/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } */function main() { const S = readLine(); try { console.log(parseInt(S).toString().replace('NaN', 'Bad String')); } catch (e) { console.log(\"Bad String\"); }}","link":"/2019/06/14/exceptions/"},{"title":"시저 암호","text":"문제 설명어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 “AB”는 1만큼 밀면 “BC”가 되고, 3만큼 밀면 “DE”가 됩니다. “z”는 1만큼 밀면 “a”가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요. 제한 조건 공백은 아무리 밀어도 공백입니다. s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다. s의 길이는 8000이하입니다. n은 1 이상, 25이하인 자연수입니다. 입출력 예 s n return “AB” 1 “BC” “z” 1 “a” “a B z” 4 “e F d” Solution 12345678910111213function solution(s, n) { return (s || '').split('').reduce((target,item,index) =&gt; { target += ( item == ' ' ? ' ' : String.fromCharCode((s.charCodeAt(index)&gt;90) ? (s.charCodeAt(index)+n-97)%26+97 : (s.charCodeAt(index)+n-65)%26+65 ) ); return target; }, '');}","link":"/2019/06/13/caesarCipher/"},{"title":"Day 15: Linked List","text":"ObjectiveToday we’re working with Linked Lists. Check out the Tutorial tab for learning materials and an instructional video! A Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A Node insert function is also declared in your editor. It has two parameters: a pointer, head, pointing to the first node of a linked list, and an integer data value that must be added to the end of the list as a new Node object. TaskComplete the insert function in your editor so that it creates a new Node (pass data as the Node constructor argument) and inserts it at the tail of the linked list referenced by the head parameter. Once the new node is added, return the reference to the head node. Note: If the head argument passed to the insert function is null, then the initial list is empty. Input FormatThe insert function has 2 parameters: a pointer to a Node named head, and an integer value, data. The constructor for Node has 1 parameter: an integer value for the data field. You do not need to read anything from stdin. Output FormatYour insert function should return a reference to the head node of the linked list. Sample InputThe following input is handled for you by the locked code in the editor: The first line contains T, the number of test cases. The T subsequent lines of test cases each contain an integer to be inserted at the list’s tail. 1234542341 Sample OutputThe locked code in your editor prints the ordered data values for each element in your list as a single line of space-separated integers: 12 3 4 1 ExplanationT = 4, so the locked code in the editor will be inserting 4 nodes. The list is initially empty, so head is null; accounting for this, our code returns a new node containing the data value 2 as the head of our list. We then create and insert nodes 3, 4, and 1 at the tail of our list. The resulting list returned by the last call to insert is [2, 3, 4, 1], so the printed output is 2 3 4 1. Solution123456789101112131415161718this.insert=function(head,data){ //complete this method let node = new Node(data); if (!head) { head = node; } else { let current = head; while (current.next != null) { current = current.next; } current.next = node; } return head;};","link":"/2019/06/14/linkedList/"},{"title":"Day 14: Scope","text":"ObjectiveToday we’re discussing scope. Check out the Tutorial tab for learning materials and an instructional video! The absolute difference between two integers, a and b, is written as |a - b|. The maximum absolute difference between two integers in a set of positive integers, elements, is the largest absolute difference between any two integers in elements. The Difference class is started for you in the editor. It has a private integer array (elements) for storing N non-negative integers, and a public integer (maximumDifference) for storing the maximum absolute difference. TaskComplete the Difference class by writing the following: A class constructor that takes an array of integers as a parameter and saves it to the elements instance variable. A computeDifference method that finds the maximum absolute difference between any 2 numbers in N and stores it in the maximumDifference instance variable. Input FormatYou are not responsible for reading any input from stdin. The locked Solution class in your editor reads in 2 lines of input; the first line contains N, and the second line describes the elements array. Constraints 1 &lt;= N &lt;= 10 1 &lt;= elements[i] &lt;= 100, where 0 &lt;= i &lt;= N - 1 Output FormatYou are not responsible for printing any output; the Solution class will print the value of the maximumDifference instance variable. Sample Input1231 2 5 Sample Output14 ExplanationThe scope of the elements array and maximumDifference integer is the entire class instance. The class constructor saves the argument passed to the constructor as the elements instance variable (where the computeDifference method can access it). To find the maximum difference, computeDifference checks each element in the array and finds the maximum difference between any 2 elements: |1 - 2| = 1 |1 - 5| = 4|2 - 5| = 3 The maximum of these differences is 4, so it saves the value 4 as the maximumDifference instance variable. The locked stub code in the editor then prints the value stored as maximumDifference, which is 4. SolutionsSolution 1123456789101112131415161718let input = \"3\\n1 2 5\";const difference = () =&gt; { const result = input.split('\\n')[1].split(' ').reduce( (target, el) =&gt; { let { min, max } = target; target[\"min\"] = el &gt; min ? el : min; target[\"max\"] = el &lt; max ? el : max; return target; }, { min: -999, max: 999 } ); console.log(Math.abs(result[\"max\"] - result[\"min\"]));};difference(); Solution 2123456789101112131415161718192021222324let input = \"3\\n1 2 5\";function difference(input) { const split = input.split(\"\\n\"); const length = +split[0]; const array = split[1].split(\" \"); console.log(array, length); let maximum = 0; let result = 0; array.forEach(value1 =&gt; { array.forEach(value2 =&gt;{ result = Math.abs(value1-value2); if(result &gt; maximum) { maximum = result; } }) }); console.log(maximum);}console.log(input);difference(input);","link":"/2019/06/14/scope/"},{"title":"Day 19: Interfaces","text":"ObjectiveToday, we’re learning about Interfaces. Check out the Tutorial tab for learning materials and an instructional video! TaskThe AdvancedArithmetic interface and the method declaration for the abstract divisorSum(n) method are provided for you in the editor below. Complete the implementation of Calculator class, which implements the AdvancedArithmetic interface. The implementation for the divisorSum(n) method must return the sum of all divisors of n. Input FormatA single line containing an integer, n. Constraints 1 &lt;= n &lt;= 1000 Output FormatYou are not responsible for printing anything to stdout. The locked template code in the editor below will call your code and print the necessary output. Sample Input16 Sample Output12I implemented: AdvancedArithmetic12 ExplanationThe integer 6 is evenly divisible by 1, 2, 3, and 6. Our divisorSum method should return the sum of these numbers, which is 1 + 2 + 3 + 6 = 12. The Solution class then prints I implemented: AdvancedArithmetic on the first line, followed by the sum returned by divisorSum (which is 12) on the second line. Solution1234567891011121314151617181920212223242526272829303132333435/** It's not supported JavaScript so it create similar code **/class AdvancedArithmetic { divisor(n) { return n || 0; };}class Calculator extends AdvancedArithmetic { constructor(props) { super(props); this.divisor = this.divisorSum.bind(this); } divisorSum(n) { return Array(n).fill(0).reduce((target, item, index) =&gt; { !(n % (index + 1)) &amp;&amp; (target += (index + 1)) ; return target; }, 0); }}function Solution () { const n = 6; const myCalculator = new Calculator(); let sum = myCalculator.divisor(n); console.log(\"I implemented: AdvancedArithmetic\\n\" + sum); }Solution();","link":"/2019/06/15/interfaces/"},{"title":"Day 17: More Exceptions","text":"ObjectiveYesterday’s challenge taught you to manage exceptional situations by using try and catch blocks. In today’s challenge, you’re going to practice throwing and propagating an exception. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a Calculator class with a single method: int power(int,int). The power method takes two integers, n and p, as parameters and returns the integer result of np. If either or is negative, then the method must throw an exception with the message: n and p should be non-negative. Note: Do not use an access modifier (e.g.: public) in the declaration for your Calculator class. Input FormatInput from stdin is handled for you by the locked stub code in your editor. The first line contains an integer, T, the number of test cases. Each of the T subsequent lines describes a test case in 2 space-separated integers denoting n and p, respectively. Constraints No Test Case will result in overflow for correctly written code. Output FormatOutput to stdout is handled for you by the locked stub code in your editor. There are T lines of output, where each line contains the result of np as calculated by your Calculator class’ power method. Sample Input1234543 52 4-1 -2-1 3 Sample Output123424316n and p should be non-negativen and p should be non-negative ExplanationT = 4T0: 3 and 5 are positive, so power returns the result of 35, which is 243. T1: 2 and 4 are positive, so power returns the result of 24=, which is 16. T2: Both inputs (-1 and -2) are negative, so power throws an exception and n and p should be non-negative is printed. T3: One of the inputs (-1) is negative, so power throws an exception and n and p should be non-negative is printed. Solution12345678910111213141516171819202122232425262728293031/* * You can use the following pseudocode: * * `S` = read string from stdin. * try { * `N` = numeric value of `S`. * * If `N` is `NaN` or `undefined`, then some exception must be thrown, * you can write the following withtout using conditional statement: * &lt;condition to return true when `N` is `NaN` or `undefined`&gt; &amp;&amp; an_undefined_function_call() * * print `N` * } catch (err) { * print `Bad String`. * } *///Write your code herelet Calculator = function () { this.power = function (n, p) { try { if (n &gt;= 0 &amp;&amp; p &gt;= 0) { return n ** p; } else { throw 'n and p should be non-negative'; } } catch (error) { return error; } }}","link":"/2019/06/15/moreException/"},{"title":"Day 18: Queues and Stacks","text":"Welcome to Day 18! Today we’re learning about Stacks and Queues. Check out the Tutorial tab for learning materials and an instructional video! A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. Can you determine if a given string, s, is a palindrome? To solve this challenge, we must first take each character in s, enqueue it in a queue, and also push that same character onto a stack. Once that’s done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our containers are empty (a non-match means s isn’t a palindrome). Write the following declarations and implementations: Two instance variables: one for your stack, and one for your queue. A void pushCharacter(char ch) method that pushes a character onto a stack. A void enqueueCharacter(char ch) method that enqueues a character in the queue instance variable. A char popCharacter() method that pops and returns the character at the top of the stack instance variable. A char dequeueCharacter() method that dequeues and returns the first character in the queue instance variable. Input FormatYou do not need to read anything from stdin. The locked stub code in your editor reads a single line containing string s. It then calls the methods specified above to pass each character to your instance variables. Constraints s is composed of lowercase English letters. Output FormatYou are not responsible for printing any output to stdout.If your code is correctly written and s is a palindrome, the locked stub code will print The word, s, is not a palindrome; otherwise, it will print The word, s, is not a palindrome Sample Input1racecar Sample Output1The word, racecar, is a palindrome. Solution1234567891011function Solution(){ //Write your code here this.stack = []; this.queue = []; this.pushCharacter = (value) =&gt; this.stack.push(value); this.enqueueCharacter = (value) =&gt; this.queue.push(value); this.popCharacter = () =&gt; this.stack.pop(); this.dequeueCharacter = () =&gt; this.queue.shift();}","link":"/2019/06/15/queuesAndStack/"},{"title":"Day 22: Binary Search Trees","text":"ObjectiveToday, we’re working with Binary Search Trees (BSTs). Check out the Tutorial tab for learning materials and an instructional video! TaskThe height of a binary search tree is the number of edges between the tree’s root and its furthest leaf. You are given a pointer, root, pointing to the root of a binary search tree. Complete the getHeight function provided in your editor so that it returns the height of the binary search tree. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a binary search tree: The first line contains an integer, n, denoting the number of nodes in the tree. Each of the n subsequent lines contains an integer, data, denoting the value of an element that must be added to the BST. Output FormatThe locked stub code in your editor will print the integer returned by your getHeight function denoting the height of the BST. Sample Input1234567873521467 Sample Output13 ExplanationThe input forms the following BST: The longest root-to-leaf path is shown below: There are 4 nodes in this path that are connected by 3 edges, meaning our BST’s height = 3. Thus, we print 3 as our answer. Solution123if (root === null) return -1;return Math.max(this.getHeight(root.left), this.getHeight(root.right)) + 1;","link":"/2019/06/16/binarySearchTrees/"},{"title":"Day 21: Generics","text":"ObjectiveToday we’re discussing Generics; be aware that not all languages support this construct, so fewer languages are enabled for this challenge. Check out the Tutorial tab for learning materials and an instructional video! TaskWrite a single generic function named printArray; this function must take an array of generic elements as a parameter (the exception to this is C++, which takes a vector). The locked Solution class in your editor tests your function. Note: You must use generics to solve this challenge. Do not write overloaded functions. Input FormatThe locked Solution class in your editor will pass different types of arrays to your printArray function. Constraints You must have exactly function named printArray. 1 Output FormatYour printArray function should print each element of its generic array parameter on a new line. Solution1234567891011121314/**** What is the Generic?* That is being able to create a component that can work over a variety of types rather than a single one.* JavaScript is a dynamically typed language and it doesn't have any generics. So we can write a normal function or method.* Also, you can write in languages like TypeScript, Java, C#.* It's a creation code in C#***/static void PrintArray&lt;T&gt;(T[] array){ foreach(T i in array) Console.WriteLine(i);}","link":"/2019/06/16/generics/"},{"title":"Day 20: Sorting","text":"ObjectiveToday, we’re discussing a simple sorting algorithm called Bubble Sort. Check out the Tutorial tab for learning materials and an instructional video! Consider the following version of Bubble Sort: 1234567891011121314151617for (int i = 0; i &lt; n; i++) { // Track number of elements swapped during a single array traversal int numberOfSwaps = 0; for (int j = 0; j &lt; n - 1; j++) { // Swap adjacent elements if they are in decreasing order if (a[j] &gt; a[j + 1]) { swap(a[j], a[j + 1]); numberOfSwaps++; } } // If no elements were swapped during a traversal, array is sorted if (numberOfSwaps == 0) { break; }} TaskGiven an array, a, of size n distinct elements, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following 3 lines: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElement is the last element in the sorted array. Hint: To complete this challenge, you will need to add a variable that keeps a running tally of all swaps that occur during execution. Input FormatThe first line contains an integer, n, denoting the number of elements in array a. The second line contains n space-separated integers describing the respective values of a0, a1, …, an-1. Constraints 2 &lt;= n &lt;= 600 1 &lt;= ai &lt;= 2 X 106, where 0 &lt;= i &lt; n Output FormatPrint the following three lines of output: Array is sorted in numSwaps swaps.where numSwaps is the number of swaps that took place. First Element: firstElementwhere firstElement is the first element in the sorted array. Last Element: lastElementwhere lastElements is the last element in the sorted array. Sample Input 01231 2 3 Sample Output 0123Array is sorted in 0 swaps.First Element: 1Last Element: 3 Explanation 0The array is already sorted, so 0 swaps take place and we print the necessary 3 lines of output shown above. Sample Input 11233 2 1 Sample Output 1123Array is sorted in 3 swaps.First Element: 1Last Element: 3 Explanation 1The array a = [3, 2, 1] is not sorted, so we perform the following swaps: [3, 2, 1] -&gt; [2, 3, 1] [2, 3, 1] -&gt; [2, 1, 3] [2, 1, 3] -&gt; [1, 2, 3] At this point the array is sorted and we print the necessary 3 lines of output shown above. Solution123456789101112131415161718192021222324252627282930313233function main() { var n = parseInt(readLine()); a = readLine().split(' '); a = a.map(Number); // Write Your Code Here let numberOfSwaps = 0; const bubbleSort = (values) =&gt; { let swapped; do { swapped = false; for (let i = 0, { length } = values; i &lt; length; i++) { if (values[i] &gt; values[i + 1]) { let tmp = values[i]; values[i] = values[i + 1]; values[i + 1] = tmp; swapped = true; numberOfSwaps++; } } } while (swapped); return values; }; let result = bubbleSort(a); console.log(`Array is sorted in ${numberOfSwaps} swaps.\\nFirst Element: ${result[0]}\\nLast Element: ${result[n - 1]}`);}","link":"/2019/06/16/sorting/"},{"title":"Day 23: BST Level-Order Traversal","text":"ObjectiveToday, we’re going further with Binary Search Trees. Check out the Tutorial tab for learning materials and an instructional video! TaskA level-order traversal, also known as a breadth-first search, visits each level of a tree’s nodes from left to right, top to bottom. You are given a pointer, root, pointing to the root of a binary search tree. Complete the levelOrder function provided in your editor so that it prints the level-order traversal of the binary search tree. Hint: You’ll find a queue helpful in completing this challenge. Input FormatThe locked stub code in your editor reads the following inputs and assembles them into a BST:The first line contains an integer, T (the number of test cases).The T subsequent lines each contain an integer, data, denoting the value of an element that must be added to the BST. Output FormatPrint the data value of each node in the tree’s level-order traversal as a single line of N space-separated integers. Sample Input12345676354721 Sample Output13 2 5 1 4 7 ExplanationThe input forms the following binary search tree: We traverse each level of the tree from the root downward, and we process the nodes at each level from left to right. The resulting level-order traversal is 3 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 4 -&gt; 7, and we print these data values as a single line of space-separated integers. Solution123456789101112131415// Add your code here// To print values separated by spaces use process.stdout.write(someValue + ' ')const queue = [root];const result = [];while (queue.length) { let treeNode = queue.shift(); result.push(treeNode.data); treeNode.left &amp;&amp; queue.push(treeNode.left); treeNode.right &amp;&amp; queue.push(treeNode.right);}console.log(result.join(' '));","link":"/2019/06/17/BSTLevelOrderTraversal/"},{"title":"약수의 합","text":"문제 설명자연수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요. 제한 조건 n은 0 이상 3000이하인 자연수입니다. 입출력 예 n return 12 28 5 6 입출력 예 설명입출력 예 #112의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다. 입출력 예 #25의 약수는 1, 5입니다. 이를 모두 더하면 6입니다. Solution 123456789function solution(n) { return new Array(n).fill(1).reduce((target, item, index) =&gt; { let el = item + index; !(n % el) &amp;&amp; (target += el); return target; }, 0);}","link":"/2019/06/14/sumFactors/"},{"title":"이상한 문자 만들기","text":"문제 설명문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다.각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요. 제한 사항 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다. 첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다. 입출력 예 n return “try hello world” “TrY HeLlO WoRlD” 입출력 예 설명“try hello world”는 세 단어 “try”, “hello”, “world”로 구성되어 있습니다. 각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 “TrY”, “HeLlO”, “WoRlD”입니다.따라서 “TrY HeLlO WoRlD” 를 리턴합니다. Solution 123function solution(s) { return (s || '').toUpperCase().replace(/(\\w)(\\w)/g, (value) =&gt; value[0].toUpperCase() + value[1].toLowerCase());}","link":"/2019/06/15/createStrangeCharacters/"},{"title":"자릿수 더하기","text":"문제 설명자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다. 제한 사항 N의 범위 : 100,000,000 이하의 자연수 입출력 예 n answer 123 6 987 24 입출력 예 설명입출력 예 #1문제의 예시와 같습니다. 입출력 예 #29 + 8 + 7 = 24이므로 24를 return 하면 됩니다. Solution 1234567function solution(n){ return String(n).split('').reduce((target, item) =&gt; { target += +item; return target; }, 0);}","link":"/2019/06/16/addDigits/"},{"title":"자연수 뒤집어 배열로 만들기","text":"문제 설명자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다. 제한 조건 n은 10,000,000,000이하인 자연수입니다. 입출력 예 n return 12345 [5,4,3,2,1] Solution 123function solution(n) { return [...String(n)].reverse().map(item =&gt; +item);}","link":"/2019/06/17/flipNumbertoArray/"},{"title":"Day 25: Running Time and Complexity","text":"ObjectiveToday we’re learning about running time! Check out the Tutorial tab for learning materials and an instructional video! TaskA prime is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a number, n, determine and print whether it’s Prime or Not Prime. Note: If possible, try to come up with a primality algorithm, or see what sort of optimizations you come up with for an algorithm. Be sure to check out the Editorial after submitting your code! Input FormatThe first line contains an integer, T, the number of test cases.Each of the T subsequent lines contains an integer, n, to be tested for primality. Constraints 1 &lt;= T &lt;= 30 1 &lt;= n &lt;= 2 X 109 Output FormatFor each test case, print whether n is Prime or Not prime on a new line. Sample Input123431257 Sample Output123Not primePrimePrime ExplanationTest Case 0: n = 12. 12 is divisible by numbers other than 1 and itself (i.e.: 2, 3, 6), so we print Not prime on a new line. Test Case 1: n = 5. 5 is only divisible 1 and itself, so we print Prime on a new line. Test Case 2: n = 7. 7 is only divisible 1 and itself, so we print Prime on a new line. SolutionsSolution 11234567891011121314151617181920212223242526272829/** Consider to write code by using the Sieve of Eratosthenes, then you can make a optimization code **/function processData(input) { //Enter your code here let result = input.split('\\n').slice(1).map(isPrime); function isPrime(input, i) { let messages = ['Not prime', 'Prime']; if (input == 1) { return messages[0]; } if (input == 2) { return messages[1]; } if (input % 2 == 0) { return messages[0]; } for (i = 3; i &lt;= Math.sqrt(input); i += 2) { if (input % i == 0) { return messages[0]; } } return messages[1]; } console.log(result.join(\"\\n\"));} Solution 212345678910111213141516function processData(input) { //Enter your code here input.split('\\n').slice(1).map((n, i) =&gt; { console.log(isPrime(n) ? 'Prime' : 'Not prime'); }); function isPrime(n) { if (n == 1) return false; for (let i = 2; i * i &lt;= n; i++) { if (n % i == 0) return false; } return true; }}","link":"/2019/06/18/runningTimeAndComplexity/"},{"title":"문자열 내림차순으로 배치하기","text":"문제 설명문자열 s에 나타나는 문자를 큰것부터 작은 순으로 정렬해 새로운 문자열을 리턴하는 함수, solution을 완성해주세요.s는 영문 대소문자로만 구성되어 있으며, 대문자는 소문자보다 작은 것으로 간주합니다. 제한사항 str은 길이 1 이상인 문자열입니다. 입출력 예| s | return || — | — | — || “Zbcdefg” | “gfedcbZ” | Solution 123function solution(s) { return [...s].sort().reverse().join('');}","link":"/2019/06/07/descendingOrderStrings/"},{"title":"정수 제곱근 판별","text":"문제 설명임의의 정수 n에 대해, n이 어떤 정수 x의 제곱인지 아닌지 판단하려 합니다.n이 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요. 제한 사항 n은 1이상, 50000000000000 이하인 정수입니다. 입출력 예 n return 121 144 3 -1 입출력 예 설명입출력 예#1121은 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다. 입출력 예#23은 정수의 제곱이 아니므로, -1을 리턴합니다. Solution 123function solution(n) { return Number.isInteger(Math.sqrt(n)) ? (Math.sqrt(n) + 1) ** 2 : -1;}","link":"/2019/06/19/determineSquareRoot/"},{"title":"Day 24: More Linked Lists","text":"ObjectiveCheck out the Tutorial tab for learning materials and an instructional video! TaskA Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, pointing to another node (i.e.: the next node in a list). A removeDuplicates function is declared in your editor, which takes a pointer to the head node of a linked list as a parameter. Complete removeDuplicates so that it deletes any duplicate nodes from the list and returns the head of the updated list. Note: The head pointer may be null, indicating that the list is empty. Be sure to reset your next pointer when performing deletions to avoid breaking the list. Input FormatYou do not need to read any input from stdin. The following input is handled by the locked stub code and passed to the removeDuplicates function:The first line contains an integer, N, the number of nodes to be inserted.The N subsequent lines each contain an integer describing the data value of a node being inserted at the list’s tail. Constraints The data elements of the linked list argument will always be in non-decreasing order. Output FormatYour removeDuplicates function should return the head of the updated linked list. The locked stub code in your editor will print the returned list to stdout. Sample Input12345676122334 Sample Output11 2 3 4 ExplanationN = 6, and our non-decreasing list is {1, 2, 2, 3, 3, 4}. The values 2 and 3 both occur twice in the list, so we remove the two duplicate nodes. We then return our updated (ascending) list, which is {1, 2, 3, 4}. Solution1234567891011121314this.removeDuplicates=function(head){ //Write your code here let prev = head; while (prev) { let next = prev.next; (next &amp;&amp; prev.data == next.data) ? (prev.next = next.next) : (prev = prev.next); } return head;}","link":"/2019/06/17/moreLinkedLists/"},{"title":"Day 26: Nested Logic","text":"ObjectiveToday’s challenge puts your understanding of nested conditional statements to the test. You already have the knowledge to complete this challenge, but check out the Tutorial tab for a video on testing! TaskYour local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows: If the book is returned on or before the expected return date, no fine will be charged (i.e.: fine = 0). If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, fine = 15 Hackos x (the number of days late). If the book is returned after the expected return month but still within the same calendar year as the expected return date, the fine = 500 Hackos x (the number of months late). If the book is returned after the calendar year in which it was expected, there is a fixed fine of 10000 Hackos. Input FormatThe first line contains 3 space-separated integers denoting the respective day, month, and year on which the book was actually returned.The second line contains 3 space-separated integers denoting the respective day, month, and year on which the book was expected to be returned (due date). Constraints 1 &lt;= D &lt;= 31 1 &lt;= M &lt;= 12 1 &lt;= Y &lt;= 3000 It is guanranteed that the dates will be valid Gregorian calendar dates. Output FormatPrint a single integer denoting the library fine for the book received as input. Sample Input129 6 20156 6 2015 Sample Output145 ExplanationGiven the following return dates: Actual: Da = 9, Ma = 6, Ya = 2015Expected: De = 6, Me = 6, Ye = 2015 Because Ye = Ya, we know it is less than a year late. Because Me = Ma, we know it’s less than a month late. Because De = Da, we know that it was returned late (but still within the same month and year). Per the library’s fee structure, we know that our fine will be 15 Hackos X (# days late). We then print the result of 15 X (Da - De) = 15 X (9 - 6) = 45 as our output. Solution123456789101112131415161718192021222324function processData(input) { //Enter your code here let fine = 0; const [actual, expected] = input.split('\\n').map(item =&gt; { const [day, month, year] = item.split(' ').map(Number); return { day, month, year }; }); ( actual.year === expected.year &amp;&amp; actual.month === expected.month &amp;&amp; actual.day &gt; expected.day ) &amp;&amp; (fine = (actual.day - expected.day) * 15); ( actual.year === expected.year &amp;&amp; actual.month &gt; expected.month ) &amp;&amp; (fine = (actual.month - expected.month) * 500); (actual.year &gt; expected.year) &amp;&amp; (fine = 10000); console.log(fine);}","link":"/2019/06/19/nestedLogic/"},{"title":"최대공약수와 최소공배수","text":"문제 설명두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다. 제한 조건 두 수는 1이상 1000000이하의 자연수입니다. 입출력 예 n m return 3 12 [3, 12] 2 5 [1, 10] 입출력 예 설명입출력 예 #1위의 설명과 같습니다. 입출력 예 #2자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다. Solution 123456function solution(n, m) { const theGreatest = (n, m) =&gt; m ? theGreatest(m, n % m) : Math.abs(n); const theLeast = (n, m) =&gt; (n * m) / theGreatest(n, m); return [ theGreatest(n, m), theLeast(n, m) ]}","link":"/2019/06/22/theGreatestAndTheLeast/"},{"title":"콜라츠 추측","text":"문제 설명1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다. 1231-1. 입력된 수가 짝수라면 2로 나눕니다. 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요. 제한 사항 입력된 수, num은 1 이상 8000000 미만인 정수입니다. 입출력 예 n return 6 8 16 4 626331 -1 입출력 예 설명입출력 예 #1문제의 설명과 같습니다. 입출력 예 #216 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 이되어 총 4번만에 1이 됩니다. 입출력 예 #3626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다. Solution 12345678function solution(num, count = 0) { return count &gt;= 500 ? -1 : num === 1 ? count : solution(num % 2 ? num * 3 + 1 : num / 2, count + 1);}","link":"/2019/06/23/collatzConjecture/"},{"title":"정수 내림차순으로 배치하기","text":"문제 설명함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 예를들어 n이 118372면 873211을 리턴하면 됩니다. 제한 조건 n은 1이상 8000000000 이하인 자연수입니다. 입출력 예 n return 118372 873211 Solution 123function solution(n) { return +[...String(n)].sort((a,b) =&gt; b-a).join('')}","link":"/2019/06/18/integerDescendingOrder/"},{"title":"제일 작은 수 제거하기","text":"문제 설명정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수, solution을 완성해주세요. 단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요. 예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다. 제한 조건 arr은 길이 1 이상인 배열입니다. 인덱스 i, j에 대해 i ≠ j이면 arr[i] ≠ arr[j] 입니다. 입출력 예 arr return [4,3,2,1] [4,3,2] [10] [-1] Solution 12345function solution(arr) { arr.splice(arr.indexOf(Math.min(...arr)), 1); return arr.length &lt;= 1 ? [-1] : arr;}","link":"/2019/06/20/removeThesmallestNumber/"},{"title":"Solve Me First","text":"Complete the function solveMeFirst to compute the sum of two integers. Function prototype:int solveMeFirst(int a, int b); where, a is the first integer input. b is the second integer input Return values sum of the above two integers Sample Input12a = 2b = 3 Sample Output15 ExplanationThe sum of the two integers a and b is computed as: 2 + 3 = 5. Solution1234function solveMeFirst(a, b) { // Hint: Type return a+b below return a + b;}","link":"/2019/06/24/solveMeFirst/"},{"title":"Simple Array Sum","text":"Given an array of integers, find the sum of its elements. For example, if the array ar = [1, 2, 3], 1 + 2 + 3 = 6, so return 6. Function DescriptionComplete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer. simpleArraySum has the following parameter(s): ar: an array of integers Input FormatThe first line contains an integer, n, denoting the size of the array. The second line contains n space-separated integers representing the array’s elements. Constraints0 &lt; n,ar[i] &lt;= 1000 Output FormatPrint the sum of the array’s elements as a single integer. Sample Input1261 2 3 4 10 11 Sample Output131 ExplanationWe print the sum of the array’s elements: 1 + 2 + 3 + 4 + 10 + 11 = 31. Solution1234567891011/* * Complete the simpleArraySum function below. */function simpleArraySum(ar) { /* * Write your code here. */ return (ar || []).reduce((target, item) =&gt; { return target + item; }, 0)}","link":"/2019/06/25/simpleArraySum/"},{"title":"Compare the Triplets","text":"Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty. We define the rating for Alice’s challenge to be the triplet a = (a[0], a[1], a[2]), and the rating for Bob’s challenge to be the triplet b = (b[0], b[1], b[2]). Your task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2]. If , then Alice is awarded point.If , then Bob is awarded point.If , then neither person receives a point.Comparison points is the total points a person earned. Given a and b, determine their respective comparison points. For example, a = [1, 2, 3] and b = [3, 2, 1]. For elements 0, Bob is awarded a point because a[0] &lt; b[0]. For the equal elements a[1] and b[1], no points are earned. Finally, for elements 2, a[2] &gt; b[2] so Alice receives a point. Your return array would be [1, 1] with Alice’s score first and Bob’s second. Function DescriptionComplete the function compareTriplets in the editor below. It must return an array of two integers, the first being Alice’s score and the second being Bob’s. compareTriplets has the following parameter(s): a: an array of integers representing Alice’s challenge rating b: an array of integers representing Bob’s challenge rating Input FormatThe first line contains 3 space-separated integers, a[0], a[1], and a[2], describing the respective values in triplet a.The second line contains 3 space-separated integers, b[0], b[1], and b[2], describing the respective values in triplet b. Constraints 1 &lt; a[i] &lt;= 100 1 &lt; b[i] &lt;= 100 Output FormatReturn an array of two integers denoting the respective comparison points earned by Alice and Bob. Sample Input 0125 6 73 6 10 Sample Output 011 1 Explanation 0In this example: a = (a[0], a[1], a[2]) = (5, 6, 7) b = (b[0], b[1], b[2]) = (3, 6, 10) Now, let’s compare each individual score: a[0] &gt; b[0], so Alice receives 1 point. a[1] = b[1], so nobody receives a point. a[2] &gt; b[2], so Bob receives 1 point. Alice’s comparison score is 1, and Bob’s comparison score is 1. Thus, we return the array [1, 1]. Sample Input 11217 28 3099 16 8 Sample Output 112 1 Explanation 1Comparing the 0th elements, 17 &lt; 99 so Bob receives a point.Comparing the 1st and 2nd elements, 28 &gt; 16 and 30 &gt; 8 so Alice receives two points.The return array is [2, 1]. Solution12345678// Complete the compareTriplets function below.function compareTriplets(a, b) { return (a || []).reduce((target, item, index) =&gt; { (item !== b[index]) &amp;&amp; target[item &gt; b[index] ? 0 : 1]++; return target; }, [0, 0]);}","link":"/2019/06/26/comparetheTriplets/"},{"title":"행렬의 덧셈","text":"문제 설명행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요. 제한 조건 행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다. 입출력 예 arr1 arr2 return [[1,2],[2,3]] [[3,4],[5,6]] [[4,6],[7,9]] [[1],[2]] [[3],[4]] [[4],[6]] Solution 123function solution(arr1, arr2) { return arr1.map((arr, columnIndex) =&gt; arr.map((item, index) =&gt; item + arr2[columnIndex][index]));}","link":"/2019/06/27/additionMatrix/"},{"title":"A Very Big Sum","text":"Calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large. Function DescriptionComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements. aVeryBigSum has the following parameter(s): ar: an array of integers . Input FormatThe first line of the input consists of an integer n.The next line contains n space-separated integers contained in the array. Output FormatPrint the integer sum of the elements in the array. Constraints1 &lt;= n &lt;= 100 &lt; ar[i] &lt;= 1010 Sample Input1251000000001 1000000002 1000000003 1000000004 1000000005 Sample Output15000000015 Note:The range of the 32-bit integer is (-231) to (231 - 1) or [-2147483648, 2147483647].When we add several integer values, the resulting sum might exceed the above range. You might need to use long long int in C/C++ or long data type in Java to store such sums. Solution123456// Complete the aVeryBigSum function below.function aVeryBigSum(ar) { return ar.reduce((target, item) =&gt; { return target + item; }, 0);}","link":"/2019/06/28/aVeryBigSum/"},{"title":"핸드폰 번호 가리기","text":"문제 설명프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요. 제한 조건 s는 길이 4 이상, 20이하인 문자열입니다. 입출력 예 phone_number return “01033334444” “***4444” “027778888” “*****8888” Solution 123function solution(phone_number) { return (phone_number || '').replace(/\\d(?=\\d{4})/g, '*');}","link":"/2019/06/26/hidePhoneNumber/"},{"title":"x만큼 간격이 있는 n개의 숫자","text":"문제 설명함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요. 제한 조건 x는 -10000000 이상, 10000000 이하인 정수입니다. n은 1000 이하인 자연수입니다. 입출력 예 x n answer 2 5 [2,4,6,8,10] -4 2 [-4, -8] Solution 123function solution(x, n) { return Array(n).fill(x).map((item, index) =&gt; (index + 1) * item);}","link":"/2019/06/28/spaceXwithN/"},{"title":"Diagonal Difference","text":"Given a square matrix, calculate the absolute difference between the sums of its diagonals. For example, the square matrix arr is shown below: 1231 2 34 5 69 8 9 The left-to-right diagonal = 1 + 5 + 9 = 15. The right to left diagonal = 3 + 5 + 9 = 17. Their absolute difference is |15 - 17| = 2. Function DescriptionComplete the diagonalDifference function in the editor below. It must return an integer representing the absolute diagonal difference. diagonalDifference takes the following parameter: arr: an array of integers . Input FormatThe first line contains a single integer, n, the number of rows and columns in the matrix arr. Each of the next n lines describes a row, arr[i], and consists of n space-separated integers arr[i][j]. Constraints-100 &lt;= arr[i][j] &lt;= 100 Output FormatPrint the absolute difference between the sums of the matrix’s two diagonals as a single integer. Sample Input1234311 2 44 5 610 8 -12 Sample Output115 ExplanationThe primary diagonal is: 12311 5 -12 Sum across the primary diagonal: 11 + 5 - 12 = 4 The secondary diagonal is: 123 4 510 Sum across the secondary diagonal: 4 + 5 + 10 = 19Difference: |4 - 19| = 15 Note: |x| is the absolute value of x Solution123456789101112131415161718/* * Complete the 'diagonalDifference' function below. * * The function is expected to return an INTEGER. * The function accepts 2D_INTEGER_ARRAY arr as parameter. */function diagonalDifference(arr) { // Write your code here let { first, second } = (arr || []).reduce((target, item, index) =&gt; { target['first'] += arr[index][index]; target['second'] += arr[index][arr.length - index - 1]; return target; }, { first: 0, second: 0 }); return Math.abs(first - second);}","link":"/2019/06/29/diagonalDifference/"},{"title":"평균 구하기","text":"문제 설명정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요. 제한 사항 arr은 길이 1 이상, 100 이하인 배열입니다. arr의 원소는 -10,000 이상 10,000 이하인 정수입니다. 입출력 예 arr return [1,2,3,4] 2.5 [5,5] 5 Solution 123function solution(arr) { return arr.reduce((target, item) =&gt; { return target + item; }, 0) / arr.length;}","link":"/2019/06/24/average/"},{"title":"직사각형 별찍기","text":"문제 설명이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요. 제한 조건 n과 m은 각각 1000 이하인 자연수입니다. 예시입력15 3 출력123*************** Solution 12345678910111213process.stdin.setEncoding('utf8');process.stdin.on('data', data =&gt; { const n = data.split(\" \"); const a = Number(n[0]), b = Number(n[1]); let result = Array(b).fill('').reduce((target, item) =&gt; { target.push('*'.repeat(a)); return target; }, []).join('\\n'); console.log(result);});","link":"/2019/06/29/rectangleStars/"},{"title":"짝수와 홀수","text":"문제 설명정수 num이 짝수일 경우 “Even”을 반환하고 홀수인 경우 “Odd”를 반환하는 함수, solution을 완성해주세요. 제한 조건 num은 int 범위의 정수입니다. 0은 짝수입니다. 입출력 예 arr return 3 Odd 4 Even Solution 123function solution(num) { return num % 2 ? 'Odd' : 'Even';}","link":"/2019/06/21/evenAndOdd/"},{"title":"예산","text":"문제 설명S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다. 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다. 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요. 제한사항 d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다. d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다. budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다. 입출력 예 d budget result [1,3,2,5,4] 9 3 [2,2,3,3] 10 4 입출력 예 설명입출력 예 #1각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다. 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다. 1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다. 1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다. 1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다. 3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다. 입출력 예 #2모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다. Solution 123456789101112function solution(d, budget) { let { result } = (d || []).sort((a, b) =&gt; a - b) .reduce((target, item, index) =&gt; { target['value'] += item; target['value'] &lt;= budget &amp;&amp; (target['result'] = index + 1); return target; }, { value: 0, result: 0 }); return result;}","link":"/2019/06/30/budget/"},{"title":"Plus Minus","text":"Given an array of integers, calculate the fractions of its elements that are positive, negative, and are zeros. Print the decimal value of each fraction on a new line. Note: This challenge introduces precision problems. The test cases are scaled to six decimal places, though answers with absolute error of up to 10-4 are acceptable. For example, given the array arr = [1, 1, 0, -1, -1] there are 5 elements, two positive, two negative and one zero. Their ratios would be . It should be printed as 1230.4000000.4000000.200000 Function DescriptionComplete the plusMinus function in the editor below. It should print out the ratio of positive, negative and zero items in the array, each on a separate line rounded to six decimals. plusMinus has the following parameter(s): arr: an array of integers Input FormatThe first line contains an integer, n, denoting the size of the array.The second line contains n space-separated integers describing an array of numbers .arr(arr[0], arr[1], arr[2],…arr[n - 1]) Constraints0 &lt; n &lt;= 100-100 &lt;= arr[i] &lt;= 100 Output FormatYou must print the following 3 lines: A decimal representing of the fraction of positive numbers in the array compared to its size. A decimal representing of the fraction of negative numbers in the array compared to its size. A decimal representing of the fraction of zeros in the array compared to its size. Sample Input126-4 3 -9 0 4 1 Sample Output1230.5000000.3333330.166667 ExplanationThere are 3 positive numbers, 2 negative numbers, and 1 zero in the array. The proportions of occurrence are positive: , negative: and zeros: . Solution1234567891011121314151617// Complete the plusMinus function below.function plusMinus(arr) { let totalCount = (arr || []).length; let { posNum, negNum, zeroNum } = (arr || []).reduce((target, item) =&gt; { !item ? target['zeroNum']++ : (item &gt; 0 ? target['posNum']++ : target['negNum']++ ); return target; }, { zeroNum: 0, posNum: 0, negNum: 0 }); console.log(`${posNum / totalCount}\\n${negNum / totalCount}\\n${zeroNum / totalCount}`);}","link":"/2019/06/30/plusMinus/"},{"title":"프린터","text":"문제 설명일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다.그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다.이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다.이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다. 그렇지 않으면 J를 인쇄합니다.예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다. 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다. 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요. 제한사항현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다. 입출력 예| priorities | location | return |hex| :—: | :—: | :—: || [2, 1, 3, 2] | 2 | 1 || [1, 1, 9, 1, 1, 1] | 0 | 5 | 입출력 예 설명 예제 #1 문제에 나온 예와 같습니다. 예제 #2 6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다. Solution12345678910111213function solution(priorities, location) { let array = priorities; let result = location; let count = 0; while(result &gt;= 0) { Math.max(...array) === array[0] ? (array.shift(), count++, result--) : (array.push(array.shift()), result = result &gt; 0 ? result - 1 : result + array.length - 1 ) } return count;}","link":"/2019/07/01/printer/"},{"title":"Staircase","text":"Consider a staircase of size n = 4: 1234 # ## ####### Observe that its base and height are both equal to n, and the image is drawn using # symbols and spaces. The last line is not preceded by any spaces. Write a program that prints a staircase of size n. Function DescriptionComplete the staircase function in the editor below. It should print a staircase as described above. staircase has the following parameter(s): n: an integer Input FormatA single integer, n, denoting the size of the staircase. Constraints0 &lt; n &lt;= 100 Output FormatPrint a staircase of size n using # symbols and spaces. Note: The last line must have 0 spaces in it. Sample Input16 Sample Output123456 # ## ### #### ########### ExplanationThe staircase is right-aligned, composed of # symbols and spaces, and has a height and width of n = 6. Solution1234567891011// Complete the staircase function below.function staircase(n) { new Array(n).fill('#'.repeat(n)).reduce((target, item, index) =&gt; { item = item.replace(/\\#/g, (value, itemIndex) =&gt; (itemIndex &lt; n - index - 1) ? ' ' : value); console.log(item); return target; }, []);}","link":"/2019/07/01/staircase/"},{"title":"Birthday Cake Candles","text":"You are in charge of the cake for your niece’s birthday and have decided the cake will have one candle for each year of her total age. When she blows out the candles, she’ll only be able to blow out the tallest ones. Your task is to find out how many candles she can successfully blow out. For example, if your niece is turning 4 years old, and the cake will have 4 candles of height 4, 4, 1, 3, she will be able to blow out 2 candles successfully, since the tallest candles are of height 4 and there are 2 such candles. Function DescriptionComplete the function birthdayCakeCandles in the editor below. It must return an integer representing the number of candles she can blow out. birthdayCakeCandles has the following parameter(s): ar: an array of integers representing candle heights Input FormatThe first line contains a single integer, n, denoting the number of candles on the cake.The second line contains n space-separated integers, where each integer i describes the height of candle i. Constraints 0 &lt;= n &lt;= 105 0 &lt;= ar[i] &lt;= 107 Output FormatPrint the number of candles that can be blown out on a new line. Sample Input 01243 2 1 3 Sample Output12 ExplanationWe have one candle of height 1, one candle of height 2, and two candles of height 3. Your niece only blows out the tallest candles, meaning the candles where height = 3. Because there are 2 such candles, we print 2 on a new line. Solution12345678910// Complete the birthdayCakeCandles function below.function birthdayCakeCandles(ar) { let max = Math.max(...ar); return (ar || []).reduce((target, item) =&gt; { (max == item) &amp;&amp; target++; return target; }, 0);}","link":"/2019/07/02/birthdayCandles/"},{"title":"쇠막대기","text":"문제 설명여러 개의 쇠막대기를 레이저로 절단하려고 합니다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다. 쇠막대기와 레이저의 배치는 다음 조건을 만족합니다. 1234- 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있습니다.- 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓습니다.- 각 쇠막대기를 자르는 레이저는 적어도 하나 존재합니다.- 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않습니다. 아래 그림은 위 조건을 만족하는 예를 보여줍니다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향입니다. 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있습니다. 12(a) 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 &apos;()&apos;으로 표현합니다. 또한 모든 &apos;()&apos;는 반드시 레이저를 표현합니다.(b) 쇠막대기의 왼쪽 끝은 여는 괄호 &apos;(&apos;로, 오른쪽 끝은 닫힌 괄호 &apos;)&apos;로 표현됩니다. 위 예의 괄호 표현은 그림 위에 주어져 있습니다.쇠막대기는 레이저에 의해 몇 개의 조각으로 잘리는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘리고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘립니다. 쇠막대기와 레이저의 배치를 표현한 문자열 arrangement가 매개변수로 주어질 때, 잘린 쇠막대기 조각의 총 개수를 return 하도록 solution 함수를 작성해주세요. 제한사항 arrangement의 길이는 최대 100,000입니다. arrangement의 여는 괄호와 닫는 괄호는 항상 쌍을 이룹니다. 입출력 예 arrangement return ()(((()())(())()))(()) 17 입출력 예 설명문제에 나온 예와 같습니다. Solution123456789101112131415161718192021function solution(arrangement) { let results = []; return [...(arrangement || '').replace(/\\(\\)/g, 0)] .reduce((target, item) =&gt; { switch (item) { case '(': results.push(0); break; case '0': results = results.map(value =&gt; value + 1); break; case ')': target += results[results.length - 1] + 1; results.pop(); break; } return target; }, 0);}","link":"/2019/07/02/ironRod/"},{"title":"Time Conversion","text":"Given a time in 12-hour AM/PM format, convert it to military (24-hour) time. Note: Midnight is 12:00:00AM on a 12-hour clock, and 00:00:00 on a 24-hour clock. Noon is 12:00:00PM on a 12-hour clock, and 12:00:00 on a 24-hour clock. Function DescriptionComplete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format. timeConversion has the following parameter(s): s: a string representing time in 12 hour format Input FormatA single string s containing a time in 12-hour clock format (i.e.: hh:mm:ssAM or hh:mm:ssPM), where 01 &lt;= hh &lt;= 12 and 00 &lt;= mm,ss &lt;= 59. Constraints All input times are valid Output FormatConvert and print the given time in 24-hour format, where 0 &lt;= hh &lt;= 23. Sample Input 0107:05:45PM Sample Output 0119:05:45 Solution12345678910111213141516171819202122/* * Complete the timeConversion function below. */function timeConversion(s) { /* * Write your code here. */ return (s || '').split(':').reduce((target, item, index) =&gt; { item = !index ? ((s || '').includes('PM') ? (+item &lt; 12 ? `${+item + 12}` : item) : (+item &lt; 12 ? item : '00') ) : item.replace(/PM|AM/gi, ''); target.push(item); return target; }, []).join(':');}","link":"/2019/07/03/timeConversion/"},{"title":"탑","text":"문제 설명수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다. 예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다. 송신 탑(높이) 수신 탑(높이) 5(4) 4(7) 4(4) 2(9) 3(4) 2(9) 2(4) - 1(4) - 맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요. 제한 사항 heights는 길이 2 이상 100 이하인 정수 배열입니다. 모든 탑의 높이는 1 이상 100 이하입니다. 신호를 수신하는 탑이 없으면 0으로 표시합니다. 입출력 예 heights return [6,9,5,7,4] [0,0,2,2,4] [3,9,9,3,5,7,2] [0,0,0,3,3,3,6] [1,5,3,6,7,6,5] [0,0,2,0,0,5,6] 입출력 예 설명입출력 예 #1앞서 설명한 예와 같습니다. 입출력 예 #2 [1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.[4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다. 입출력 예 #3 [1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.[3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.[6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다. Solution 123456789101112131415function solution(heights) { let values = (heights || []).map(Number); return (heights || []).reduceRight((target, height) =&gt; { values.pop(); target.push(values.reduceRight((target, item, index) =&gt; { item &gt; height &amp;&amp; target.push(index + 1); return target; }, [])[0] || 0); return target; }, []).reverse();}","link":"/2019/07/03/transmissionTower/"},{"title":"하샤드 수","text":"문제 설명양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다. 예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다. 자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요. 제한 조건 x는 1 이상, 10000 이하인 정수입니다. 입출력 예 arr return 10 true 12 true 12 false 13 false 입출력 예 설명입출력 예 #110의 모든 자릿수의 합은 1입니다. 10은 1로 나누어 떨어지므로 10은 하샤드 수입니다. 입출력 예 #212의 모든 자릿수의 합은 3입니다. 12는 3으로 나누어 떨어지므로 12는 하샤드 수입니다. 입출력 예 #311의 모든 자릿수의 합은 2입니다. 11은 2로 나누어 떨어지지 않으므로 11는 하샤드 수가 아닙니다. 입출력 예 #413의 모든 자릿수의 합은 4입니다. 13은 4로 나누어 떨어지지 않으므로 13은 하샤드 수가 아닙니다. Solution 123function solution(x) { return !(x % [...String(x)].reduce((target, item) =&gt; { return +target + +item}, 0))}","link":"/2019/06/25/allHarshadNumber/"},{"title":"Grading Students","text":"HackerLand University has the following grading policy: Every student receives a grade in the inclusive range from 0 to 100. Any grade less than 40 is a failing grade. Sam is a professor at the university and likes to round each student’s grade according to these rules: If the difference between the grade and the next multiple of 5 is less than 3, round grade up to the next multiple of 5. If the value of grade is less than 38, no rounding occurs as the result will still be a failing grade. For example, grade = 84 will be rounded to 85 but grade = 29 will not be rounded because the rounding would result in a number that is less than 40. Given the initial value of grade for each of Sam’s n students, write code to automate the rounding process. Function DescriptionComplete the function gradingStudents in the editor below. It should return an integer array consisting of rounded grades. gradingStudents has the following parameter(s): grades: an array of integers representing grades before rounding Input FormatThe first line contains a single integer, n, the number of students.Each line i of the n subsequent lines contains a single integer, grades[i], denoting student i‘s grade. Constraints 1 &lt;= n &lt;= 60 0 &lt;= grades[i] &lt;= 100 Output FormatFor each grades[i], print the rounded grade on a new line. Sample Input 012345473673833 Sample Output 0123475674033 Explanation 0 Student 1 received a 73, and the next multiple of 5 from 73 is 75. Since 75 - 73 &lt; 3, the student’s grade is rounded to 75. Student 2 received a 67, and the next multiple of 5 from 67 is 70. Since 70 - 67 = 3, the grade will not be modified and the student’s final grade is . Student 3 received a 38, and the next multiple of 5 from 38 is 40. Since 40 - 38 &lt; 3, the student’s grade will be rounded to 40. Student 4 received a grade below 38, so the grade will not be modified and the student’s final grade is 33. Solution1234567891011121314151617/* * Complete the 'gradingStudents' function below. * * The function is expected to return an INTEGER_ARRAY. * The function accepts INTEGER_ARRAY grades as parameter. */function gradingStudents(grades) { // Write your code here return (grades || []).reduce((target, grade) =&gt; { let finalGrade = Math.ceil(grade / 5) * 5; target.push((finalGrade - grade &gt;= 3 || grade &lt; 38 ) ? grade : finalGrade); return target; }, []);}","link":"/2019/07/04/gradingStudents/"},{"title":"Apple and Orange","text":"Sam’s house has an apple tree and an orange tree that yield an abundance of fruit. In the diagram below, the red region denotes his house, where s is the start point, and t is the endpoint. The apple tree is to the left of his house, and the orange tree is to its right. You can assume the trees are located on a single point, where the apple tree is at point a, and the orange tree is at point b. When a fruit falls from its tree, it lands d units of distance from its tree of origin along the x-axis. A negative value of d means the fruit fell d units to the tree’s left, and a positive value of d means it falls d units to the tree’s right. Given the value of d for m apples and n oranges, determine how many apples and oranges will fall on Sam’s house (i.e., in the inclusive range [s, t])? For example, Sam’s house is between s = 7 and t = 10. The apple tree is located at a = 4 and the orange at b = 12. There are m = 3 apples and n = 3 oranges. Apples are thrown apples = [2, 3, -4] units distance from a, and oranges = [3, -2, -4] units distance. Adding each apple distance to the position of the tree, they land at [4 + 2, 4 + 3, 4 + -4] = [6, 7, 0]. Oranges land at [12 + 3, 12 + - 2, 12 + - 4] = [15, 10, 8]. One apple and two oranges land in the inclusive range 7 - 10 so we print 1212 Function DescriptionComplete the countApplesAndOranges function in the editor below. It should print the number of apples and oranges that land on Sam’s house, each on a separate line. countApplesAndOranges has the following parameter(s): s: integer, starting point of Sam’s house location. t: integer, ending location of Sam’s house location. a: integer, location of the Apple tree. b: integer, location of the Orange tree. apples: integer array, distances at which each apple falls from the tree. oranges: integer array, distances at which each orange falls from the tree. Input FormatThe first line contains two space-separated integers denoting the respective values of s and t.The second line contains two space-separated integers denoting the respective values of a and b.The third line contains two space-separated integers denoting the respective values of m and n. The fourth line contains m space-separated integers denoting the respective distances that each apple falls from point a.The fifth line contains n space-separated integers denoting the respective distances that each orange falls from point b. Constraints 1 &lt;= s, t, a, b, m, n &lt;= 105 -105 &lt;= d &lt;= 105 a &lt; s &lt; t &lt; b Output FormatPrint two integers on two different lines: The first integer: the number of apples that fall on Sam’s house. The second integer: the number of oranges that fall on Sam’s house. Sample Input 0123457 115 153 2-2 2 15 -6 Sample Output 01211 Explanation 0The first apple falls at position 5 - 2 = 3. The second apple falls at position 5 + 2 = 7. The third apple falls at position 5 + 1 = 6. The first orange falls at position 15 + 5 = 20. The second orange falls at position 15 - 6 = 9. Only one fruit (the second apple) falls within the region between 7 and 11, so we print 1 as our first line of output.Only the second orange falls within the region between 7 and 11, so we print 1 as our second line of output. Solution123456// Complete the countApplesAndOranges function below.function countApplesAndOranges(s, t, a, b, apples, oranges) { console.log((apples || []).reduce((target, apple) =&gt; { return target + (s - a &lt;= apple &amp;&amp; apple &lt;= t - a); }, 0)); console.log((oranges || []).reduce((target, orange) =&gt; { return target + (s - b &lt;= orange &amp;&amp; orange &lt;= t - b); }, 0));}","link":"/2019/07/05/appleAndOrange/"},{"title":"기능개발","text":"문제 설명프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다. 또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다. 먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요. 제한 사항 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다. 작업 진도는 100 미만의 자연수입니다. 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다. 입출력 예 progresses speeds return [93,30,55] [1,30,5] [2,1] 입출력 예 설명첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다. 따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다. More TestCases progresses speeds return [40, 93, 30, 55, 60, 65] [60, 1, 30, 5 , 10, 7] [1,2,3] | [93, 30, 55, 60, 40, 65] | [1, 30, 5 , 10, 60, 7] | [2,4] | Solution 123456789101112131415function solution(progresses, speeds) { let values = (progresses || []).map((progress, index) =&gt; Math.ceil((100 - progress) / speeds[index])); let results = []; let front = 0; values.reduce((target, value, index) =&gt; { (values[front] &lt; values[index]) &amp;&amp; (results.push(index - front), front = index); return target; }, []); results.push(values.length - front); return results;}","link":"/2019/07/06/functionDevelopment/"},{"title":"Mini-Max Sum","text":"Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers. For example, arr = [1, 3, 5, 7, 9]. Our minimum sum is 1 + 3 + 5 + 7 = 16 and our maximum sum is 3 + 5 + 7 + 9 = 24. We would print 116 24 Function DescriptionComplete the miniMaxSum function in the editor below. It should print two space-separated integers on one line: the minimum sum and the maximum sum of 4 of 5 elements. miniMaxSum has the following parameter(s): arr: an array of 5 integers Input FormatA single line of five space-separated integers. Constraints 1 &lt; arr[i] &lt; 109 Output FormatPrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly four of the five integers. (The output can be greater than a 32 bit integer.) Sample Input11 2 3 4 5 Sample Output110 14 ExplanationOur initial numbers are 1, 2, 3, 4, and 5. We can calculate the following sums using four of the five integers: If we sum everything except 1, our sum is 2 + 3 + 4 + 5 = 14. If we sum everything except 2, our sum is 1 + 3 + 4 + 5 = 13. If we sum everything except 3, our sum is 1 + 2 + 4 + 5 = 12. If we sum everything except 4, our sum is 1 + 2 + 3 + 5 = 11. If we sum everything except 5, our sum is 1 + 2 + 3 + 4 = 10. Hints: Beware of integer overflow! Use 64-bit Integer. Need help to get started? Try the Solve Me First problem Solution12345678910111213// Complete the miniMaxSum function below.function miniMaxSum(arr) { const sum = (values) =&gt; (values || []).reduce((target, value) =&gt; { return target + value; }, 0); arr.sort(); let minSum = sum(arr.slice(0, -1)) let maxSum = sum(arr.slice(1)); console.log(minSum, maxSum);}","link":"/2019/07/06/mini-maxSum/"},{"title":"Kangaroo","text":"You are choreographing a circus show with various animals. For one act, you are given two kangaroos on a number line ready to jump in the positive direction (i.e, toward positive infinity). The first kangaroo starts at location x1 and moves at a rate of v1 meters per jump. The second kangaroo starts at location x2 and moves at a rate of v2 meters per jump. You have to figure out a way to get both kangaroos at the same location at the same time as part of the show. If it is possible, return YES, otherwise return NO. For example, kangaroo 1 starts at x1 = 2 with a jump distance v1 = 1 and kangaroo 2 starts at x2 = 1 with a jump distance of v2 = 2. After one jump, they are both at x = 3, (x1 + v1 = 2 + 1, x2 + v2 = 1 + 2), so our answer is YES. Function DescriptionComplete the function kangaroo in the editor below. It should return YES if they reach the same position at the same time, or NO if they don’t. kangaroo has the following parameter(s): x1, v1: integers, starting position and jump distance for kangaroo 1 x2, v2: integers, starting position and jump distance for kangaroo 2 Input FormatA single line of four space-separated integers denoting the respective values of x1, v1, x2, and v2. Constraints 0 &lt;= x1 &lt;= x2 &lt;= 10000 0 &lt;= v1 &lt;= 10000 0 &lt;= v2 &lt;= 10000 Output FormatPrint YES if they can land on the same location at the same time; otherwise, print NO. Note: The two kangaroos must land at the same location after making the same number of jumps. Sample Input 010 3 4 2 Sample Output 01YES Explanation 0The two kangaroos jump through the following sequence of locations: From the image, it is clear that the kangaroos meet at the same location (number 12 on the number line) after same number of jumps (4 jumps), and we print YES. Sample Input 110 2 5 3 Sample Output 11NO Explanation 1The second kangaroo has a starting location that is ahead (further to the right) of the first kangaroo’s starting location (i.e., x2 &gt; x1). Because the second kangaroo moves at a faster rate (meaning v2 &gt; v1) and is already ahead of the first kangaroo, the first kangaroo will never be able to catch up. Thus, we print NO. Solution1234// Complete the kangaroo function below.function kangaroo(x1, v1, x2, v2) { return (v2 &gt;= v1) ? 'NO' : (!((x1 - x2) % (v2 - v1)) ? 'YES' : 'NO');}","link":"/2019/07/07/kangaroo/"},{"title":"Between Two Sets","text":"You will be given two arrays of integers and asked to determine all integers that satisfy the following two conditions: The elements of the first array are all factors of the integer being considered The integer being considered is a factor of all elements of the second array These numbers are referred to as being between the two arrays. You must determine how many such numbers exist. For example, given the arrays a = [2, 6] and b = [24, 46], there are two numbers between them: 6 and 12. 6%2=0, 6%6=0, 24%6=0 and 36%6=0 for the first value. Similarly, 12%2=0, 12%6=0 and 24%12=0, 36%12=0. Function DescriptionComplete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets. getTotalX has the following parameter(s): a: an array of integers b: an array of integers Input FormatThe first line contains two space-separated integers, n and m, the number of elements in array a and the number of elements in array b. The second line contains n distinct space-separated integers describing a[i] where 0 &lt;= i &lt; n. The third line contains m distinct space-separated integers describing b[j] where 0 &lt;= j &lt; m. Constraints 1 &lt;= n,m &lt;= 10 1 &lt;= a[i] &lt; 100 1 &lt;= b[j] &lt; 100 Output FormatPrint the number of integers that are considered to be between a and b. Sample Input1232 32 416 32 96 Sample Output13 Explanation2 and 4 divide evenly into 4, 8, 12 and 16. 4, 8 and 16 divide evenly into 16, 32, 96. 4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b. Solution123456789101112131415161718/* * Complete the 'getTotalX' function below. * * The function is expected to return an INTEGER. * The function accepts following parameters: * 1. INTEGER_ARRAY a * 2. INTEGER_ARRAY b */function getTotalX(a, b) { // Write your code here return new Array(100).fill(1).reduce((target, item, index) =&gt; { (a.every(value =&gt; !((index + 1) % value)) &amp;&amp; b.every(value =&gt; !(value % (index + 1)))) &amp;&amp; target++; return target; }, 0);}","link":"/2019/07/08/betweenTwoSets/"},{"title":"Hexo Guide #1 - 시작하기","text":"Hexo OverviewLunarScents’ devLog 공간은 정적사이트 생성기(Static site generator)의 일종의 Hexo 를 사용하였습니다. 물론, 많은 블로그 프레임워크가 존재합니다.(티스토리, brunch, medium, Jekyll, gatsby.. 등등) 맛보기(?)로 여러가지를 사용 해본 결과,통일성과 생산성이 높고 글을 작성하기 용이한 Hexo를 이용해 기록 공간을 구축했습니다. What is Hexo?마크다운(Markdown) 문서를 page로 변환하여 빠르고 간단하게 블로그를 만들 수 있는 Node.JS 프레임워크 엄청나게 빠른 속도 Node.js 기반의 블로그 프레임워크이기에 몇 초만에 수백개의 파일을 빌드할 수 있을 정도로 빠른 생성 속도를 제공합니다. 마크다운 지원 GitHub Flavored Markdown 을 기본으로 지원하고 플러그인을 통해 지원하는 언어를 사용할 수 있습니다. 명령어 한 줄로 바로 배포 Github Pages를 통해 hexo가 지원하는 명령어로 쉽게 배포가 가능합니다. 다양한 플러그인과 확장성 Hexo는 강력한 플러그인 시스템을 가지고 있습니다. npm을 이용해 여러 플러그인을 적용할 수 있으며, 사용자가 커스텀마이징하기 용이합니다. RequirementsGit과 Node.js가 설치 되어 있어야 합니다. Node.js - 6.9 이상 Git 미설치 된 분들은 Node 설치가이드 포스팅 을 참고 바랍니다. hexo-cli를 global로 설치 해 주세요. new GDemo('#demo-terminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install -g hexo-cli`, {onCompleteDelay: 500}) .respond(``) .end(); Setup Hexo를 초기화하기 위해 아래의 명령을 차례로 수행하세요. 웹 사이트를 초기화하며, folder가 준비되어 있지 않다면, 현재 디렉트리에 웹 사이트를 세팅합니다. new GDemo('#demo-terminal2-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo init `, {onCompleteDelay: 500}) .respond(``) .end(); new GDemo('#demo-terminal2-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`cd `, {onCompleteDelay: 500}) .respond(``) .end(); new GDemo('#demo-terminal2-3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install`, {onCompleteDelay: 500}) .respond(``) .end(); 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes Server hexo server 또는 hexo s를 명령어를 사용하여 로컬 서버를 구동시킵니다. 기본적으로 localhost:4000 에서 확인 할 수 있습니다. new GDemo('#demo-terminal3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo server`, {onCompleteDelay: 500}) .respond(``) .end(); 옵션 설명 -p, –port 기본 포트를 덮어씁니다. -s, –static 정적인 파일만 구동합니다. -l, –log Logger를 활성화 시킵니다. Logger 형식을 덮어씁니다. Writing &amp; Posting새 글(article) 작성 명령어를 통해 /scaffolds/의 md 파일을 스캐폴딩하여 새 글을 생성할 수 있습니다. layout 을 기입하지 않는다면, Hexo는 _config.yml에 정의된 default_layout 형태를 기본으로 설정합니다.(디폴트: post) title 에 공백이 포함된다면 따옴표로 감싸주세요. new GDemo('#demo-terminal4') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo new [layout] `, {onCompleteDelay: 500}) .respond(``) .end(); 레이아웃 경로 post source/_posts page source page source/_drafts 12345.└── source ├── _drafts └── _posts └── &lt;title&gt;.md Front-matter Front-matter는 파일 시작 시 YAML 또는 JSON 형태로 작성하여 게시물에 대한 환경 설정을 할 수 있습니다. hello-lunarscents.md123456789101112title: Hello, LunarScents!categories:- Tools tags:- blog- Hexo date: 2019-05-29 00:02:39--- 설정 설명 기본 값 layout 레이아웃 title 타이틀 date 발행일 파일이 생성된 날짜 updated 갱신일 파일이 업로드된 날짜 comments 포스트에서 comment 기능을 사용할지 여부 true tags 태그 (page에서는 사용 불가능) categories 카테고리 (page에서는 사용 불가능) permalink 포스트의 기본 permalink를 override합니다. 더 자세한 내용은 Front-matter에서 참고바랍니다. Publish 작성한 내용을 배포합니다. draft 레이아웃을 이용하여 작성했다면 publish를 이용해 post 형태로 발행합니다. new GDemo('#demo-terminal5') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo publish`, {onCompleteDelay: 500}) .respond(` `) .end(); Generating hexo generate 또는 hexo g를 명령어를 사용하여 쉽고 빠르게 정적인 파일을 생성할 수 있습니다. public 폴더에서 생성된 파일들을 확인할 수 있습니다. new GDemo('#demo-terminal6') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo generate`, {onCompleteDelay: 500}) .respond(` `) .end(); Deployment Generating으로 만들어진 정적 파일들을 원하는 서비스를 이용하여 배포 및 호스팅 할 수 있습니다. Github pages Netlify Heroku Amazon S3 이 블로그는 Github Pages를 이용하여 운영되고 있습니다. Github 프로젝트 만들기 Hexo 로 블로그를 생성하고 관리하기 위해서는 git repository가 2개 필요합니다. 블로그 내 파일 및 리소스 저장 및 관리를 위한 Git Repository (blog 용) 생성된 정적 파일로 블로그를 배포할 Git Repository (&lt;githubID&gt;.github.io) Github Repository 시작하기 를 참고해주세요. Configuration Github 에 빌드된 결과물을 배포하기 위해서 hexo-deployer-git 플러그인을 설치하기 바랍니다. new GDemo('#demo-terminal7') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install hexo-deployer-git --save`, {onCompleteDelay: 500}) .respond(` `) .end(); 블로그의 전반적인 설정을 할 수 있는 _config.yml 파일을 수정해 주세요. _config.yml123456789101112131415161718192021222324252627# Sitetitle: LunarScents&apos;s DevLogsubtitle: Hello, LunarScents!description: The logging space of LunarScents.keywords:author: LunarScentslanguage: entimezone: Asia/Seoul&lt;br/&gt;# URLurl: https://lunarscents.github.io //`&lt;githubID&gt;.github.io`root: /permalink: :year/:month/:day/:title/permalink_defaults:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: https://github.com/lunarscents/lunarscents.github.io.git // Github pages repositorybranch: master Deploy new GDemo('#demo-terminal8') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo generate;hexo deploy;//hexo g -d`, {onCompleteDelay: 500}) .respond(``) .end(); 배포가 되면, https://&lt;username&gt;.github.io 로 접속하여 확인할 수 있습니다. 여기서 배포한 것은 빌드한 결과물입니다. 작성한 포스트, 템플릿, 설정, 테마 파일 등은 앞서 만들었던 blog용 Git Repository에 연동하여 백업하시면 됩니다. Reference Site Hexo 공식사이트 Hexo 한글 가이드 Alley의 블로그","link":"/2019/07/09/hexoGuide01/"},{"title":"Birthday Chocolate","text":"Lily has a chocolate bar that she wants to share it with Ron for his birthday. Each of the squares has an integer on it. She decides to share a contiguous segment of the bar selected such that the length of the segment matches Ron’s birth month and the sum of the integers on the squares is equal to his birth day. You must determine how many ways she can divide the chocolate. Consider the chocolate bar as an array of squares, s = [2, 2, 1, 3, 2]. She wants to find segments summing to Ron’s birth day, d = 4 with a length equalling his birth month, m = 2. In this case, there are two segments meeting her criteria: [2, 2] and [1, 3]. Function DescriptionComplete the birthday function in the editor below. It should return an integer denoting the number of ways Lily can divide the chocolate bar. birthday has the following parameter(s): s: an array of integers, the numbers on each of the squares of chocolate d: an integer, Ron’s birth day m: an integer, Ron’s birth month Input FormatThe first line contains an integer n, the number of squares in the chocolate bar. The second line contains n space-separated integers s[i], the numbers on the chocolate squares where 0 &lt;= i &lt;= n. The third line contains two space-separated integers, d and m, Ron’s birth day and his birth month. Constraints 1 &lt;= n &lt;= 100 1 &lt;= s[i] &lt; 5, where(0 &lt;= i &lt; n) 1 &lt;= d &lt;= 31 1 &lt;= m &lt;= 12 Output FormatPrint an integer denoting the total number of ways that Lily can portion her chocolate bar to share with Ron. Sample Input 012351 2 1 3 23 2 Sample Output 012 Explanation 0Lily wants to give Ron m = 2 squares summing to d = 3. The following two segments meet the criteria: Sample Input 112361 1 1 1 1 13 2 Sample Output 110 Explanation 1Lily only wants to give Ron consecutive squares of chocolate whose integers sum to . There are no possible pieces satisfying these constraints: Thus, we print 0 as our answer. Sample Input 2123144 1 Sample Output 211 Explanation 2Lily only wants to give Ron m = 1 square of chocolate with an integer value of d = 4. Because the only square of chocolate in the bar satisfies this constraint, we print 1 as our answer. Solution12345678// Complete the birthday function below.function birthday(s, d, m) { const count = (start, end, values, value) =&gt; (start &lt; end) ? count(start + 1, end, values, value + values[start]) : value; return s.reduce((target, item, index) =&gt; ((count(index, m + index, s || [], 0) === d) ? target + 1 : target), 0);}","link":"/2019/07/10/birthdayChocolate/"},{"title":"124 나라의 숫자","text":"문제 설명124 나라가 있습니다. 124 나라에서는 10진법이 아닌 다음과 같은 자신들만의 규칙으로 수를 표현합니다. 124 나라에는 자연수만 존재합니다. 124 나라에는 모든 수를 표현할 때 1, 2, 4만 사용합니다. 예를 들어서 124 나라에서 사용하는 숫자는 다음과 같이 변환됩니다. 10진법 124 나라 10진법 124 나라 1 1 6 14 2 2 7 21 3 4 8 22 4 11 9 24 4 12 10 41 자연수 n이 매개변수로 주어질 때, n을 124 나라에서 사용하는 숫자로 바꾼 값을 return 하도록 solution 함수를 완성해 주세요. 제한 사항 n은 500,000,000이하의 자연수 입니다. 입출력 예 n result 1 1 2 2 3 4 4 11 Solution 123function solution(n) { return n ? solution((n - (n % 3 || 3)) / 3) + (n % 3 || 4): '';}","link":"/2019/07/04/numberOf124/"},{"title":"Day of the Programmer","text":"Marie invented a Time Machine and wants to test it by time-traveling to visit Russia on the Day of the Programmer (the day of the year) during a year in the inclusive range from 1700 to 2700. From 1700 to 1917, Russia’s official calendar was the Julian calendar; since 1919 they used the Gregorian calendar system. The transition from the Julian to Gregorian calendar system occurred in 1918, when the next day after January 31st was February 14th. This means that in 1918, February 14th was the 32nd day of the year in Russia. In both calendar systems, February is the only month with a variable amount of days; it has 29 days during a leap year, and 28 days during all other years. In the Julian calendar, leap years are divisible by 4; in the Gregorian calendar, leap years are either of the following: Divisible by 400. Divisible by 4 and not divisible by 100. Given a year, y, find the date of the 256th day of that year according to the official Russian calendar during that year. Then print it in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is y. For example, the given year = 1984. 1984 is divisible by 4, so it is a leap year. The 256st day of a leap year after 1918 is September 12, so the answer is 12.09.1984. Function DescriptionComplete the dayOfProgrammer function in the editor below. It should return a string representing the date of the 256th day of the year given. dayOfProgrammer has the following parameter(s): year: an integer Input FormatA single integer denoting year y. Constraints 1700 &lt;= y &lt;= 2700 Output FormatPrint the full date of Day of the Programmer during year in the format dd.mm.yyyy, where dd is the two-digit day, mm is the two-digit month, and yyyy is y. Sample Input 012017 Sample Output 0113.09.2017 Explanation 0In the year y = 2017, January has 31 days, February has 28 days, March has 31 days, April has 30 days, May has 31 days, June has days, July has 30 days, and August has 31 days. When we sum the total number of days in the first eight months, we get 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 = 243. Day of the Programmer is the 256th day, so then calculate 256 - 243 = 13 to determine that it falls on day 13 of the 9th month (September). We then print the full date in the specified format, which is 13.09.2017. Sample Input 112016 Sample Output 1112.09.2016 Explanation 1Year y = 2016 is a leap year, so February has 29 days but all the other months have the same number of days as in 2017. When we sum the total number of days in the first eight months, we get 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 = 244. Day of the Programmer is the 256th day, so then calculate 256 - 244 = 12 to determine that it falls on day 12 of the 9th month (September). We then print the full date in the specified format, which is 12.09.2016. Sample Input 211800 Sample Output 2112.09.1800 Explanation 2Since 1800 is leap year. Day lies on 12 September. Solution12345678910111213// Complete the dayOfProgrammer function below.function dayOfProgrammer(year) { return (year == 1918) ? '26.09.1918' : (( ((year &lt;= 1917) &amp;&amp; !(year % 4)) || (!(year % 400) || (!(year % 4) &amp;&amp; !!(year % 100))) ) ? `12.09.${year}` : `13.09.${year}` );}","link":"/2019/07/12/dayOfProgrammer/"},{"title":"Breaking the Records","text":"Maria plays college basketball and wants to go pro. Each season she maintains a record of her play. She tabulates the number of times she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there. For example, assume her scores for the season are represented in the array scores = [12,24,10,24]. Scores are in the same order as the games played. She would tabulate her results as follows: 123456 CountGame Score Minimum Maximum Min Max 0 12 12 12 0 0 1 24 12 24 0 1 2 10 10 24 1 1 3 24 10 24 1 1 Given Maria’s scores for a season, find and print the number of times she breaks her records for most and least points scored during the season. Function DescriptionComplete the breakingRecords function in the editor below. It must return an integer array containing the numbers of times she broke her records. Index 0 is for breaking most points records, and index 1 is for breaking least points records. breakingRecords has the following parameter(s): scores: an array of integers Input FormatThe first line contains an integer n, the number of games. The second line contains n space-separated integers describing the respective values of score0, score1, … , scoren-1. Constraints 1 &lt;= n &lt;= 1000 1 &lt;= scores[i] &lt; 108 Output FormatPrint two space-seperated integers describing the respective numbers of times her best (highest) score increased and her worst (lowest) score decreased. Sample Input 012910 5 20 20 4 5 2 25 1 Sample Output 012 4 Explanation 0The diagram below depicts the number of times Maria broke her best and worst records throughout the season: She broke her best record twice (after games 2 and 7) and her worst record four times (after games 1, 4, 6, and 8), so we print 2 4 as our answer. Note that she did not break her record for best score during game 3, as her score during that game was not strictly greater than her best record at the time. Sample Input 112103 4 21 36 10 28 35 5 24 42 Sample Output 114 0 Explanation 1The diagram below depicts the number of times Maria broke her best and worst records throughout the season: She broke her best record four times (after games 1, 2, 3, and 9) and her worst record zero times (no score during the season was lower than the one she earned during her first game), so we print 4 0 as our answer. Solution123456789101112131415// Complete the breakingRecords function below.function breakingRecords(scores) { let { countMax, countMin } = (scores || []).reduce((target, item, index) =&gt; { !index &amp;&amp; (target['max'] = target['min'] = item); target['score'] = item; item &gt; target['max'] &amp;&amp; (target['max'] = item, target['countMax']++); item &lt; target['min'] &amp;&amp; (target['min'] = item, target['countMin']++); return target; }, { max: 0, min: 0, score: 0, countMax: 0, countMin: 0 }); return [ countMax, countMin ];}","link":"/2019/07/09/breakingRecords/"},{"title":"Divisible Sum Pairs","text":"You are given an array of n integers, ar = ar[0], ar[1], …, ar[n - 1], and a positive integer, k. Find and print the number of (i, j) pairs where i &lt; j and ar[i] + ar[j] is divisible by k. For example, ar = [1,2,3,4,5,6] and k = 5. Our three pairs meeting the criteria are [1,4],[2,3] and [4,6]. Function DescriptionComplete the divisibleSumPairs function in the editor below. It should return the integer count of pairs meeting the criteria. divisibleSumPairs has the following parameter(s): n: the integer length of array ar ar: an array of integers k: the integer to divide the pair sum by Input FormatThe first line contains 2 space-separated integers, n and k. The second line contains n space-separated integers describing the values of ar[ar[0], ar[1],…,ar[n-1]]. Constraints 2 &lt;= n &lt;= 100 1 &lt;= k &lt;= 100 1 &lt;= ar[i] &lt;= 100 Output FormatPrint the number of (i, j) pairs where i &lt; j and a[i] + a[j] is evenly divisible by k. Sample Input126 31 3 2 6 1 2 Sample Output15 ExplanationHere are the 5 valid pairs when k = 3: (0,2) -&gt; ar[0] + ar[2] = 1 + 2 = 3 (0,5) -&gt; ar[0] + ar[5] = 1 + 2 = 3 (1,3) -&gt; ar[1] + ar[3] = 3 + 6 = 9 (2,4) -&gt; ar[2] + ar[4] = 2 + 1 = 3 (4,5) -&gt; ar[4] + ar[5] = 1 + 2 = 3 Solution123456789// Complete the divisibleSumPairs function below.function divisibleSumPairs(n, k, ar) { let count = 0; let focus = ar.shift(); (ar || []).reduce((target, item) =&gt; !((focus + item) % k) &amp;&amp; count++, 0); return !(ar || []).length ? count : count + divisibleSumPairs(n, k, ar);}","link":"/2019/07/11/divisibleSumPairs/"},{"title":"Bon Appétit","text":"Anna and Brian are sharing a meal at a restuarant and they agree to split the bill equally. Brian wants to order something that Anna is allergic to though, and they agree that Anna won’t pay for that item. Brian gets the check and calculates Anna’s portion. You must determine if his calculation is correct. For example, assume the bill has the following prices: bill = [2,4,6]. Anna declines to eat item k = bill[2] which costs 6. If Brian calculates the bill correctly, Anna will pay (2 + 4)/2 = 3. If he includes the cost of bill[2], he will calculate (2 + 4 + 6)/2 = 6. In the second case, he should refund 3 to Anna. Function DescriptionComplete the bonAppetit function in the editor below. It should print Bon Appetit if the bill is fairly split. Otherwise, it should print the integer amount of money that Brian owes Anna. bonAppetit has the following parameter(s): bill: an array of integers representing the cost of each item ordered k: an integer representing the zero-based index of the item Anna doesn’t eat b: the amount of money that Anna contributed to the bill Input FormatThe first line contains two space-separated integers n and k, the number of items ordered and the -based index of the item that Anna did not eat. The second line contains n space-separated integers bill[i] where 0 &lt;= i &lt; n. The third line contains an integer, b, the amount of money that Brian charged Anna for her share of the bill. Constraints 2 &lt;= n &lt;= 105 0 &lt;= k &lt; n 0 &lt;= bill[i] &lt;= 104 The amount of money due Anna will always be an integer Output FormatIf Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., bcharged - bactual) that Brian must refund to Anna. This will always be an integer. Sample Input 01234 13 10 2 912 Sample Output 015 Explanation 0Anna didn’t eat item bill[1] = 10, but she shared the rest of the items with Brian. The total cost of the shared items is 3 + 2 + 9 = 14 and, split in half, the cost per person is bactual = 7. Brian charged her bcharged = 12 for her portion of the bill. We print the amount Anna was overcharged, bcharged - bactual = 12 - 7 = 5, on a new line. Sample Input 11234 13 10 2 97 Sample Output 11Bon Appetit Explanation 1Anna didn’t eat item bill[1] = 10, but she shared the rest of the items with Brian. The total cost of the shared items is 3 + 2 + 9 = 14 and, split in half, the cost per person is bactual = 7. Because bcharged = 7, we print Bon Appetit on a new line. Solution1234567891011// Complete the bonAppetit function below.function bonAppetit(bill, k, b) { let splitBill= (bill || []).reduce((target, item, index) =&gt; { (index !== k) &amp;&amp; (target += item); return target; }, 0); splitBill = b - splitBill * 0.5; console.log(!splitBill ? 'Bon Appetit' : splitBill);}","link":"/2019/07/13/splitTheBill/"},{"title":"Sock Merchant","text":"John works at a clothing store. He has a large pile of socks that he must pair by color for sale. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are. For example, there are n = 7 socks with colors ar = [1,2,1,2,1,1,3,2]. There is one pair of color 1 and one of color 2. There are three odd socks left, one of each color. The number of pairs is 2. Function DescriptionComplete the sockMerchant function in the editor below. It must return an integer representing the number of matching pairs of socks that are available. sockMerchant has the following parameter(s): n: the number of socks in the pile ar: the colors of each sock Input FormatThe first line contains an integer n, the number of socks represented in ar.The second line contains n space-separated integers describing the colors ar[i] of the socks in the pile. Constraints 1 &lt;= n &lt;= 100 1 &lt;= ar[i] &lt;= 100 where 0 &lt;= i &lt; n Output FormatReturn the total number of matching pairs of socks that John can sell. Sample Input12910 20 20 10 10 30 50 10 20 Sample Output13 Explanation John can match three pairs of socks. Solution123456789101112131415// Complete the sockMerchant function below.function sockMerchant(n, ar) { let pairs = 0; let socks = []; ar.forEach(item =&gt; { socks[item] = !socks[item] ? 1 : socks[item] + 1; }); Object.keys(socks).forEach(key =&gt; { pairs += !!(socks[key] % 2) ? socks[key] - 1 : socks[key]; }); return pairs / 2;}","link":"/2019/07/14/sockMerchant/"},{"title":"Electronics Shop","text":"Monica wants to buy a keyboard and a USB drive from her favorite electronics store. The store has several models of each. Monica wants to spend as much as possible for the 2 items, given her budget. Given the price lists for the store’s keyboards and USB drives, and Monica’s budget, find and print the amount of money Monica will spend. If she doesn’t have enough money to both a keyboard and a USB drive, print -1 instead. She will buy only the two required items. For example, suppose she has b = 60 to spend. Three types of keyboards cost keyboards = [40,50,60]. Two USB drives cost drives = [5, 8, 12]. She could purchase a 40 keyboards + 12 USB drive = 52, or a 50 keyboards + 8 USB drive = 58. She chooses the latter. She can’t buy more than 2 items so she can’t spend exactly 60. Function DescriptionComplete the getMoneySpent function in the editor below. It should return the maximum total price for the two items within Monica’s budget, or -1 if she cannot afford both items. getMoneySpent has the following parameter(s): keyboards: an array of integers representing keyboard prices drives: an array of integers representing drive prices b: the units of currency in Monica’s budget Input FormatThe first line contains three space-separated integers b, n, and m, her budget, the number of keyboard models and the number of USB drive models. The second line contains n space-separated integers keyboard[i], the prices of each keyboard model. The third line contains m space-separated integers drives, the prices of the USB drives. Constraints 1 &lt;= n,m &lt;= 100 1 &lt;= b &lt;= 105 The price of each item is in the inclusive range [1, 105] Output FormatPrint a single integer denoting the amount of money Monica will spend. If she doesn’t have enough money to buy one keyboard and one USB drive, print -1 instead. Sample Input 012310 2 33 15 2 8 Sample Output 019 Explanation 0She can buy the 2nd keyboard and the 3rd USB drive for a total cost of 8 + 1 = 9. Sample Input 11235 1 145 Sample Output 11-1 Explanation 1There is no way to buy one keyboard and one USB drive because 4 + 5 &gt; 5, so we print -1. Solution1234567891011121314151617181920/* * Complete the getMoneySpent function below. */function getMoneySpent(keyboards, drives, b) { /* * Write your code here. */ let max = 0; (keyboards || []).reduce((target, keyboard) =&gt; { drives.reduce((target, drive) =&gt; { (keyboard + drive &gt; max &amp;&amp; keyboard + drive &lt;= b) &amp;&amp; (max = keyboard + drive); return target; }, []) return target; }, []); return !max ? -1 : max;}","link":"/2019/07/15/electronicsShop/"},{"title":"가장 큰 수","text":"문제 설명0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요. 예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다. 0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요. 제한 사항 numbers의 길이는 1 이상 100,000 이하입니다. numbers의 원소는 0 이상 1,000 이하입니다. 정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다. 입출력 예 numbers return [6, 10, 2] 6210 [3, 30, 34, 5, 9] 9534330 Solution 12345function solution(numbers) { return numbers.every(value =&gt; !value) ? '0' : (numbers || []).map(value =&gt; `${value}`).sort((a, b) =&gt; (b + a) - (a + b)).join('');}","link":"/2019/07/14/theLargestNumber/"},{"title":"Cats and a Mouse","text":"Two cats and a mouse are at various positions on a line. You will be given their starting positions. Your task is to determine which cat will reach the mouse first, assuming the mouse doesn’t move and the cats travel at equal speed. If the cats arrive at the same time, the mouse will be allowed to move and it will escape while they fight. You are given q* queries in the form of x, y, and z representing the respective positions for cats A and B, and for mouse C. Complete the function catAndMouse to return the appropriate answer to each query, which will be printed on a new line. If cat A catches the mouse first, print Cat A. If cat B catches the mouse first, print Cat B. If both cats reach the mouse at the same time, print Mouse C as the two cats fight and mouse escapes. For example, cat A is at position x = 2 and cat B is at y = 5. If mouse C is at position z = 4, it is 2 units from cat A and 1 unit from cat B. Cat B will catch the mouse. Function DescriptionComplete the catAndMouse function in the editor below. It should return one of the three strings as described. catAndMouse has the following parameter(s): x: an integer, Cat A‘s position y: an integer, Cat B‘s position z: an integer, Mouse C‘s position Input FormatThe first line contains a single integer, q, denoting the number of queries.Each of the q subsequent lines contains three space-separated integers describing the respective values of x (cat A‘s location), y (cat B‘s location), and z (mouse C‘s location). Constraints 1 &lt;= q &lt;= 100 1 &lt;= x,y,z &lt;= 100 Output FormatFor each query, return Cat A if cat A catches the mouse first, Cat B if cat B catches the mouse first, or Mouse C if the mouse escapes. Sample Input 012321 2 31 3 2 Sample Output 012Cat BMouse C Explanation 0Query 0: The positions of the cats and mouse are shown below: Cat will catch the mouse first, so we print Cat B on a new line. Query 1: In this query, cats A and B reach mouse C at the exact same time: Because the mouse escapes, we print Mouse C on a new line. Solution1234// Complete the catAndMouse function below.function catAndMouse(x, y, z) { return ((Math.abs(x - z)) &lt; Math.abs(z - y)) ? 'Cat A' : ((Math.abs(x - z)) &gt; Math.abs(z - y) ? 'Cat B' : 'Mouse C');}","link":"/2019/07/16/catsAndMouse/"},{"title":"Counting Valleys","text":"Gary is an avid hiker. He tracks his hikes meticulously, paying close attention to small details like topography. During his last hike he took exactly n steps. For every step he took, he noted if it was an uphill, U, or a downhill, D step. Gary’s hikes start and end at sea level and each step up or down represents a 1 unit change in altitude. We define the following terms: A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level. A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level. Given Gary’s sequence of up and down steps during his last hike, find and print the number of valleys he walked through. For example, if Gary’s path is s = [DDUUUUDD], he first enters a valley 2 units deep. Then he climbs out an up onto a mountain 2 units high. Finally, he returns to sea level and ends his hike. Function DescriptionComplete the countingValleys function in the editor below. It must return an integer that denotes the number of valleys Gary traversed. countingValleys has the following parameter(s): n: the number of steps Gary takes s: a string describing his path Input FormatThe first line contains an integer n, the number of steps in Gary’s hike.The second line contains a single string s, of n characters that describe his path. Constraints 2 &lt;= n &lt;= 105 Output FormatPrint a single integer that denotes the number of valleys Gary walked through during his hike. Sample Input128UDDDUDUU Sample Output11 ExplanationIf we represent _ as sea level, a step up as /, and a step down as , Gary’s hike can be drawn as: 123_/\\ _ \\ / \\/\\/ He enters and leaves one valley. Solution123456789101112131415161718// Complete the countingValleys function below.function countingValleys(n, s) { let deepLevel = 0; let count = 0; let totalCount = 0; [...s].reduce((target, value) =&gt; { deepLevel = (value === 'U') ? deepLevel + 1 : deepLevel - 1; (value !== 'U') &amp;&amp; (totalCount = deepLevel); (totalCount &lt; 0 &amp;&amp; deepLevel === 0) &amp;&amp; count++; return target; }, []); return count;}","link":"/2019/07/18/countingValleys/"},{"title":"Migratory Birds","text":"You have been asked to help study the population of birds migrating across the continent. Each type of bird you are interested in will be identified by an integer value. Each time a particular kind of bird is spotted, its id number will be added to your array of sightings. You would like to be able to find out which type of bird is most common given a list of sightings. Your task is to print the type number of that bird and if two or more types of birds are equally common, choose the type with the smallest ID number. For example, assume your bird sightings are of types arr = [1,1,2,2,3]. There are two each of types 1 and 2, and one sighting of type 3. Pick the lower of the two types seen twice: type 1. Function DescriptionComplete the migratoryBirds function in the editor below. It should return the lowest type number of the most frequently sighted bird. migratoryBirds has the following parameter(s): arr: an array of integers representing types of birds sighted Input FormatThe first line contains an integer denoting n, the number of birds sighted and reported in the array arr. The second line describes arr as n space-separated integers representing the type numbers of each bird sighted. Constraints 5 &lt;= n &lt;= 2 X 105 It is guaranteed that each type is 1, 2, 3, 4, or 5. Output FormatPrint the type number of the most common bird; if two or more types of birds are equally common, choose the type with the smallest ID number. Sample Input 01261 4 4 4 5 3 Sample Output 014 Explanation 0The different types of birds occur in the following frequencies: Type 1: 1 bird Type 2: 0 birds Type 3: 1 bird Type 4: 3 birds Type 5: 1 bird The type number that occurs at the highest frequency is type 4, so we print 4 as our answer. Sample Input 112111 2 3 4 5 4 3 2 1 3 4 Sample Output 113 Explanation 1The different types of birds occur in the following frequencies: Type 1: 2 Type 2: 2 Type 3: 3 Type 4: 3 Type 5: 1 Two types have a frequency of 3, and the lower of those is type 3. Solution123456789101112// Complete the migratoryBirds function below.function migratoryBirds(arr) { let results = new Array(5).fill(0).map((value, index) =&gt; ({ value, index: index + 1 })); (arr || []).reduce((target, value, index) =&gt; { results[value - 1].value++; return target; }, []); return results.sort((a,b) =&gt; b.value - a.value)[0].index;}","link":"/2019/07/17/migratoryBirds/"},{"title":"Angry Professor","text":"A Discrete Mathematics professor has a class of students. Frustrated with their lack of discipline, he decides to cancel class if fewer than some number of students are present when class starts. Arrival times go from on time (arrivalTime &lt;= 0) to arrived late (arrivalTime &gt; 0). Given the arrival time of each student and a threshhold number of attendees, determine if the class is canceled. Input FormatThe first line of input contains t, the number of test cases. Each test case consists of two lines. The first line has two space-separated integers, n and k, the number of students (size of a) and the cancellation threshold.The second line contains n space-separated integers (a[1],a[2],…,a[n]) describing the arrival times for each student. Note: Non-positive arrival times (a[i] &lt;= 0) indicate the student arrived early or on time; positive arrival times (a[i] &gt; 0) indicate the student arrived a[i] minutes late. For example, there are n = 6 students who arrive at times a = [-1,-1,0,0,1,1]. Four are there on time, and two arrive late. If there must be k = 4 for class to go on, in this case the class will continue. If there must be k = 5, then class is cancelled. Function DescriptionComplete the angryProfessor function in the editor below. It must return YES if class is cancelled, or NO otherwise. angryProfessor has the following parameter(s): k: the threshold number of students a: an array of integers representing arrival times Constraints 1 &lt;= t &lt;= 10 1 &lt;= n &lt;= 1000 1 &lt;= k &lt;= n Output FormatFor each test case, print the word YES if the class is canceled or NO if it is not. Note If a student arrives exactly on time (ai = 0), the student is considered to have entered before the class started. Sample Input1234524 3-1 -3 4 24 20 -1 2 1 Sample Output12YESNO ExplanationFor the first test case, k = 3. The professor wants at least 3 students in attendance, but only 2 have arrived on time (-3 and -1) so the class is cancelled. For the second test case, k = 2. The professor wants at least 2 students in attendance, and there are 2 who have arrived on time (-0* and **-1) so the class is not cancelled. Solution12345678910// Complete the angryProfessor function below.function angryProfessor(k, a) { let presentStudents = (a || []).reduce((target, student) =&gt; { (student &lt;= 0) &amp;&amp; target++; return target; }, 0); return (presentStudents &gt;= k) ? 'NO' : 'YES';}","link":"/2019/07/20/angryProfessor/"},{"title":"The Hurdle Race","text":"Dan is playing a video game in which his character competes in a hurdle race. Hurdles are of varying heights, and Dan has a maximum height he can jump. There is a magic potion he can take that will increase his maximum height by 1 unit for each dose. How many doses of the potion must he take to be able to jump all of the hurdles. Given an array of hurdle heights height, and an initial maximum height Dan can jump, k, determine the minimum number of doses Dan must take to be able to clear all the hurdles in the race. For example, if height = [1,2,3,3,2] and Dan can jump 1 unit high naturally, he must take 3 - 1 = 2 doses of potion to be able to jump all of the hurdles. Function DescriptionComplete the hurdleRace function in the editor below. It should return the minimum units of potion Dan needs to drink to jump all of the hurdles. hurdleRace has the following parameter(s): k: an integer denoting the height Dan can jump naturally height: an array of integers denoting the heights of each hurdle Input FormatThe first line contains two space-separated integers n and k, the number of hurdles and the maximum height Dan can jump naturally. The second line contains n space-separated integers height[i] where 0 &lt;= i &lt; n. Constraints 1 &lt;= n,k &lt;= 100 1 &lt;= height[i] &lt;= 100 Output FormatPrint an integer denoting the minimum doses of magic potion Dan must drink to complete the hurdle race. Sample Input 0125 41 6 3 5 2 Sample Output 012 Explanation 0Dan’s character can jump a maximum of k = 4 units, but the tallest hurdle has a height of h1 = 6: To be able to jump all the hurdles, Dan must drink 6 - 4 = 2 doses. Sample Input 1125 72 5 4 5 2 Sample Output 110 Explanation 1Dan’s character can jump a maximum of k = 7 units, which is enough to cross all the hurdles: Because he can already jump all the hurdles, Dan needs to drink 0 doses. Solution123456789// Complete the hurdleRace function below.function hurdleRace(k, height) { return (height || []).reduce((target, hurdle) =&gt; { (hurdle &gt; k) &amp;&amp; (target += hurdle - k); (hurdle &gt; k) &amp;&amp; (k += hurdle - k); return target; }, 0);}","link":"/2019/07/19/hurdleRace/"},{"title":"Viral Advertising","text":"HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly 5 people on social media. On the first day, half of those 5 people (i.e., ) like the advertisement and each shares it with 3 of their friends. At the beginning of the second day, people receive the advertisement. Each day, of the recipients like the advertisement and will share it with 3 friends on the following day. Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day 1. For example, assume you want to know how many have liked the ad by the end of the 5th day. 123456Day Shared Liked Cumulative1 5 2 22 6 3 53 9 4 94 12 6 155 18 9 24 The cumulative number of likes is 24. Function DescriptionComplete the viralAdvertising function in the editor below. It should return the cumulative number of people who have liked the ad at a given time. viralAdvertising has the following parameter(s): n: the integer number of days Input FormatA single integer, n, denoting a number of days. Constraints 1 &lt;= n &lt;= 50 Output FormatPrint the number of people who liked the advertisement during the first n days. Sample Input13 Sample Output19 ExplanationThis example is depicted in the following diagram: 2 people liked the advertisement on the first day, 3 people liked the advertisement on the second day and 4 people liked the advertisement on the third day, so the answer is 2 + 3 + 4 = 9. Solution1234567891011// Complete the viralAdvertising function below.function viralAdvertising(n) { let { total } = new Array(n).fill(0).reduce((target, day) =&gt; { target['total'] += Math.floor(target['people'] / 2); target['people'] = Math.floor(target['people'] / 2) * 3; return target; }, {total: 0, people: 5}) return total;}","link":"/2019/07/22/viralAdvertising/"},{"title":"Beautiful Days at the Movies","text":"Lily likes to play games with integers. She has created a new game where she determines the difference between a number and its reverse. For instance, given the number 12, its reverse is 21. Their difference is 9. The number 120 reversed is 21, and their difference is 99. She decides to apply her game to decision making. She will look at a numbered range of days and will only go to a movie on a beautiful day. Given a range of numbered days, [i…j] and a number k, determine the number of days in the range that are beautiful. Beautiful numbers are defined as numbers where |i - reverse(i)| is evenly divisible by k. If a day’s value is a beautiful number, it is a beautiful day. Print the number of beautiful days in the range. Function DescriptionComplete the beautifulDays function in the editor below. It must return the number of beautiful days in the range. beautifulDays has the following parameter(s): i: the starting day number j: the ending day number k: the divisor Input FormatA single line of three space-separated integers describing the respective values of i, j, and k. Constraints 1 &lt;= i &lt;= j &lt;= 2 X 106 1 &lt;= k &lt;= 2 X 100 Output FormatPrint the number of beautiful days in the inclusive range between i and j. Sample Input120 23 6 Sample Output12 ExplanationLily may go to the movies on days 20, 21, 22, and 23. We perform the following calculations to determine which days are beautiful: Day 20 is beautiful because the following evaluates to a whole number: Day 21 is not beautiful because the following doesn’t evaluate to a whole number: Day 22 is beautiful because the following evaluates to a whole number: Day 23 is not beautiful because the following doesn’t evaluate to a whole number: Only two days, 20 and 22, in this interval are beautiful. Thus, we print 2 as our answer. Solution123456789// Complete the beautifulDays function below.function beautifulDays(i, j, k) { return new Array(j-i+1).fill(0).reduce((target, item, index) =&gt; { let value = i + index; !(Math.abs(value - +[...String(value)].reverse().join('')) % k) &amp;&amp; target++; return target; }, 0);}","link":"/2019/07/21/beautifulDays/"},{"title":"Save the Prisoner!","text":"A jail has a number of prisoners and a number of treats to pass out to them. Their jailer decides the fairest way to divide the treats is to seat the prisoners around a circular table in sequentially numbered chairs. A chair number will be drawn from a hat. Beginning with the prisoner in that chair, one candy will be handed to each prisoner sequentially around the table until all have been distributed. The jailer is playing a little joke, though. The last piece of candy looks like all the others, but it tastes awful. Determine the chair number occupied by the prisoner who will receive that candy. For example, there are 4 prisoners and 6 pieces of candy. The prisoners arrange themselves in seats numbered 1 to 4. Let’s suppose two is drawn from the hat. Prisoners receive candy at positions 2,3,4,1,2,3. The prisoner to be warned sits in chair number 3. Function DescriptionComplete the saveThePrisoner function in the editor below. It should return an integer representing the chair number of the prisoner to warn. saveThePrisoner has the following parameter(s): n: an integer, the number of prisoners m: an integer, the number of sweets s: an integer, the chair number to begin passing out sweets from Input FormatThe first line contains an integer, t, denoting the number of test cases. The next t lines each contain 3 space-separated integers: n : the number of prisoners m : the number of sweets s : the chair number to start passing out treats at Constraints 1 &lt;= t &lt;= 100 1 &lt;= n &lt;= 109 1 &lt;= m &lt;= 109 1 &lt;= s &lt;= n Output FormatFor each test case, print the chair number of the prisoner who receives the awful treat on a new line. Sample Input 012325 2 15 2 2 Sample Output 01223 Explanation 0In first query, there are n = 5 prisoners and m = 2 sweets. Distribution starts at seat number s = 1. Prisoners in seats numbered 1 and 2 get sweets. Warn prisoner 2.In the second query, distribution starts at seat 2 so prisoners in seats 2 and 3 get sweets. Warn prisoner 3. Sample Input 112327 19 23 7 3 Sample Output 11263 Explanation 1In the first test case, there are n = 7 prisoners, m = 19 sweets and they are passed out starting at chair s = 2. The candies go all around twice and there are more candies passed to each prisoner from seat 2 to seat 6. In the second test case, there are n = 3 prisoners, m = 7 candies and they are passed out starting at seat s = 3. They go around twice, and there is one more to pass out to the prisoner at seat 3. Solution12345678// Complete the saveThePrisoner function below.function saveThePrisoner(n, m, s) { let value = s + m - 1; return (value &gt; n) ? (!(value % n) ? n : value % n) : value;}","link":"/2019/07/23/savePrisoner/"},{"title":"Find Digits","text":"An integer d is a divisor of an integer n if the remainder of . Given an integer, for each digit that makes up the integer determine whether it is a divisor. Count the number of divisors occurring within the integer. Note: Each digit is considered to be unique, so each occurrence of the same digit should be counted (e.g. for n = 111, 1 is a divisor of 111 each time it occurs so the answer is 3). Function DescriptionComplete the findDigits function in the editor below. It should return an integer representing the number of digits of d that are divisors of d. findDigits has the following parameter(s): n: an integer to analyze Input FormatThe first line is an integer, t, indicating the number of test cases. hThe t subsequent lines each contain an integer, n. Constraints 1 &lt;= t &lt;= 15 1 &lt;= n &lt;= 109 Output FormatFor every test case, count the number of digits in n that are divisors of n. Print each answer on a new line. Sample Input1232121012 Sample Output1223 ExplanationThe number 12 is broken into two digits, 1 and 2. When 12 is divided by either of those two digits, the remainder is 0 so they are both divisors. The number 1012 is broken into four digits, 1, 0, 1, and 2. 1012 is evenly divisible by its digits 1, 1, and 2, but it is not divisible by 0 as division by zero is undefined. Solution12345678// Complete the findDigits function below.function findDigits(n) { return [...`${n}`].reduce((target, value) =&gt; { (+n % +value === 0) &amp;&amp; target++; return target; }, 0);}","link":"/2019/07/25/findDigits/"},{"title":"Picking Numbers","text":"Given an array of integers, find and print the maximum number of integers you can select from the array such that the absolute difference between any two of the chosen integers is less than or equal to 1. For example, if your array is a = [1,1,2,2,4,4,5,5,5], you can create two subarrays meeting the criterion: [1,1,2,2] and [4,4,5,5,5]. The maximum length subarray has 5 elements. Function DescriptionComplete the pickingNumbers function in the editor below. It should return an integer that represents the length of the longest array that can be created. pickingNumbers has the following parameter(s): a: an array of integers Input FormatThe first line contains a single integer n, the size of the array a.The second line contains n space-separated integers a[i]. Constraints 2 &lt;= n &lt;= 100 0 &lt;= a[i] &lt;= 100 The answer will be &gt;= 2. Output FormatA single integer denoting the maximum number of integers you can choose from the array such that the absolute difference between any two of the chosen integers is &lt;= 1. Sample Input 01264 6 5 3 3 1 Sample Output 013 Explanation 0We choose the following multiset of integers from the array: {4,3,3}. Each pair in the multiset has an absolute difference &lt;=1 (i.e., |4 - 3| = 1 and |3 - 3| = 0), so we print the number of chosen integers, 3, as our answer. Sample Input 11261 2 2 3 1 2 Sample Output 115 Explanation 1We choose the following multiset of integers from the array: {1,2,2,1,2}. Each pair in the multiset has an absolute difference &lt;= 1 (i.e., |1 - 2| = 1, |1 - 1| = 0, and |2 - 2| = 0), so we print the number of chosen integers, 5, as our answer. Solution123456789101112131415161718192021222324/* * Complete the 'pickingNumbers' function below. * * The function is expected to return an INTEGER. * The function accepts INTEGER_ARRAY a as parameter. */function pickingNumbers(a) { // Write your code here let max = 0; let values = new Array(100).fill(0); (a || []).forEach(value =&gt; { values[value]++; }); return values.reduce((target, value, index) =&gt; { ( (index &gt;= 1) &amp;&amp; (value + values[index - 1] &gt; target) ) &amp;&amp; (target = value + values[index - 1]); return target; }, []);}","link":"/2019/07/26/pickingNumbers/"},{"title":"Designer PDF Viewer","text":"When you select a contiguous block of text in a PDF viewer, the selection is highlighted with a blue rectangle. In this PDF viewer, each word is highlighted independently. For example: In this challenge, you will be given a list of letter heights in the alphabet and a string. Using the letter heights given, determine the area of the rectangle highlight in mm2 assuming all letters are 1mm wide. For example, the highlighted word = torn. Assume the heights of the letters are t = 2, o = 1, r = 1 and n = 1. The tallest letter is 2 high and there are 4 letters. The hightlighted area will be 2 * 4 = 8mm2 so the answer is 8. Function DescriptionComplete the designerPdfViewer function in the editor below. It should return an integer representing the size of the highlighted area. designerPdfViewer has the following parameter(s): h: an array of integers representing the heights of each letter word: a string Input FormatThe first line contains 26 space-separated integers describing the respective heights of each consecutive lowercase English letter, ascii[a-z]. The second line contains a single word, consisting of lowercase English alphabetic letters. Constraints 1 &lt;= h[?] &lt;= 7, where ? is an English lowercase letter. word contains no more than 10 letters. Output FormatPrint a single integer denoting the area in mm2 of highlighted rectangle when the given word is selected. Do not print units of measure. Sample Input 0121 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5abc Sample Output 019 Explanation 0We are highlighting the word abc: Letter heights are a = 1, b = 3 and c = 1. The tallest letter, b, is 3mm high. The selection area for this word is . Note: Recall that the width of each character is 1mm. Sample Input 1121 3 1 3 1 4 1 3 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7zaba Sample Output 1128 Explanation 1The tallest letter in zaba is z at 7mm. The selection area for this word is . Solution123456789101112131415161718// Complete the designerPdfViewer function below.function designerPdfViewer(h, word) { let { code, values } = new Array(26).fill(0).reduce((target, value, index) =&gt; { target['values'][String.fromCharCode(target['code'])] = h[index]; target['code']++; return target; }, { code: 97, values: new Object() }); let { height, max } = [...`${word}`].reduce((target, value, index) =&gt; { target['height'] = values[word.charAt(index)]; target['max'] = Math.max(target['max'], target['height']); return target; }, { height: 0, max: 0 }); return (word.length * max);}","link":"/2019/07/27/designerViewer/"},{"title":"Utopian Tree","text":"The Utopian Tree goes through 2 cycles of growth every year. Each spring, it doubles in height. Each summer, its height increases by 1 meter. Laura plants a Utopian Tree sapling with a height of 1 meter at the onset of spring. How tall will her tree be after n growth cycles? For example, if the number of growth cycles is n = 5, the calculations are as follows: 1234567Period Height0 11 22 33 64 75 14 Function DescriptionComplete the utopianTree function in the editor below. It should return the integer height of the tree after the input number of growth cycles. utopianTree has the following parameter(s): n: an integer, the number of growth cycles to simulate Input FormatThe first line contains an integer, t, the number of test cases. t subsequent lines each contain an integer, n, denoting the number of cycles for that test case. Constraints1 &lt;= t &lt;= 10 1 &lt;= n &lt;= 60 Output FormatFor each test case, print the height of the Utopian Tree after n cycles. Each height must be printed on a new line. Sample Input12343014 Sample Output123127 ExplanationThere are 3 test cases. In the first case (n = 0), the initial height (H = 1) of the tree remains unchanged. In the second case (n = 1), the tree doubles in height and is 2 meters tall after the spring cycle. In the third case (n = 4), the tree doubles its height in spring (n = 1, H = 2), then grows a meter in summer (n = 2, H = 3), then doubles after the next spring (n = 3, H = 6), and grows another meter after summer (n = 4, H = 7). Thus, at the end of 4 cycles, its height is 7 meters. Solution12345678910// Complete the utopianTree function below.function utopianTree(n) { return new Array(n).fill(0).reduce((target, value, index) =&gt; { !(index % 2) ? (target *= 2) : target++; return target; }, 1);}","link":"/2019/07/28/utopianTree/"},{"title":"Drawing Book","text":"Brie’s Drawing teacher asks her class to open their books to a page number. Brie can either start turning pages from the front of the book or from the back of the book. She always turns pages one at a time. When she opens the book, page 1 is always on the right side: When she flips page 1, she sees pages 2 and 3. Each page except the last page will always be printed on both sides. The last page may only be printed on the front, given the length of the book. If the book is n pages long, and she wants to turn to page p, what is the minimum number of pages she will turn? She can start at the beginning or the end of the book. Given n and p, find and print the minimum number of pages Brie must turn in order to arrive at page p. Function DescriptionComplete the pageCount function in the editor below. It should return the minimum number of pages Brie must turn. pageCount has the following parameter(s): n: the number of pages in the book p: the page number to turn to Input FormatThe first line contains an integer n, the number of pages in the book. The second line contains an integer, p, the page that Brie’s teacher wants her to turn to. Constraints 1 &lt;= n &lt;= 105 1 &lt;= p &lt;= n Output FormatPrint an integer denoting the minimum number of pages Brie must turn to get to page p. Sample Input 01262 Sample Output 011 Explanation 0If Brie starts turning from page 1, she only needs to turn 1 page: If Brie starts turning from page 6, she needs to turn 2 pages: Because we want to print the minumum number of page turns, we print 1 as our answer. Sample Input 11254 Sample Output 110 Explanation 1If Brie starts turning from page 1, she needs to turn 2 pages: If Brie starts turning from page 5, she doesn’t need to turn any pages: Because we want to print the minimum number of page turns, we print 0 as our answer. Solution123456789101112/* * Complete the pageCount function below. */function pageCount(n, p) { /* * Write your code here. */ let fromLeft = Math.floor(p / 2); let fromRight = Math.floor(n / 2) - fromLeft; return fromLeft &gt; fromRight ? fromRight : fromLeft;}","link":"/2019/07/24/drawingBook/"},{"title":"브라우저 동작 원리","text":"What is a Browser?웹 브라우저는 인터넷 망에서 웹(www)서비스를 이용할 수 있게 하여 정보를 검색하고 정보를 볼 수 있게 해주는 응용프로그램 입니다. 브라우저의 핵심 기능브라우저의 주요 기능은 사용자가 참조하고자 하는 웹페이지를 서버에 요청(Request)하고 서버의 응답(Response)을 받아 브라우저에 표시하는 것입니다. 브라우저는 서버로부터 HTML, CSS, Javascript, 이미지 파일 등을 응답받습니다. HTML, CSS 파일은 렌더링 엔진의 HTML 파서와 CSS 파서에 의해 파싱(Parsing)되어 DOM, CSSDOM 트리로 변환되고 렌더 트리로 결합됩니다. 이렇게 생성된 렌더 트리를 기반으로 브라우저는 웹페이지를 표시합니다. 브라우저의 기본 구조 User Interface(사용자 인터페이스) 주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분입니다. Browser Engine(브라우저 엔진) 사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어합니다. Rendering Engine(렌더링 엔진) 요청한 콘텐츠를 표시합니다. 예를 들어 HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 표시합니다. Networking(통신) HTTP 요청과 같은 네트워크 호출에 사용합니다. 플랫폼 독립적인 인터페이스이며 각 플랫폼 하부에서 실행합니다. UI Backend(UI 백엔드) 콤보 박스와 창 같은 기본적인 장치를 그립니다. 플랫폼에서 명시하지 않은 일반적인 인터페이스로서, OS 사용자 인터페이스 체계를 사용합니다. JavaScript Interpreter(자바스크립트 해석기) 자바스크립트 코드를 해석하고 실행합니다. Data Persistence(자료 저장소) 자료를 저장하는 계층입니다. 쿠키를 저장하는 것과 같이 모든 종류의 자원을 하드 디스크에 저장할 필요가 있으며, HTML5 명세에는 브라우저가 지원하는 웹 데이터 베이스가 정의되어 있습니. Chrome은 다른 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지하여 독립된 프로세스로 처리됩니다. 렌더링 엔진렌더링 엔진은 요청 받은 내용을 브라우저 화면에 표시하는 일을 합니다. 렌더링 엔진들 Gecko 엔진 사용 : Firefox Webkit 엔진 사용 : Chrome, Safari 렌더링 엔진 기본 흐름 웹 브라우저는 HTML(문자열)을 읽어 약속된 규칙을 기반으로 화면에 그립니다.(Rendering) 그리기 위한 부가정보(CSS)를 주입시킬 수 있습니다. 브라우저는 HTML을 브라우저가 다루기 편한 형태로 가공하여 관리합니다.(DOM) DOM을 접근하고 조작할 수 있는 방법을 JavaScript API 형태로 제공합니다. 브라우저가 지원하지 않는 것 브라우저는 파일 시스템을 제공하지 않는다. JavaScript는 모듈 시스템을 제공하지 않는다. HTML은 정해진 UI를 포함한 컴포넌트를 제공하나 표준적인 확장 방법을 제공하지 않는다. Reference Site How Browsers work 렌더링 트리 생성, 레이아웃 및 페인트 브라우저는 어떻게 동작하는가?(번역) Poiemaweb의 브라우저 동작 원리","link":"/2019/07/29/howBrowsersWork/"},{"title":"React Overview - React 살펴보기","text":"OverviewReact는 사용자 인터페이스를 구축하기 위한 선언적이고 효율적이며 유연한 JavaScript 라이브러리입니다. “컴포넌트”라고 불리는 작고 고립된 코드의 파편을 이용하여 복잡한 UI를 구성하도록 돕습니다. What is the React?사용자 인터페이스를 만들기 위한 JavaScript 라이브러리 선언형 뷰 선언형 뷰는 코드를 예측 가능하고 디버그하기 쉽게 만들어 줍니다. React는 상호작용이 많은 UI를 만들 때 생기는 어려움을 줄여줍니다. 컴포넌트 기반 다양한 형식의 데이터를 앱 안에서 손쉽게 전달할 수 있고, DOM과는 별개로 상태를 관리할 수 있습니다. HTML과 CSS를 컴포넌트 구조로 조합하여 운영할 수 있는 방법을 제공한다. UI 조합의 방식은 컴포넌트 방식이며 컴포넌트는 재사용성을 보장하며 다른 컴포넌트와의 인터페이스를 지원한다. 한 번 배워서 어디서나 사용하기 React는 Node 서버에서 렌더링을 할 수도 있고, React Native를 이용하면 모바일 앱도 만들 수 있습니다. HTML 구성에 대한 방식을 제공하는 AngularJS, Bootstrap, BackboneJS 과 같은 Framework과 함께 사용할 수 있다. Requirements HTML, JavaScript 함수, 객체, 배열, 가능하다면 클래스 같은 프로그래밍 개념 Virtual DOM React는 JavaScript 내에 DOM Tree와 같은 구조체를 Virtual DOM으로 갖고 있습니다. 과거 데이터가 변경되면 전체를 새로 그리는 과정에서 발생하는 비효율적인 부분과 달리, 구조체의 전후 상태를 비교하여 변경이 필요한 최소한의 요소만 실제 DOM에 반영합니다. 따라서 변경에 필요한 최소한의 DOM만 갱신되기 때문에 빠른 처리와 성능 향상이 가능합니다. Data Flow ReactJS는 단방향 데이터 흐름을 지향합니다. 애플리케이션의 데이터를 관리하는 모델 컴포넌트가 있습니다. 데이터를 UI 컴포넌트에 전달하는 단순한 데이터 흐름으로 이하해고 관리하기 쉽습다. AngularJS의 양방향 데이터 바인딩은 코드를 줄여주고 사용하기 편하지만, 규모가 커질수록 데이터 흐름을 추적하기 힘듭니다. JSX React UI Component 를 만들기 위해 HTML 태그를 포함합니다. HTML 태그와 코드의 혼용은 JSP, PHP, ASP 등의 기술에서 경험한 것 처럼 가독성을 크게 저하시킬 수 있습니다. ReactJS 는 이를 최소로 억제하기 위한 간단한 표현 명세를 포함한 JavaScript Extension을 제공하며, 이를 JSX라 합니다. JSX 문법의 사용은 선택사항입니다. What is a Component?Component란, 각 부분을 재사용 가능한 조각으로 UI를 나눈 것을 말합니다. Component Design 개발해야할 UI 요소에 대한 컴포넌트 설계가 필요합니다. 독립된 컴포넌트는 재사용성을 고려하여 설계 필요합니다. 컴포넌트는 container형 컴포넌트와 control형 컴포넌트로 나누어 설계 가능합니다. container형 컴포넌트는 중첩될 수 있으나 중첩된 내부 컴포넌트까지 데이터가 전파되어야할 경우 중첩의 깊이에 대한 고려가 필요합니다. Component LifecycleReact의 컴포넌트는 생명주기(Life cycle)을 가집니다.생명주기 안에서는 특정 시점에 자동으로 호출되는 메서드가 있는데, 이를 라이프 사이클 이벤트라고 합니다. React v16.3 이전의 라이프 사이클 이벤트 React v16.3 이후 라이프 사이클 이벤트 componentWillMount, componentWillReceiveProps, componentWillUpdate를 v17 부터 사용불가 componentWillReceiveProps 대체 메서드 추가 getDerivedStateFromProps componentWillUpdate 대체 메서드 추가 getSnapshotBeforeUpdate componentDidCatch 컴포넌트 에러 핸들링 API 추가 변경 이유 초기 렌더링을 제어하는 방법이 많아져서 혼란이 되었습니다. 오류 처리 인터럽트 동작시에 메모리 누수가 발생할 수 있었습니다. Reference React 공식 사이트 React 한글 가이드 Velopert의 React 소개 Velopert의 Component LifeCycle API React: The Virtual DOM","link":"/2019/07/30/react/"},{"title":"Intro to Tutorial Challenges","text":"About Tutorial ChallengesMany of the challenges on HackerRank are difficult and assume that you already know the relevant algorithms. These tutorial challenges are different. They break down algorithmic concepts into smaller challenges so that you can learn the algorithm by solving them. They are intended for those who already know some programming, however. You could be a student majoring in computer science, a self-taught programmer, or an experienced developer who wants an active algorithms review. Here’s a great place to learn by doing! The first series of challenges covers sorting. They are listed below: Tutorial Challenges - SortingInsertion Sort challenges Insertion Sort 1 - Inserting Insertion Sort 2 - Sorting Correctness and loop invariant Running Time of Algorithms Quicksort challenges Quicksort 1 - Partition Quicksort 2 - Sorting Quicksort In-place (advanced) Running time of Quicksort Counting sort challenges Counting Sort 1 - Counting Counting Sort 2 - Simple sort Counting Sort 3 - Preparing Full Counting Sort (advanced) There will also be some challenges where you’ll get to apply what you’ve learned using the completed algorithms. About the ChallengesEach challenge will describe a scenario and you will code a solution. As you progress through the challenges, you will learn some important concepts in algorithms. In each challenge, you will receive input on STDIN and you will need to print the correct output to STDOUT. There may be time limits that will force you to make your code efficient. If you receive a “Terminated due to time out” message when you submit your solution, you’ll need to reconsider your method. If you want to test your code locally, each test case can be downloaded, inputs and expected results, using hackos. You earn hackos as you solve challenges, and you can spend them on these tests. For many challenges, helper methods (like an array) will be provided for you to process the input into a useful format. You can use these methods to get started with your program, or you can write your own input methods if you want. Your code just needs to print the right output to each test case. Sample ChallengeThis is a simple challenge to get things started. Given a sorted array (arr) and a number (V), can you print the index location of V in the array? For example, if arr = [1,2,3] and V = 3, you would print 2 for a zero-based index array. If you are going to use the provided code for I/O, this next section is for you. Function DescriptionComplete the introTutorial function in the editor below. It must return an integer representing the zero-based index of V. introTutorial has the following parameter(s): arr: a sorted array of integers V: an integer to search for The next section describes the input format. You can often skip it, if you are using included methods or code stubs. Input FormatThe first line contains an integer, V, a value to search for.The next line contains an integer, n, the size of arr. The last line contains n space-separated integers, each a value of arr[i] where 0 &lt;= i &lt; n. Output FormatOutput the index of V in the array. The next section describes the constraints and ranges of the input. You should check this section to know the range of the input. Constraints 1 &lt;= n &lt;= 1000 It is guaranteed that V will occur in arr exactly once. This “sample” shows the first input test case. It is often useful to go through the sample to understand a challenge. Sample Input 0123461 4 5 7 9 12 Sample Output 011 Explanation 0V = 4. The value 4 is the 2nd element in the array, but its index is 1 since in this case, array indices start from 0 (see array definition under Input Format). Solution1234// Complete the introTutorial function below.function introTutorial(V, arr) { return arr.indexOf(V);}","link":"/2019/08/02/tutorialChallenges/"},{"title":"Sequence Equation","text":"Given a sequence of n integers, p(1),p(2),…,p(n) where each element is distinct and satisfies 1 &lt;= p(x) &lt;= n. For each x where 1 &lt;= x &lt;= n, find any integer y such that p(p(y)) = x and print the value of y on a new line. For example, assume the sequence p = [5, 2, 1, 3, 4]. Each value of x between 1 and 5, the length of the sequence, is analyzed as follows: , so p[p[4]] = 1 , so p[p[2]] = 2 , so p[p[5]] = 3 , so p[p[1]] = 4 , so p[p[3]] = 5 The values for y are [4,2,5,1,3]. Function DescriptionComplete the permutationEquation function in the editor below. It should return an array of integers that represent the values of y. permutationEquation has the following parameter(s): p: an array of integers Input FormatThe first line contains an integer n, the number of elements in the sequence.The second line contains n space-separated integers p[i] where a &lt;= i &lt;= n. Constraints 1 &lt;= n &lt;= 50 1 &lt;= p[i] &lt;= 50, where 1 &lt;= i &lt;= n. Each element in the sequence is distinct. Output FormatFor each x from 1 to n, print an integer denoting any valid y satisfying the equation on a new line. Sample Input 01232 3 1 Sample Output 0123231 Explanation 0Given the values of p(1) = 2, p(2) = 3, and p(3) = 1, we calculate and print the following values for each x from 1 to n: , so we print the value of y = 2 on a new line. , so we print the value of y = 3 on a new line. , so we print the value of y = 1 on a new line. Sample Input 11254 3 5 1 2 Sample Output 11234513542 Solution1234567891011121314// Complete the permutationEquation function below.function permutationEquation(p) { let values = (p || []).reduce((target, value, index) =&gt; { target[value] = index + 1; return target; }, []); return (p || []).reduce((target, value, index) =&gt; { target.push(values[values[index + 1]]) return target; }, []);}","link":"/2019/07/30/sequenceEquation/"},{"title":"Sherlock and Squares","text":"Watson likes to challenge Sherlock’s math ability. He will provide a starting and ending value describing a range of integers. Sherlock must determine the number of square integers within that range, inclusive of the endpoints. Note: A square integer is an integer which is the square of an integer, e.g. 1,4,9,16.25. For example, the range is a = 24 and b = 49, inclusive. There are three square integers in the range: 25, 36 and 49. Function DescriptionComplete the squares function in the editor below. It should return an integer representing the number of square integers in the inclusive range from a to b. squares has the following parameter(s): a: an integer, the lower range boundary b: an integer, the uppere range boundary Input FormatThe first line contains q, the number of test cases. Each of the next q lines contains two space-separated integers denoting a and b, the starting and ending integers in the ranges. Constraints1 &lt;= q &lt;= 100 1 &lt;= a &lt;= b &lt;= 109 Output FormatFor each test case, print the number of square integers in the range on a new line. Sample Input12323 917 24 Sample Output1220 ExplanationTest Case #00: In range [3, 9], 4 and 9 are the two square integers. Test Case #01: In range [17, 24], there are no square integers. Solution1234567// Complete the squares function below.function squares(a, b) { let lower = Math.ceil(Math.sqrt(a)); let upper = Math.floor(Math.sqrt(b)); return lower &gt; upper ? 0 : upper - lower + 1;}","link":"/2019/07/29/sherlockSquares/"},{"title":"Big Sorting","text":"Consider an array of numeric strings where each string is a positive number with anywhere from 1 to 106 digits. Sort the array’s elements in non-decreasing, or ascending order of their integer values and print each element of the sorted array on a new line. Function DescriptionComplete the bigSorting function in the editor below. It should return the sorted string array. bigSorting has the following parameter(s): unsorted: an unsorted array of integers as strings Input FormatThe first line contains an integer, n, denoting the number of strings in unsorted. Each of the n subsequent lines contains an integer string unsorted[i]. Constraints 1 &lt;= n &lt;= 2 X 105 Each string is guaranteed to represent a positive integer without leading zeros. The total number of digits across all strings in unsorted is between 1 and 106 (inclusive). Output FormatPrint each element of the sorted array on a new line. Sample Input 01234567631415926535897932384626433832795131035 Sample Output 012345613351031415926535897932384626433832795 Explanation 0The initial array of strings is unsorted = [31415926535897932384626433832795,1,3,10,3,5].When we order each string by the real-world integer value it represents, we get: We then print each value on a new line, from smallest to largest. Sample Input 11234567898121001230347984985734171834019237130841937410829373084193741082938111200 Sample Output 112345678121001112003084193741082937308419374108293812303479849857341718340192371 Solution12345678910// Complete the bigSorting function below.function bigSorting(unsorted) { return unsorted.sort((a, b) =&gt; { if (a.length == b.length) { return a &gt; b ? 1 : -1; } return a.length - b.length; });}","link":"/2019/08/04/bigSorting/"},{"title":"CamelCase","text":"Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties: It is a concatenation of one or more words consisting of English letters. All letters in the first word are lowercase. For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase. Given s, print the number of words in s on a new line. For example, s = oneTwoThree. There are 3 words in the string. Function DescriptionComplete the camelcase function in the editor below. It must return the integer number of words in the input string. camelcase has the following parameter(s): s: the string to analyze Input FormatA single line containing string s. Constraints 1 &lt;= |s| &lt;= 105 Output FormatPrint the number of words in string s. Sample Input1saveChangesInTheEditor Sample Output15 ExplanationString s contains five words: save Changes In The Editor Thus, we print 5 on a new line. Solution1234// Complete the camelcase function below.function camelcase(s) { return (s || '').replace(/[a-z]/g, '').length + 1;}","link":"/2019/07/31/camelCase/"},{"title":"Library Fine","text":"Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any). The fee structure is as follows: If the book is returned on or before the expected return date, no fine will be charged (i.e.: fine = 0). If the book is returned after the expected return day but still within the same calendar month and year as the expected return date, fine = 15 Hackos X (the number of days late). If the book is returned after the expected return month but still within the same calendar year as the expected return date, the fine = 500 Hackos X (the number of days late). If the book is returned after the calendar year in which it was expected, there is a fixed fine of 10,000 Hackos. Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be . Function DescriptionComplete the libraryFine function in the editor below. It must return an integer representing the fine due. libraryFine has the following parameter(s): d1, m1, y1: returned date day, month and year d2, m2, y2: due date day, month and year Input FormatThe first line contains 3 space-separated integers, d1,m1,y1, denoting the respective day, month, and year on which the book was returned. The second line contains 3 space-separated integers, d2,m2,y2, denoting the respective day, month, and year on which the book was due to be returned. Constraints 1 &lt;= d1,d2 &lt;= 31 1 &lt;= m1,m2 &lt;= 12 1 &lt;= y1,y2 &lt;= 3000 Output FormatPrint a single integer denoting the library fine for the book received as input. Sample Input129 6 20156 6 2015 Sample Output145 ExplanationGiven the following dates: Returned: d1 = 9, m1 = 6, y1 = 2015 Due: d2 = 6, m2 = 6, y2 = 2015 Because , we know it is less than a year late. Because , we know it’s less than a month late. Because , we know that it was returned late (but still within the same month and year). Per the library’s fee structure, we know that our fine will be 15 Hackos X (# days late). We then print the result of 15 X (d1 - d2) = 15 X (9 - 6) = 45 as our output. Solution1234567891011121314// Complete the libraryFine function below.function libraryFine(d1, m1, y1, d2, m2, y2) { return ( y1 &gt; y2 ? 10000 : ( y2 &gt; y1 ? 0 : ( m1 &gt; m2 ? 500 * ((m1 - m2) + ((y1 - y2) * 12)) : ( m2 &gt; m1 ? 0 : ( d1 &gt; d2 ? 15 * (d1 - d2) : 0 ) ) ) ) );}","link":"/2019/08/01/libraryFine/"},{"title":"Climbing the Leaderboard","text":"Alice is playing an arcade game and wants to climb to the top of the leaderboard and wants to track her ranking. The game uses Dense Ranking, so its leaderboard works like this: The player with the highest score is ranked number 1 on the leaderboard. Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number. For example, the four players on the leaderboard have high scores of 100, 90, 90, and 80. Those players will have ranks 1, 2, 2, and 3, respectively. If Alice’s scores are 70, 80 and 105, her rankings after each game are 4th, 3rd and 1st. Function DescriptionComplete the climbingLeaderboard function in the editor below. It should return an integer array where each element res[j] represents Alice’s rank after the jth game. climbingLeaderboard has the following parameter(s): scores: an array of integers that represent leaderboard scores alice: an array of integers that represent Alice’s scores Input FormatThe first line contains an integer n, the number of players on the leaderboard.The next line contains n space-separated integers scores[i], the leaderboard scores in decreasing order.The next line contains an integer, m, denoting the number games Alice plays.The last line contains m space-separated integers alice[j], the game scores. Constraints 1 &lt;= n &lt;= 2 X 105 1 &lt;= m &lt;= 2 X 105 0 &lt;= scores[i] &lt;= 109 for 0 &lt;= i &lt; n 0 &lt;= alice[j] &lt;= 109 for 0 &lt;= j &lt; m The existing leaderboard, scores, is in descending order. Alice’s scores, alice, are in ascending order. SubtaskFor 60% of the maximum score: 1 &lt;= n &lt;= 200 1 &lt;= m &lt;= 200 Output FormatPrint m integers. The jth integer should indicate Alice’s rank after playing the jth game. Sample Input 1| ‘Array: scores’ || — | — | — | — | — | — | — || 100 | 100 | 50 | 40 | 40 | 20 | 10 | | ‘Array: alice’ || — | — | — | — || 5 | 25 | 50 | 120 | 12347100 100 50 40 40 20 1045 25 50 120 Sample Output 112346421 Explanation 1Alice starts playing with 7 players already on the leaderboard, which looks like this: After Alice finishes game 0, her score is 5 and her ranking is 6: After Alice finishes game 1, her score is 25 and her ranking is 4: After Alice finishes game 2, her score is 50 and her ranking is tied with Caroline at 2: After Alice finishes game 3, her score is 120 and her ranking is 1: Sample Input 2| ‘Array: scores’ || — | — | — | — | — | — || 100 | 90 | 90 | 80 | 75 | 60 | | ‘Array: alice’ || — | — | — | — | — || 50 | 65 | 77 | 90 | 102 | 12346100 90 90 80 75 60550 65 77 90 102 Sample Output 21234565421 Solution1234567891011121314// Complete the climbingLeaderboard function below.function climbingLeaderboard(scores, alice) { // Complete this function let values = [...new Set(scores)]; let rank = values.length - 1; return alice.reduce((target, item, index) =&gt; { while (item &gt; values[rank] &amp;&amp; rank &gt; 0) rank--; target.push((item &gt;= values[rank]) ? rank + 1 : rank + 2); return target; }, []);}","link":"/2019/08/05/climbingleaderboard/"},{"title":"Circular Array Rotation","text":"John Watson knows of an operation called a right circular rotation on an array of integers. One rotation operation moves the last array element to the first position and shifts all remaining elements right one. To test Sherlock’s abilities, Watson provides Sherlock with an array of integers. Sherlock is to perform the rotation operation a number of times then determine the value of the element at a given position. For each array, perform a number of right circular rotations and return the value of the element at a given index. For example, array a = [3,4,5], number of rotations, k = 2 and indices to check, m = [1,2]. First we perform the two rotations: [3,4,5] -&gt; [5,3,4] -&gt; [4,5,3] Now return the values from the zero-based indices and as indicated in the array. a[1] = 5a[2] = 3 Function DescriptionComplete the circularArrayRotation function in the editor below. It should return an array of integers representing the values at the specified indices. circularArrayRotation has the following parameter(s): a: an array of integers to rotate k: an integer, the rotation count queries: an array of integers, the indices to report Input FormatThe first line contains 3 space-separated integers, n, k, and q, the number of elements in the integer array, the rotation count and the number of queries. The second line contains n space-separated integers, where each integer i describes array element a[i] (where 0 &lt;= i &lt; n). Each of the q subsequent lines contains a single integer denoting m, the index of the element to return from a. Constraints 1 &lt;= n &lt;= 105 1 &lt;= a[i] &lt;= 105 1 &lt;= k &lt;= 105 1 &lt;= q &lt;= 500 0 &lt;= m &lt; n Output FormatFor each query, print the value of the element at index m of the rotated array on a new line. Sample Input 0123453 2 31 2 3012 Sample Output 0123231 Explanation 0After the first rotation, the array becomes [3,1,2]. After the second (and final) rotation, the array becomes [2,3,1]. Let’s refer to the array’s final state as array b = [2,3,1]. For each query, we just have to print the value of bm on a new line: m = 0, b0 = 2. m = 1, b1 = 3. m = 2, b2 = 1. Solution12345678910// Complete the circularArrayRotation function below.function circularArrayRotation(a, k, queries) { //Enter your code here return queries.map(value =&gt; a.reduce((target, item, index) =&gt; { let focus = (index + k) % a.length; target[focus] = item; return target; }, [])[value]);}","link":"/2019/08/07/circularArrayRotation/"},{"title":"Chocolate Feast","text":"Little Bobby loves chocolate. He frequently goes to his favorite 5 &amp; 10 store, Penny Auntie, to buy them. They are having a promotion at Penny Auntie. If Bobby saves enough wrappers, he can turn them in for a free chocolate. For example, Bobby has n = 15 to spend on bars of chocolate that cost c = 3 each. He can turn in m = 2 wrappers to receive another bar. Initially, he buys 5 bars and has 5 wrappers after eating them. He turns in 4 of them, leaving him with 1, for 2 more bars. After eating those two, he has 3 wrappers, turns in 2 leaving him with 1 wrapper and his new bar. Once he eats that one, he has 2 wrappers and turns them in for another bar. After eating that one, he only has 1 wrapper, and his feast ends. Overall, he has eaten 5 + 2 + 1 + 1 = 9 bars. Function DescriptionComplete the chocolateFeast function in the editor below. It must return the number of chocolates Bobby can eat after taking full advantage of the promotion. chocolateFeast has the following parameter(s): n: an integer representing Bobby’s initial amount of money c: an integer representing the cost of a chocolate bar m: an integer representing the number of wrappers he can turn in for a free bar Note: Little Bobby will always turn in his wrappers if he has enough to get a free chocolate. Input FormatThe first line contains an integer, t, denoting the number of test cases to analyze. Each of the next t lines contains three space-separated integers: n, c, and m. They represent money to spend, cost of a chocolate, and the number of wrappers he can turn in for a free chocolate. Constraints 1 &lt;= t &lt;= 1000 2 &lt;= n &lt;= 105 1 &lt;= c &lt;= n 2 &lt;= m &lt;= n Output FormatFor each trip to Penny Auntie, print the total number of chocolates Bobby eats on a new line. Sample Input1234310 2 512 4 46 2 2 Sample Output123635 ExplanationBobby makes the following 3 trips to the store: He spends his 10 dollars on 5 chocolates at 2 dollars apiece. He then eats them and exchanges all 5 wrappers to get 1 more.He eats 6 chocolates. He spends his 12 dollars on 3 chocolates at 4 dollars apiece. He has 3 wrappers, but needs 4 to trade for his next chocolate.He eats 3 chocolates. He spends 6 dollars on 3 chocolates at 2 dollars apiece. He then exchanges 2 of the 3 wrappers for 1 additional piece. Next, he uses his third leftover chocolate wrapper from his initial purchase with the wrapper from his trade-in to do a second trade-in for 1 more piece. At this point he has 1 wrapper left, which is not enough to perform another trade-in. He eats 5 chocolates. Solution1234567891011121314151617// Complete the chocolateFeast function below.function chocolateFeast(n, c, m) { let count = 0; let value = Math.floor(n / c); while (true) { let focus = value + (count % m); count += value; if (focus &lt; m) break; value = Math.floor(focus / m); } return count;}","link":"/2019/08/08/chocolateFeast/"},{"title":"Super Reduced String","text":"Steve has a string of lowercase characters in range ascii[‘a’..’z’]. He wants to reduce the string to its shortest length by doing a series of operations. In each operation he selects a pair of adjacent lowercase letters that match, and he deletes them. For instance, the string aab could be shortened to b in one operation. Steve’s task is to delete as many characters as possible using this method and print the resulting string. If the final string is empty, print Empty String Function DescriptionComplete the superReducedString function in the editor below. It should return the super reduced string or Empty String if the final string is empty. superReducedString has the following parameter(s): s: a string to reduce Input FormatA single string, s. Constraints 1 &lt;= |s| &lt;= 100 Output FormatIf the final string is empty, print Empty String; otherwise, print the final non-reducible string. Sample Input 01aaabccddd Sample Output 01abd Explanation 0Steve performs the following sequence of operations to get the final string: 1aaabccddd → abccddd → abddd → abd Sample Output 11Empty String Explanation 11aa → Empty String Sample Input 21baab Sample Output 21Empty String Explanation 21baab → bb → Empty String Solution1234567891011121314// Complete the superReducedString function below.function superReducedString(s) { const values = [...s].reduce((target, item) =&gt; { if (target.slice(-1)[0] !== item) { return [...target, item]; } target.pop(item); return target; }, []); return values.length &gt; 0 ? values.join('') : 'Empty String';}","link":"/2019/08/03/superReducedString/"},{"title":"Jumping on the Clouds: Revisited","text":"Aerith is playing a cloud hopping game. In this game, there are sequentially numbered clouds that can be thunderheads or cumulus clouds. Her character must jump from cloud to cloud until it reaches the start again. To play, Aerith is given an array of clouds, c and an energy level e = 100. She starts from c[0] and uses 1 unit of energy to make a jump of size k to cloud c[(i + k) % n]. If Aerith lands on a thundercloud, c[i] = 1, her energy (e) decreases by 2 additional units. The game ends when Aerith lands back on cloud 0. Given the values of n, k, and the configuration of the clouds as an array c, can you determine the final value of e after the game ends? For example, give c = [0, 0, 1, 0] and k = 2, the indices of her path are 0 -&gt; 2 -&gt; 0. Her energy level reduces by 1 for each jump to 98. She landed on one thunderhead at an additional cost of 2 energy units. Her final energy level is 96. Note: Recall that % refers to the modulo operation. In this case, it serves to make the route circular. If Aerith is at c[n -1] and jumps 1, she will arrive at c[0]. Function DescriptionComplete the jumpingOnClouds function in the editor below. It should return an integer representing the energy level remaining after the game. jumpingOnClouds has the following parameter(s): c: an array of integers representing cloud types k: an integer representing the length of one jump Input FormatThe first line contains two space-separated integers, n and k, the number of clouds and the jump distance.The second line contains n space-separated integers c[i] where . Each cloud is described as follows: If c[i] = 0, then cloud i is a cumulus cloud. If c[i] = 1, then cloud i is a thunderhead. Constraints n % k = 0 Output FormatPrint the final value of e on a new line. Sample Input128 20 0 1 0 0 1 1 0 Sample Output192 ExplanationIn the diagram below, red clouds are thunderheads and purple clouds are cumulus clouds: Observe that our thunderheads are the clouds numbered 2, 5, and 6. Aerith makes the following sequence of moves: Move: 0 -&gt; 2, Energy: e = 100 - 1 - 2 = 97. Move: 2 -&gt; 4, Energy: e = 97 - 1 = 96. Move: 4 -&gt; 6, Energy: e = 96 - 1 - 2 = 93. Move: 6 -&gt; 0, Energy: e = 93 - 1 = 92. Solution123456789101112131415161718// Complete the jumpingOnClouds function below.function jumpingOnClouds(c, k) { let result = 100; let count = 0; let index; while (index !== 0 &amp;&amp; result &gt;= 0) { !count &amp;&amp; (index = 0); index = (index + k) % c.length; result = result - (c[index] &gt; 0 ? 3 : 1); count++; } return result;}","link":"/2019/08/10/jumpingCloudsRevisited/"},{"title":"Cut the sticks","text":"You are given a number of sticks of varying lengths. You will iteratively cut the sticks into smaller sticks, discarding the shortest pieces until there are none left. At each iteration you will determine the length of the shortest stick remaining, cut that length from each of the longer sticks and then discard all the pieces of that shortest length. When all the remaining sticks are the same length, they cannot be shortened so discard them. Given the lengths of n sticks, print the number of sticks that are left before each iteration until there are none left. For example, there are n = 3 sticks of lengths arr = [1,2,3]. The shortest stick length is 1, so we cut that length from the longer two and discard the pieces of length 1. Now our lengths are arr = [1,2]. Again, the shortest stick is of length 1, so we cut that amount from the longer stick and discard those pieces. There is only one stick left, arr = [1], so we discard that stick. Our lengths are answer = [3,2,1]. Function DescriptionComplete the cutTheSticks function in the editor below. It should return an array of integers representing the number of sticks before each cut operation is performed. cutTheSticks has the following parameter(s): arr: an array of integers representing the length of each stick Input FormatThe first line contains a single integer n, the size of arr. The next line contains n space-separated integers, each an arr[i] where each value represents the length of the ith stick. Output FormatFor each operation, print the number of sticks that are present before the operation on separate lines. Constraints 1 &lt;= n &lt;= 1000 1 &lt;= arr[i] &lt;= 1000 Sample Input 01265 4 4 2 2 8 Sample Output 012346421 Explanation 0123456sticks-length length-of-cut sticks-cut5 4 4 2 2 8 2 63 2 2 _ _ 6 2 41 _ _ _ _ 4 1 2_ _ _ _ _ 3 3 1_ _ _ _ _ _ DONE DONE Sample Input 11281 2 3 4 3 3 2 1 Sample Output 112348641 Explanation 1123456sticks-length length-of-cut sticks-cut1 2 3 4 3 3 2 1 1 8_ 1 2 3 2 2 1 _ 1 6_ _ 1 2 1 1 _ _ 1 4_ _ _ 1 _ _ _ _ 1 1_ _ _ _ _ _ _ _ DONE DONE Solution123456789101112131415161718192021222324// Complete the cutTheSticks function below.function cutTheSticks(arr) { let result = []; while (arr.length &gt; 0) { result.push(arr.length); arr.sort((a, b) =&gt; (a - b)); let front = arr[0]; arr.reduce((target, value, index) =&gt; { arr[index] -= front; return target; }, []); let remove = arr.lastIndexOf(0) + 1; arr.splice(0, remove); } return result;}","link":"/2019/08/12/cutTheSticks/"},{"title":"Repeated String","text":"Lilah has a string, s, of lowercase English letters that she repeated infinitely many times. Given an integer, n, find and print the number of letter a’s in the first letters of Lilah’s infinite string. For example, if the string s = ‘abcac’ and n = 10, the substring we consider is abcacabcac, the first 10 characters of her infinite string. There are 4 occurrences of a in the substring. Function DescriptionComplete the repeatedString function in the editor below. It should return an integer representing the number of occurrences of a in the prefix of length n in the infinitely repeating string. repeatedString has the following parameter(s): s: a string to repeat n: the number of characters to consider Input FormatThe first line contains a single string, s. The second line contains an integer, n. Constraints 1 &lt;= |s| &lt;= 100 1 &lt;= n &lt;= 1012 For 25% of the test cases, n &lt;= 106. Output FormatPrint a single integer denoting the number of letter a’s in the first n letters of the infinite string created by repeating s infinitely many times. Sample Input 012aba10 Sample Output 017 Explanation 0The first n = 10 letters of the infinite string are abaabaabaa. Because there are 7 a’s, we print 7 on a new line. Sample Input 112a1000000000000 Sample Output 111000000000000 Explanation 1Because all of the first n = 1000000000000 letters of the infinite string are a, we print 1000000000000 on a new line. Solution123456789101112131415161718192021222324// Complete the cutTheSticks function below.function cutTheSticks(arr) { let result = []; while (arr.length &gt; 0) { result.push(arr.length); arr.sort((a, b) =&gt; (a - b)); let front = arr[0]; arr.reduce((target, value, index) =&gt; { arr[index] -= front; return target; }, []); let remove = arr.lastIndexOf(0) + 1; arr.splice(0, remove); } return result;}","link":"/2019/08/13/repeatedString/"},{"title":"Extra Long Factorials","text":"The factorial of the integer n, written n!, is defined as: n! = n x (n - 1) x (n - 2) x … x 3 x 2 x 1 Calculate and print the factorial of a given integer. For example, if n = 3, we calculate 30 x 29 x 28 x … x 3 x 2 x 1 and get 265252859812191058636308480000000. Function DescriptionComplete the extraLongFactorials function in the editor below. It should print the result and return. extraLongFactorials has the following parameter(s): n: an integer Note: Factorials of n &gt; 20 can’t be stored even in a 64-bit long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values. We recommend solving this challenge using BigIntegers. Input FormatInput consists of a single integer n Constraints 1 &lt;= n &lt;= 100 Output FormatPrint the factorial of n. Sample Input125 Sample Output115511210043330985984000000 Explanation25! = 25 x 24 x 23 x … x 3 x 2 x 1 Solution12345678910111213// Complete the extraLongFactorials function below.function extraLongFactorials(n) { let memoization = [BigInt(0), BigInt(1)]; const factorial = num =&gt; (typeof memoization[num] !== 'number') ? ((num - BigInt(1)) &gt; 0 ? (num * factorial(num - BigInt(1))) : BigInt(1) ) : memoization[num] console.log(String(factorial(BigInt(n))));}","link":"/2019/08/11/extraLongFactorials/"},{"title":"Equalize the Array","text":"Karl has an array of integers. He wants to reduce the array until all remaining elements are equal. Determine the minimum number of elements to delete to reach his goal. For example, if his array is arr = [1,2,2,3], we see that he can delete the 2 elements 1 and 3 leaving arr = [2,2]. He could also delete both twos and either the 1 or the 3, but that would take 3 deletions. The minimum number of deletions is 2. Function DescriptionComplete the equalizeArray function in the editor below. It must return an integer that denotes the minimum number of deletions required. equalizeArray has the following parameter(s): arr: an array of integers Input FormatThe first line contains an integer n, the number of elements in arr. The next line contains n space-separated integers arr[i]. Constraints 1 &lt;= n &lt;= 100 1 &lt;= arr[i] &lt;= 100 Output FormatPrint a single integer that denotes the minimum number of elements Karl must delete for all elements in the array to be equal. Sample Input1253 3 2 1 3 Sample Output12 ExplanationArray arr = [3,3,2,1,3]. If we delete arr[2] = 2 and arr[3] = 1, all of the elements in the resulting array, A` = [3,3,3], will be equal. Deleting these 2 elements is minimal. Our only other options would be to delete 4 elements to get an array of either [1] or [2]. Solution12345678910111213// Complete the equalizeArray function below.function equalizeArray(arr) { let max = 0; let values = arr.reduce((target, value, index) =&gt; { target[value] = (target[value] || 0) + 1; target[value] &gt; max &amp;&amp; (max = target[value]); return target; }, []); return arr.length - max;}","link":"/2019/08/14/equalizeArray/"},{"title":"Mac OS 개발 환경 설정 Guide","text":"Overview처음 MacOS 환경에서 접하는 FrontEnd 개발자 분들에게 개발 환경을 설정하는 방법을 소개하려 합니다.이 글을 통해 기본적인 설정을 쉽게 진행해보시기 바랍니다. (macOS Mojave 기준) System SettingFinder 숨김 폴더 및 파일 노출 설정 Finder 에서 숨겨진 폴더 또는 파일을 보여주거나 숨기고 싶을 때 아래와 같은 단축키로 제어할 수 있습니다. command + shift + . Finder 기본 폴더 설정 Finder 실행 시 기본 폴더를 Home 폴더로 설정합니다. General &gt; New Finder windows show: (home folder) 파일 확장자 보여주기 모든 파일의 확장자를 보여주는 설정은 아래와 같습니다. Advanced &gt; Show all filename extensions: 체크하세요. Requirements개발 환경 구축을 위한 필수 프로그램을 설치합니다. XcodemacOS에서 gcc, make 같은 컴파일 도구를 사용하려면 기본적으로 Homebrew 또는 명령어 라인 도구(Command Line Tools)을 먼저 설치해야 합니다. Command Line Tools는 Xcode를 설치하면 자동으로 같이 설치됩니다. 하지만, Xcode 용량이 크고 모든 사람이 IDE가 필요한 게 아니므로 명령어 도구만 따로 설치하겠습니다. new GDemo('#demo-terminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`xcode-select --install`, {onCompleteDelay: 500}) .respond(``) .end(); HomebrewHomebrew는 macOS 용 패키지 관리자로, 필요한 프로그램을 설치하는 데 용이합니다. Brew 설치Terminal을 실행 시켜 아래 명령어를 복사하여 붙여넣기 해주세요. new GDemo('#demo-terminal2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`, {onCompleteDelay: 500}) .respond(``) .end(); Brew caskCommand Line에서 명령어로 여러가지 맥용 어플리케이션을 설치하게 해주는 유틸리티 입니다. 설치가 간편합니다. 기존 설치 방법대로, 앱스토어나 해당 사이트에 접속하여 설치 파일을 다운받고 실행 시켜 마우스로 이동 할 필요없이 커맨드라인에서 간편하게 설치 가능합니다. new GDemo('#demo-terminal2-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew tap caskroom/cask;brew tap caskroom/versions;brew tap caskroom/fonts;brew tap homebrew/dupes;`, {onCompleteDelay: 500}) .respond(``) .end(); 설치목록을 저장하여 재설치를 자동화 할 수 있습니다. 새로운 기기나 환경에서 설치하거나 재설치 할 경우 목록만 있으면 많은 어플리케이션을 한번에 설치 할 수 있습니다. 아쉽게도 앱스토어에만 있는 어플들은 이렇게 설치하지 못합니다. new GDemo('#demo-terminal2-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew cask list > app_list.txt;brew cask install $(cat app_list.txt)`, {onCompleteDelay: 500}) .respond(``) .end(); git 설치Version 관리 도구로 macOS에 기본으로 설치되어 있지만 최신 버전이 아니므로 brew를 이용하여 업데이트 합니다. 아래 순서대로 우선 시 됩니다. .git/config : 이 파일은 Git 디렉토리에 있고 특정 저장소(혹은 현재 작업 중인 프로젝트)에만 적용됩니다. ~/.gitconfig : 특정 사용자에게만 적용되는 설정이다. git config –global 옵션으로 이 파일을 읽고 쓸 수 있습니다. /etc/gitconfig : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다. git config –system 옵션으로 이 파일을 읽고 쓸 수 있습니다. new GDemo('#demo-terminal3-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew install git`, {onCompleteDelay: 500}) .respond(``) .end(); 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 --global 옵션을 빼주시기 바랍니다. new GDemo('#demo-terminal3-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`git config --global user.name `, {onCompleteDelay: 500}) .respond(``) .end(); new GDemo('#demo-terminal3-3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`git config --global user.email `, {onCompleteDelay: 500}) .respond(``) .end(); iTerm2 설치iTerm2 는 기본 터미널에 기능을 확장한 무료 애플리케이션입니다. macOS에 기본으로 설치되어 있는 Terminal 대신 iTerm2를 터미널 앱으로 사용합니다. new GDemo('#demo-terminal4') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew cask install iterm2`, {onCompleteDelay: 500}) .respond(``) .end(); zsh 설치macOS 의 기본 shell은 bash 를 대체할 zsh를 설치합니다. macOS Catalina 부터 zsh을 기본 shell로 지원합니다. Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added. 컨텍스트 기반 자동완성 기능(tab) 다양하고 예쁜 테마와 플러그인 스펠링 체크 history 기능 new GDemo('#demo-terminal5') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew install zsh;chsh -s $(which zsh)`, {onCompleteDelay: 500}) .respond(``) .end(); oh-my-zsh 설치Oh my zsh 를 이용해서 테마와 플러그인들을 적용할 수 있습니다. 또한, zsh 의 기능을 확장시켜주고 편리한 개발 환경을 도와 줍니다. Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout… new GDemo('#demo-terminal6') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`, {onCompleteDelay: 500}) .respond(``) .end(); oh-my-zsh 테마 변경oh-my-zsh에서 제공하는 Themes 를 확인하고 ~/.zshrc를 열고 테마명을 지정해주면 테마를 설정 할 수 있습니다. new GDemo('#demo-teriminal7') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`ZSH_THEME=\"robbyrussell\" # 기본 테마`, {onCompleteDelay: 500}) .respond(``) .end(); NVM 설치 및 설정개발 환경이나 필요에 따라 다양한 node.js의 버전을 사용해야 하는 경우가 있습니다. NVM은 Node Version Manager로, 다양한 버전 node.js를 설치할 수 있으며 설치 한 Node version을 간단한 명령어로 전환 할 수 있습니다. brew를 통한 아래 명령어로 쉽게 설치 하세요. new GDemo('#demo-teriminal8') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew install nvm`, {onCompleteDelay: 500}) .respond(``) .end(); Node 버전 및 설치 유무 확인 new GDemo('#demo-teriminal9') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`node —version`, {onCompleteDelay: 500}) .respond(``) .end(); 이미 설치되어 있다면 아래와 같이 삭제합니다. new GDemo('#demo-teriminal9-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew uninstall --force node`, {onCompleteDelay: 500}) .respond(``) .end(); NVM 환경변수 및 설정 내용 추가 .zshrc 파일을 열어 하단에 아래 내용을 추가 한 후 저장합니다. .zshrc12345# NVMexport NVM_DIR=&quot;$HOME/.nvm&quot;. &quot;$(brew --prefix nvm)/nvm.sh&quot; .zshrc 파일을 읽어 파일 내 내용을 실행시켜 적용합니다. new GDemo('#demo-teriminal9-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`source .zshrc`, {onCompleteDelay: 500}) .respond(``) .end(); NVM을 통한 Node 설치 및 버전 전환 new GDemo('#demo-teriminal9-3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`nvm install 10.15.3;nvm use 10.15.3`, {onCompleteDelay: 500}) .respond(``) .end(); Yarn 설치수많은 개발자들은 코드의 패키지를 공유하고 이 것을 조립하여 프로젝트를 빌드하는 도구로 Package Manager를 사용합니다. 그리고 전 세계적으로 가장 인기있고 많이 쓰이는 JavaScript Package Manager는 NPM 입니다. NPM은 배포가 쉽고 종속성을 쉽게 해결할 수 있다는 장점이 있지만 패키지가 중복으로 설치될 수 있다는 단점이 있습니다. 이러한 이슈를 해결하기 위한 새로운 자바스크립트 패키지 매니저가 Yarn입니다. NPM3보다 패키지 설치 속도가 빠릅니다. JSON 포맷을 사용하지 않습니다. 오프라인 모드가 가능합니다. new GDemo('#demo-teriminal10') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew install yarn`, {onCompleteDelay: 500}) .respond(``) .end(); SSH Key 설정새로운 SSH key 생성하기 Termial을 열어 Github 이메일 주소와 함께 아래와 같이 붙여넣습니다. new GDemo('#demo-teriminal13-1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`ssh-keygen -t rsa -b 4096 -C \"\"`, {onCompleteDelay: 500}) .respond(``) .end(); 새로운 ssh key가 생성되고, “Enter a file in which to save the key,”라는 문구가 뜬다면, Enter 키를 눌러주세요. 아래와 같은 내용이 뜬다면, Enter 키를 눌러주세요. 12&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]&gt; Enter same passphrase again: [Type passphrase again] 생성된 ssh key 내용을 복사합니다. new GDemo('#demo-teriminal13-2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`pbcopy < ~/.ssh/id_rsa.pub`, {onCompleteDelay: 500}) .respond(``) .end(); Add New SSH keys on Github 에 접속하여 Title에는 userName을, Key에는 복사한 내용을 붙여넣고 추가합니다. 필요한 어플리케이션 설치 Alfred alfred는 독특한 단축키와 키스트로크 시스템을 통해 생산성을 높여줍니다. 앱을 실행하고 파일을 찾고 계산하는 것은 물론 빠르고 정확하게 맥을 제어할 수 있습니다. 사용자 설정 기능도 강력합니다. MacOS의 단점인 스폿라이트(spotlight)를 훌륭하게 보완한 앱입니다. new GDemo('#demo-teriminal11') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew cask install alfred`, {onCompleteDelay: 500}) .respond(``) .end(); Divvy divvy는 사용자가 화면 창의 크기와 위치를 마음대로 조절 할 수 있습니다. free trial version 을 사용합니다. new GDemo('#demo-teriminal12') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew cask install divvy`, {onCompleteDelay: 500}) .respond(``) .end(); 설정 &gt; 보안 및 개인정보보호에서 개인정보보호 내 손쉬운 사용을 선택합니다. 좌측 하단의 자물쇠를 클릭하여, Divvy.app 체크박스를 활성화 시켜줍니다. References Git 최초 설정 Generating a new SSH key and adding it to the ssh-agent 본격 macOS에 개발 환경 구축하기","link":"/2019/08/17/developmentEnvironmentInMac/"},{"title":"Mars Exploration","text":"Sami’s spaceship crashed on Mars! She sends a series of SOS messages to Earth for help. Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, s, determine how many letters of Sami’s SOS have been changed by radiation. For example, Earth receives SOSTOT. Sami’s original message was SOSSOS. Two of the message characters were changed in transit. Function DescriptionComplete the marsExploration function in the editor below. It should return an integer representing the number of letters changed during transmission. marsExploration has the following parameter(s): s: the string as received on Earth Input FormatThere is one line of input: a single string, s. Note: As the original message is just SOS repeated n times, s‘s length will be a multiple of 3. Constraints 1 &lt;= |s| &lt;= 99 |s| % 3 = 0 s will contain only uppercase English letters, ascii[A-Z]. Output FormatPrint the number of letters in Sami’s message that were altered by cosmic radiation. Sample Input 01SOSSPSSQSSOR Sample Output 013 Explanation 0s = SOSSPSSQSSOR, and signal length |s| = 12. Sami sent 4 SOS messages (i.e.: 12/3 = 4). 123Expected signal: SOSSOSSOSSOSRecieved signal: SOSSPSSQSSORDifference: X X X We print the number of changed letters. Sample Input 11SOSSOT Sample Output 111 Explanation 1s = SOSSOT, and signal length |s| = 6. Sami sent 2 SOS messages (i.e.: 6/3 = 2). 123Expected Signal: SOSSOS Received Signal: SOSSOTDifference: X We print the number of changed letters, which is 1. Sample Input 21SOSSOSSOS Sample Output 210 Explanation 2Since no character is altered, we print 0. Solution123456789101112131415// Complete the marsExploration function below.function marsExploration(s) { const signal = 'SOS'; let count = 0; for (let i = 0, { length } = s; i &lt; length; i += 3) { const focus = s.slice(i, i + 3); (focus[0] !== signal[0]) &amp;&amp; (count += 1); (focus[1] !== signal[1]) &amp;&amp; (count += 1); (focus[2] !== signal[2]) &amp;&amp; (count += 1); } return count;}","link":"/2019/08/18/marsExploration/"},{"title":"Forming a Magic Square","text":"We define a magic square to be an n X n matrix of distinct positive integers from 1 to n2 where the sum of any row, column, or diagonal of length n is always equal to the same number: the magic constant. You will be given a 3 X 3 matrix s of integers in the inclusive range [1,9]. We can convert any digit a to any other digit b in the range [1,9] at cost of |a - b|. Given s, convert it into a magic square at minimal cost. Print this cost on a new line. Note: The resulting magic square must contain distinct integers in the inclusive range [1,9]. For example, we start with the following matrix s: 1235 3 41 5 86 4 2 We can convert it to the following magic square: 1238 3 41 5 96 7 2 This took three replacements at a cost of |5 - 8| + |8 - 9| + |4 - 7| = 7. Function DescriptionComplete the formingMagicSquare function in the editor below. It should return an integer that represents the minimal total cost of converting the input square to a magic square. formingMagicSquare has the following parameter(s): s: a 3 X 3 array of integers Input FormatEach of the lines contains three space-separated integers of row s[i]. Constraints Output FormatPrint an integer denoting the minimum cost of turning matrix s into a magic square. Sample Input 01234 9 23 5 78 1 5 Sample Output 011 Explanation 0If we change the bottom right value, s[2][2], from 5 to 6 at a cost of |6 - 5| = 1, s becomes a magic square at the minimum possible cost. Sample Input 11234 8 24 5 76 1 6 Sample Output 114 Explanation 1Using 0-based indexing, if we make s[0][1]-&gt;9 at a cost of |9 - 8| = 1 s[1][0]-&gt;3 at a cost of |3 - 4| = 1 s[2][0]-&gt;8 at a cost of |8 - 6| = 2, then the total cost will be 1 + 1 + 2 = 4. Solution123456789101112131415161718192021// Complete the formingMagicSquare function below.function formingMagicSquare(s) { const squares = ['618753294', '816357492', '834159672', '438951276', '672159834', '276951438', '294753618', '492357816']; let min = 100; let cost = (s, squares) =&gt; { return [...s.map(value =&gt; value.join('')).join('')].reduce((target, item, index) =&gt; { target += Math.abs(+item - +squares[index]) return target; }, 0) }; squares.forEach((item, index) =&gt; { let value = cost(s, squares[index]); (value &lt; min) &amp;&amp; (min = value); }); return min;}","link":"/2019/08/06/formingMagicSquare/"},{"title":"Append and Delete","text":"You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string: Append a lowercase English alphabetic letter to the end of the string. Delete the last character in the string. Performing this operation on an empty string results in an empty string. Given an integer, k, and two strings, s and t, determine whether or not you can convert s to t by performing exactly k of the above operations on s. If it’s possible, print Yes. Otherwise, print No. For example, strings s = [a,b,c] and t = [d,e,f]. Our number of moves, k = 6. To convert s to t, we first delete all of the characters in 3 moves. Next we add each of the characters of t in order. On the 6th move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than 6 moves, we would not have succeeded in creating the new string. Function DescriptionComplete the appendAndDelete function in the editor below. It should return a string, either Yes or No. appendAndDelete has the following parameter(s): s: the initial string t: the desired string k: an integer that represents the number of operations Input FormatThe first line contains a string s, the initial string. The second line contains a string t, the desired final string. The third line contains an integer k, the number of operations. ConstraintstaumAndBday.md 1 &lt;= |s| &lt;= 100 1 &lt;= |t| &lt;= 100 1 &lt;= k &lt;= 100 s and t consisit of lowercase English alphabetic letters, ascii[a-z]. Output FormatPrint Yes if you can obtain string t by performing exactly k operations on s. Otherwise, print No. Sample Input 0123hackerhappyhackerrank9 Sample Output 01Yes Explanation 0We perform 5 delete operations to reduce string s to hacker. Next, we perform 4 append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert s to t by performing exactly k = 9 operations, we print Yes. Sample Input 1123abaaba7 Sample Output 11Yes Explanation 1We perform 4 delete operations to reduce string s to the empty string (recall that, though the string will be empty after 3 deletions, we can still perform a delete operation on an empty string to get the empty string). Next, we perform 3 append operations (i.e., a, b, and a). Because we were able to convert s to t by performing exactly k = 7 operations, we print Yes. Sample Input 2123ashleyash2 Sample Output 21No Explanation 2To convert ashley to ash a minimum of 3 steps are needed. Hence we print No as answer. Solution12345678910111213141516// Complete the appendAndDelete function below.function appendAndDelete(s, t, k) { let ready = true; let total = s.length + t.length; let count = new Array(Math.min(t.length, s.length)).fill(0).reduce((target, item, index) =&gt; { (ready &amp;&amp; Object.is([...s][index], [...t][index])) ? target++ : (ready = false); return target; }, 0); return ((total - 2 * count) % 2 == k % 2) || (total &lt;= k) ? (((total - 2 * count) &gt; k) ? 'No' : 'Yes') : 'No';}","link":"/2019/08/19/appendAndDelete/"},{"title":"Jumping on the Clouds","text":"Emma is playing a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus. She can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus 1 or 2. She must avoid the thunderheads. Determine the minimum number of jumps it will take Emma to jump from her starting postion to the last cloud. It is always possible to win the game. For each game, Emma will get an array of clouds numbered 0 if they are safe or 1 if they must be avoided. For example, c = [0,1,0,0,0,1,0] indexed from 0…6. The number on each cloud is its index in the list so she must avoid the clouds at indexes 1 and 5. She could follow the following two paths: 0 -&gt; 2 -&gt; 4 -&gt; 6 or 0 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6. The first path takes 3 jumps while the second takes 4. Function DescriptionComplete the jumpingOnClouds function in the editor below. It should return the minimum number of jumps required, as an integer. jumpingOnClouds has the following parameter(s): c: an array of binary integers Input FormatThe first line contains an integer n, the total number of clouds. The second line contains n space-separated binary integers describing clouds c[i] where 0 &lt;= i &lt; n. Constraints 2 &lt;=n &lt;= 100 ![]() c[0] = c[n - 1] = 0 Output FormatPrint the minimum number of jumps needed to win the game. Sample Input 01270 0 1 0 0 1 0 Sample Output 014 Explanation 0Emma must avoid c[2] and c[5]. She can win the game with a minimum of 4 jumps: Sample Input 11260 0 0 0 1 0 Sample Output 113 Explanation 1The only thundercloud to avoid is c[4]. Emma can win the game in 3 jumps: Solution12345678910111213141516// Complete the jumpingOnClouds function below.function jumpingOnClouds(c) { let count = 0; let index = 0; while (index &lt; c.length - 1) { index = ((index + 2 &lt; c.length) &amp;&amp; c[index + 2] != 1) ? index + 2 : index + 1; count += 1; } return count;}","link":"/2019/08/09/jumpingClouds/"},{"title":"Non-Divisible Subset","text":"Given a set of distinct integers, print the size of a maximal subset of S where the sum of any 2 numbers in S‘ is not evenly divisible by k. For example, the array S = [19,10,12,10,24,25,22] and k = 4. One of the arrays that can be created is S‘[0] = [10,12,25]. Another is S‘[1] = [19,22,24]. After testing all permutations, the maximum length solution array has 3 elements. Function DescriptionComplete the nonDivisibleSubset function in the editor below. It should return an integer representing the length of the longest subset of S meeting the criteria. nonDivisibleSubset has the following parameter(s): S: an array of integers k: an integer Input FormatThe first line contains 2 space-separated integers, n and k, the number of values in S and the non factor.The second line contains n space-separated integers describing S[i], the unique values of the set. Constraints 1 &lt;= n &lt;= 105 1 &lt;= k &lt;= 100 1 &lt;= S[i] &lt;= 109 All of the given numbers are distinct. Output FormatPrint the size of the largest possible subset (S‘). Sample Input124 31 7 2 4 Sample Output13 ExplanationThe sums of all permutations of two elements from S` = {1,7,2,4} are: 1234561 + 7 = 81 + 2 = 31 + 4 = 57 + 2 = 97 + 4 = 112 + 4 = 6 We see that only S` = {1,7,4} will not ever sum to a multiple of k = 3. Solution123456789101112131415161718192021222324252627282930313233/* * Complete the 'nonDivisibleSubset' function below. * * The function is expected to return an INTEGER. * The function accepts following parameters: * 1. INTEGER k * 2. INTEGER_ARRAY s */function nonDivisibleSubset(k, s) { // Write your code here let values = new Array(k).fill(0); let result = 0; s.reduce((target, item, index) =&gt; { values[item % k] += 1; return target; }, []); for (let i of Array.from( { length: (k + 1) / 2 - 1 }, (value, index) =&gt; index + 1 )) { result += Math.max(values[i], values[k - i]); } !(k % 2) &amp;&amp; !!values[k / 2] &amp;&amp; (result += 1); values[0] &amp;&amp; (result += 1); return result;}","link":"/2019/09/24/non-DivisibleSubset/"},{"title":"Taum and B'day","text":"Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy b black gifts and w white gifts. The cost of each black gift is bc units. The cost of every white gift is wc units. The cost of converting each black gift into white gift or vice versa is units. Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts. For example, if Taum wants to buy b = 3 black gifts and w = 5 white gifts at a cost of bc = 3, wc = 4 and conversion cost z = 1, we see that he can buy a black gift for 3 and convert it to a white gift for 1, making the total cost of each white gift 4. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is 3 * 3 + 5 * 4 = 29. Function DescriptionComplete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts. taumBday has the following parameter(s): b: the number of black gifts w: the number of white gifts bc: the cost of a black gift wc: the cost of a white gift z: the cost to convert one color gift to the other color Input FormatThe first line will contain an integer t, the number of test cases. The next t pairs of lines are as follows: The first line contains the values of integers b and w. The next line contains the values of integers bc, wc, and z. Constraints1 &lt;= t &lt;= 100 &lt;= b,w,bc,wc,z &lt;= 109 Output Formatt lines, each containing an integer: the minimum amount of units Taum needs to spend on gifts. Sample Input1234567891011510 101 1 15 92 3 43 69 1 17 74 2 13 31 9 2 Sample Output123452037123512 Explanation Test Case #01: Since black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be: b * bc + w * wc = 10 * 1 + 10 * 1 = 20. Test Case #02: Again, we can’t decrease the cost of black or white gifts by converting colors. is too high. We will buy gifts at their original prices, so the cost of buying all gifts will be: b * bc + w * wc = 5 * 2 + 9 * 3 = 10 + 27 = 37. Test Case #03: Since bc &gt; wc + z, we will buy b + w = 3 + 6 = 9 white gifts at their original price of 1. b = 3 of the gifts must be black, and the cost per conversion, z = 1. Total cost is 9 * 1 + 3 * 1 = 12. Test Case #04: Similarly, we will buy w = 7 white gifts at their original price, wc = 2. For black gifts, we will first buy white ones and color them to black, so that their cost will be reduced to wc + z = 2 + 1 = 3. So cost of buying all gifts will be: 7 * 3 + 7 * 2 = 35. Test Case #05: We will buy black gifts at their original price, bc = 1. For white gifts, we will first black gifts worth bc = 1 unit and color them to white for z = 2 units. The cost for white gifts is reduced to wc = bc + z = 2 + 1 =3 units. The cost of buying all gifts will be: 3 * 1 + 3 * 3 = 3 + 9 = 12. Solution1234567891011121314151617181920212223242526/* * Complete the 'taumBday' function below. * * The function is expected to return a LONG_INTEGER. * The function accepts following parameters: * 1. INTEGER b * 2. INTEGER w * 3. INTEGER bc * 4. INTEGER wc * 5. INTEGER z */function taumBday(b, w, bc, wc, z) { // Write your code here const gifts = BigInt(b) + BigInt(w); const whiteGifts = gifts * BigInt(wc) + (BigInt(b) * BigInt(z)); const blackGifts = gifts * BigInt(bc) + (BigInt(w) * BigInt(z)); let min = BigInt(b) * BigInt(bc) + BigInt(w) * BigInt(wc); (blackGifts &lt; min) &amp;&amp; (min = blackGifts); (whiteGifts &lt; min) &amp;&amp; (min = whiteGifts); return min;}","link":"/2019/08/21/taumAndBday/"},{"title":"Queen's Attack II","text":"You will be given a square chess board with one queen and a number of obstacles placed on it. Determine how many squares the queen can attack. A queen is standing on an n x n chessboard. The chess board’s rows are numbered from 1 to n, going from bottom to top. Its columns are numbered from 1 to n, going from left to right. Each square is referenced by a tuple, (r, c), describing the row, r, and column, c, where the square is located. The queen is standing at position (rq, cq). In a single move, she can attack any square in any of the eight directions (left, right, up, down, and the four diagonals). In the diagram below, the green circles denote all the cells the queen can attack from (4, 4): There are obstacles on the chessboard, each preventing the queen from attacking any square beyond it on that path. For example, an obstacle at location (3, 5) in the diagram above prevents the queen from attacking cells (3, 5), (2, 6), and (1, 7): Given the queen’s position and the locations of all the obstacles, find and print the number of squares the queen can attack from her position at . In the board above, there are such squares. Function DescriptionComplete the queensAttack function in the editor below. It should return an integer that describes the number of squares the queen can attack. queensAttack has the following parameters: n: an integer, the number of rows and columns in the board k: an integer, the number of obstacles on the board r_q: integer, the row number of the queen’s position c_q: integer, the column number of the queen’s position obstacles: a two dimensional array of integers where each element is an array of 2 integers, the row and column of an obstacle Input FormatThe first line contains two space-separated integers n and k, the length of the board’s sides and the number of obstacles.The next line contains two space-separated integers rq and cq, the queen’s row and column position.Each of the next k lines contains two space-separated integers r[i] and c[i], the row and column position of obstacle[i]. Constraints 1 &lt;= n &lt;= 105 1 &lt;= k &lt;= 105 A single cell may contain more than one obstacle. There will never be an obstacle at the position where the queen is located. SubtasksFor 30% of the maximum score: 0 &lt; n &lt;= 100 0 &lt;= k &lt;= 100 For 55% of the maximum score: 0 &lt; n &lt;= 1000 0 &lt;= k &lt;= 105 Output FormatPrint the number of squares that the queen can attack from position (rq, cq) Sample Input 0124 04 4 Sample Output 019 Explanation 0The queen is standing at position (4, 4) on a 4 x 4 chessboard with no obstacles: Sample Input 1123455 34 35 54 22 3 Sample Output 1110 Explanation 1The queen is standing at position (4, 3) on a 5 x 5 chessboard with k = 3 obstacles: The number of squares she can attack from that position is 10. Sample Input 2121 01 1 Sample Output 210 Explanation 2Since there is only one square, and the queen is on it, the queen can move 0 squares. Solution1234567891011121314151617181920212223242526272829303132333435363738// Complete the queensAttack function below.function queensAttack(n, k, r_q, c_q, obstacles) { let up = n - r_q; let right = n - c_q; let down = r_q - 1; let left = c_q - 1; let up_left = Math.min(up, left); let up_right = n - Math.max(c_q, r_q); let down_left = Math.min(c_q, r_q) - 1; let down_right = Math.min(r_q - 1, n - c_q); for (let i of Array.from({ length: k }, (value, index) =&gt; index)) { let { 0: r_o, 1: c_o } = obstacles[i]; r_o == r_q &amp;&amp; (c_o &gt; c_q ? (up = Math.min(up, c_o - c_q - 1)) : (down = Math.min(down, c_q - c_o - 1))); c_o == c_q &amp;&amp; (r_o &gt; r_q ? (right = Math.min(right, r_o - r_q - 1)) : (left = Math.min(left, r_q - r_o - 1))); Math.abs(c_o - c_q) == Math.abs(r_o - r_q) &amp;&amp; (c_o &gt; c_q &amp;&amp; r_o &gt; r_q &amp;&amp; (up_right = Math.min(up_right, c_o - c_q - 1)), c_o &gt; c_q &amp;&amp; r_o &lt; r_q &amp;&amp; (down_right = Math.min(down_right, c_o - c_q - 1)), c_o &lt; c_q &amp;&amp; r_o &gt; r_q &amp;&amp; (up_left = Math.min(up_left, c_q - c_o - 1)), c_o &lt; c_q &amp;&amp; r_o &lt; r_q &amp;&amp; (down_left = Math.min(down_left, c_q - c_o - 1))); } return right + left + up + down + down_left + up_left + down_right + up_right;}","link":"/2019/09/25/queensAttackII/"},{"title":"ACM ICPC Team","text":"There are a number of people who will be attending ACM-ICPC World Finals. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not. For example, given three attendees’ data as follows: 123101011111000010 These are all possible teams that can be formed: 1234Members Subjects(1,2) [1,2,3,4,5](1,3) [1,3,4,5](2,3) [1,2,3,4] In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects. Function DescriptionComplete the acmTeam function in the editor below. It should return an integer array with two elements: the maximum number of topics any team can know and the number of teams that can be formed that know that maximum number of topics. acmTeam has the following parameter(s): topic: a string of binary digits Input FormatThe first line contains two space-separated integers n and m, where n represents the number of attendees and m represents the number of topics. Each of the next n lines contains a binary string of length m. If the ith line’s jth character is 1, then the ith person knows the jth topic. Constraints2 &lt;= n &lt;= 5001 &lt;= m &lt;= 500 Output FormatOn the first line, print the maximum number of topics a 2-person team can know.On the second line, print the number of ways to form a 2-person team that knows the maximum number of topics. Sample Input123454 510101111001101000101 Sample Output1252 ExplanationCalculating topics known for all permutations of 2 attendees we get: (1,2) -&gt; 4(1,3) -&gt; 5(1,4) -&gt; 3(2,3) -&gt; 4(2,4) -&gt; 4(3,4) -&gt; 5 The 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal. Solution1234567891011121314151617181920212223242526272829303132333435363738// Complete the acmTeam function below.function acmTeam(topic) { let results = []; let range = topic.length - 1; for (let i of Array.from({ length: range }, (value, index) =&gt; index)) { results.push( ...Array.from( { length: range - i }, (value, index) =&gt; index + 1 + i ).reduce((target, compare) =&gt; { target.push( [...topic[i]].reduce((target, item, valueIndex) =&gt; { (!!+item || !!+topic[compare][valueIndex]) &amp;&amp; target++; return target; }, 0) ); return target; }, []) ); } return results .sort() .reverse() .reduce( (target, item, index) =&gt; { !index &amp;&amp; (target[0] = item); target[0] == item &amp;&amp; target[1]++; return target; }, [0, 0] );}","link":"/2019/09/26/acmICPCTeam/"},{"title":"Encryption","text":"An English text needs to be encrypted using the following encryption scheme. First, the spaces are removed from the text. Let L be the length of this text. Then, characters are written into a grid, whose rows and columns have the following constraints: For example, the sentence s = if man was meant to stay on the ground god would have given us roots, after removing spaces is 54 characters long. is between 7 and 8, so it is written in the form of a grid with 7 rows and 8 columns. 1234567ifmanwasmeanttostayonthegroundgodwouldhavegivenusroots Ensure that If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e. . The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is: 1imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau You will be given a message to encode and print. Function DescriptionComplete the encryption function in the editor below. It should return a single string composed as described. encryption has the following parameter(s): s: a string to encrypt Input FormatOne line of text, the string S Constraints s is comprised only of characters in the range ascii[a-z]. Output FormatPrint the encoded message on one line as described. Sample Input1haveaniceday Sample Output 01hae and via ecy Explanation 0L = 12, is between 3 and 4. Rewritten with 3 rows and 4 columns: 123haveaniceday Sample Input 11feedthedog Sample Output 11fto ehg ee dd Explanation 1L = 10, is between 3 and 4. Rewritten with 3 rows and 4 columns: 123feedthedog Sample Input 21chillout Sample Output 21clu hlt io Explanation 2L = 8, is between 2 and 3. Rewritten with 3 columns and 3 rows (2 * 3 = 6 &lt; 8 so we have to use 3 x 3.) 123chillout Solution123456789101112// Complete the encryption function below.function encryption(s) { let value = Math.ceil(Math.sqrt([...s].length)); return [...s] .reduce((target, item, index) =&gt; { target[index % value] += item; return target; }, new Array(value).fill(\"\")) .join(\" \");}","link":"/2019/09/27/encryption/"},{"title":"Modified Kaprekar Numbers","text":"A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with. Consider a positive whole number n with d digits. We square n to arrive at a number that is either 2 x d digits long or (2 x d) - 1 digits long. Split the string representation of the square into two parts, l and r. The right hand part, r must be d digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get n. For example, if n = 5, d = 1 then n2 = 25. We split that into two strings and convert them back to integers 2 and 5. We test , so this is not a modified Kaprekar number. If n = 9, still d = 1, and n2 = 81. This gives us 1 + 8 = 9, the original n. Note: r may have leading zeros. Here’s an explanation from Wikipedia about the ORIGINAL Kaprekar Number (spot the difference!): In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45² = 2025 and 20+25 = 45. Given two positive integers p and q where p is lower than q, write a program to print the modified Kaprekar numbers in the range between p and q, inclusive. Function DescriptionComplete the kaprekarNumbers function in the editor below. It should print the list of modified Kaprekar numbers in ascending order. kaprekarNumbers has the following parameter(s): p: an integer q: an integer Input FormatThe first line contains the lower integer limit p. The second line contains the upper integer limit q. Note: Your range should be inclusive of the limits. Constraints0 &lt; p &lt; q &lt; 100000 Output FormatOutput each modified Kaprekar number in the given range, space-separated on a single line. If no modified Kaprekar numbers exist in the given range, print INVALID RANGE. Sample Input121100 Sample Output11 9 45 55 99 Explanation1, 9, 45, 55, and 99 are the Kaprekar Numbers in the given range. Solution1234567891011121314151617181920// Complete the kaprekarNumbers function below.function kaprekarNumbers(p, q) { let result = Array.from( { length: q - p + 1 }, (value, index) =&gt; index + p ).reduce((target, value, index) =&gt; { let square = `${value ** 2}`; let right = +square.substring( square.length - `${value}`.length, square.length ); let left = +square.substring(0, square.length - `${value}`.length); left + right == value &amp;&amp; target.push(value); return target; }, []); console.log(!result.length ? \"INVALID RANGE\" : result.join(\" \"));}","link":"/2019/10/01/modifiedKaprekarNumbers/"},{"title":"Beautiful Triplets","text":"Given a sequence of integers a, a triplet (a[i],a[j],a[k]) is beautiful if: i &lt; j &lt; k a[j] - a[i] = a[k] - a[j] = d Given an increasing sequenc of integers and the value of d, count the number of beautiful triplets in the sequence. For example, the sequence arr = [2,2,3,4,5] and d = 1. There are three beautiful triplets, by index: [i,j,k]=[0,2,3], [1,2,3], [2,3,4]. To test the first triplet, arr[j] - arr[i] = 3 - 2 = 1 and arr[k] - arr[j] = 4 - 3 = 1. Function DescriptionComplete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence. beautifulTriplets has the following parameters: d: an integer arr: an array of integers, sorted ascending Input FormatThe first line contains 2 space-separated integers n and d, the length of the sequence and the beautiful difference.The second line contains n space-separated integers arr[i]. Constraints 1 &lt;= n &lt;= 104 1 &lt;= d &lt;= 20 0 &lt;= arr[i] &lt;= 2 x 104 arr[i] &gt; arr[i - 1] Output FormatPrint a single line denoting the number of beautiful triplets in the sequence. Sample Input127 31 2 4 5 7 8 10 Sample Output13 ExplanationThe input sequence is 1,2,4,5,7,8,10, and our beautiful difference d = 3. There are many possible triplets (arr[i],arr[j],arr[k]), but our only beautiful triplets are (1,4,7), (4,7,10) and (2,5,8) by value not index. Please see the equations below: 7 - 4 = 4 - 1 = 3 = d10 - 7 = 7 - 4 = 3 = d8 - 5 = 5 - 2 = 3 = d Recall that a beautiful triplet satisfies the following equivalence relation: arr[j] - arr[i] = arr[k] - arr[j] = d where i &lt; j &lt; k. Solution1234567891011121314151617181920212223242526272829303132// Complete the beautifulTriplets function below.function beautifulTriplets(d, arr) { let count = arr[0]; let max = arr[arr.length - 1]; let result = 0; let { values } = new Array(arr.length).fill(0).reduce( (target, item, index) =&gt; { target[\"values\"][arr[index]] = target[\"values\"][arr[index]] ? (target[\"values\"][arr[index]] += 1) : 1; return target; }, { values: {} } ); while (count &lt;= max) { values[count] &amp;&amp; values[count + d] &amp;&amp; values[count + d * 2] &amp;&amp; (result += Math.max( values[count], values[count + d], values[count + d * 2] )); count++; } return result;}","link":"/2019/10/03/beautifulTriplets/"},{"title":"Minimum Distances","text":"We define the distance between two array values as the number of indices between the two values. Given a, find the minimum distance between any pair of equal elements in the array. If no such value exists, print -1. For example, if a = [3,2,1,2,3], there are two matching pairs of values: 3 and 2. The indices of the 3‘s are i = 0 and j = 4, so their distance is d[i,j] = |j - i| = 4. The indices of the 2‘s are i = 1 and j = 3, so their distance is d|i,j| = |j - i| = 2. Function DescriptionComplete the minimumDistances function in the editor below. It should return the minimum distance between any two matching elements. minimumDistances has the following parameter(s): a: an array of integers Input FormatThe first line contains an integer n, the size of array a.The second line contains n space-separated integers a[i]. Constraints 1 &lt;= n &lt;= 103 0 &lt;= a[i] &lt;= 105 Output FormatPrint a single integer denoting the minimum d[i,j] in a. If no such value exists, print -1. Sample Input1267 1 3 4 1 7 Sample Output13 ExplanationHere, we have two options: a[1] and a[4] and are both 1, so d[1,4] = |1 - 4| = 3. a[0] and a[5] and are both 7, so d[0,5] = |0 - 5| = 5. The answer is min(3,5) = 3. Solution1234567891011121314151617// Complete the minimumDistances function below.function minimumDistances(a) { let result = 0; for (let i of Array.from({ length: a.length }, (value, index) =&gt; index)) { for (let j of Array.from( { length: a.length }, (value, index) =&gt; index + i + 1 )) { ((a[i] === a[j] &amp;&amp; !result) || (a[i] === a[j] &amp;&amp; Math.abs(i - j) &lt; result)) &amp;&amp; (result = Math.abs(i - j)); } } return !result ? -1 : result;}","link":"/2019/10/04/minimumDistances/"},{"title":"조이스틱","text":"문제 설명조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA 조이스틱을 각 방향으로 움직이면 아래와 같습니다. 1234▲ - 다음 알파벳▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)▶ - 커서를 오른쪽으로 이동 예를 들어 아래의 방법으로 “JAZ”를 만들 수 있습니다. 1234- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.따라서 11번 이동시켜 &quot;JAZ&quot;를 만들 수 있고, 이때가 최소 이동입니다. 만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요. 제한 사항 name은 알파벳 대문자로만 이루어져 있습니다. name의 길이는 1 이상 20 이하입니다. 입출력 예 name return “JEROEN” 56 “JAN” 23 Solution 12345678910111213141516171819202122232425function solution(name) { const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; let answer = [...name].reduce((target, item, index) =&gt; { let value = letters.indexOf(item); target += value &gt; letters.length / 2 ? letters.length - value : value; return target; }, name.length - 1); for (let i of Array.from( { length: name.length }, (value, index) =&gt; name.length + index * -1 )) { let p = name.indexOf(\"A\".repeat(i)); if (-1 &lt; p &amp;&amp; p &lt;= i) { answer += p - i - 1; break; } } return answer;}","link":"/2019/10/05/joystick/"},{"title":"Bigger is Greater","text":"Lexicographical order is often known as alphabetical order when dealing with strings. A string is greater than another string if it comes later in a lexicographically sorted list. Given a word, create a new word by swapping some or all of its characters. This new word must meet two criteria: It must be greater than the original word It must be the smallest word that meets the first condition For example, given the word w = abcd, the next largest word is abdc. Complete the function biggerIsGreater below to create and return the new string meeting the criteria. If it is not possible, return no answer. Function DescriptionComplete the biggerIsGreater function in the editor below. It should return the smallest lexicographically higher string possible from the given string or no answer. biggerIsGreater has the following parameter(s): w: a string Input FormatThe first line of input contains T, the number of test cases.Each of the next T lines contains w. Constraints 1 &lt;= T &lt;= 105 1 &lt;= |w| &lt;= 100 w will contain only letters in the range ascii[a..z]. Output FormatFor each test case, output the string meeting the criteria. If no answer exists, print no answer. Sample Input 01234565abbbhefgdhckdkhc Sample Output 012345bano answerhegfdhkchcdk Explanation 0 Test case 1:ba is the only string which can be made by rearranging ab. It is greater. Test case 2:It is not possible to rearrange bb and get a greater string. Test case 3:hegf is the next string greater than hefg. Test case 4:dhkc is the next string greater than dhck. Test case 5:hcdk is the next string greater than dkhc. Sample Input 112345676lmnodcbadcbbabdcabcdfedcbabcd Sample Output 1123456lmonno answerno answeracbdabdcfedcbabdc Solution12345678910111213141516171819202122232425262728// Complete the biggerIsGreater function below.function biggerIsGreater(w) { let values = [...w]; let point1 = values.length - 1; while (point1 &gt; 0 &amp;&amp; values[point1] &lt;= values[point1 - 1]) point1--; if (!point1) return \"no answer\"; let point2 = point1; point1--; let min = values[point2]; for (let i = point1 + 2; i &lt; values.length; i++) { values[i] &lt; min &amp;&amp; values[i] &gt; values[point1] &amp;&amp; ((point2 = i), (min = values[i])); } [values[point1], values[point2]] = [values[point2], values[point1]]; return [ ...values.slice(0, point1 + 1), ...values.slice(point1 + 1, values.length).sort((x, y) =&gt; (x &gt;= y ? 1 : -1)) ].join(\"\");}","link":"/2019/09/30/biggerIsGreater/"},{"title":"Service Lane","text":"Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length. You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely. For example, there are n = 4 measurements yielding width = [2,3,2,1]. If our entry index, i = 1 and our exit, j = 2, there are two segment widths of 2 and 3 respectively. The widest vehicle that can fit through both is 2. If i = 2 and j = 4, our widths are [3,2,1] which limits vehicle width to 1. Function DescriptionComplete the serviceLane function in the editor below. It should return an array of integers representing the maximum width vehicle that can pass through each segment of the highway described. serviceLane has the following parameter(s): n: an integer denoting the size of the cases array cases: a two dimensional array of integers where each element is an array of two integers representing starting and ending indices for a segment to consider . Input FormatThe first line of input contains two integers, n and t, where n denotes the number of width measurements you will receive and t the number of test cases. The next line has n space-separated integers which represent the array width[w0, w1 …, wn-1]. The next t lines contain two integers, i and j, where i is the start index and j is the end index of the segment being considered. Constraints 2 &lt;= n &lt;= 100000 1 &lt;= t &lt;= 1000 0 &lt;= i &lt; j &lt; n 2 &lt;= j - i + 1 &lt;= min(n, 1000) 1 &lt;= width[k] &lt;= 3, where 0 &lt;= k &lt; n Output FormatFor each test case, print the number that represents the largest vehicle type that can pass through the entire segment of the service lane between indexes i and j inclusive. Sample Input12345678 52 3 1 2 3 2 3 30 34 66 73 50 7 Sample Output1234512321 ExplanationBelow is the representation of the lane: 12345678910 |HIGHWAY|Lane| -&gt; Width0: | |--| 21: | |---| 32: | |-| 13: | |--| 24: | |---| 35: | |--| 26: | |---| 37: | |---| 3 (0, 3): From index 0 through 3 we have widths 2,3,1 and 2. Nothing wider than 1 can pass all segments. (4, 6): From index 4 through 6 we have width 3,2 and 3. Nothing wider than 2 can pass all segments. (6, 7): 3, 3 -&gt; 3. (3, 5): 2, 3, 2 -&gt; 2 (0, 7): 2, 3, 1, 2, 3, 2, 3, 3 -&gt; 1. Solution123456789101112131415161718// Complete the serviceLane function below.function serviceLane(n, width, cases) { let results = []; cases.reduce((target, items) =&gt; { let min = width[items[0]]; for (let i = items[0]; i &lt;= items[1]; i++) { width[i] &lt; min &amp;&amp; (min = width[i]); } results.push(min); return target; }, []); return results;}","link":"/2019/10/07/serviceLane/"},{"title":"Lisa's Workbook","text":"Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it’s located. The format of Lisa’s book is as follows: There are n chapters in Lisa’s workbook, numbered from 1 to n. The ith chapter has arr[i] problems, numbered from 1 to arr[i]. Each page can hold up to k problems. Only a chapter’s last page of exercises may contain fewer than k problems. Each new chapter starts on a new page, so a page will never contain problems from more than one chapter. The page number indexing starts at 1. Given the details for Lisa’s workbook, can you count its number of special problems? For example, Lisa’s workbook contains arr[1] = 4 problems for chapter 1, and arr[2] = 2 problems for chapter 2. Each page can hold k = 3 problems. The first page will hold 3 problems for chapter 1. Problem 1 is on page 1, so it is special. Page 2 contains only Chapter 1, Problem 4, so no special problem is on page 2. Chapter 2 problems start on page 3 and there are 2 problems. Since there is no problem 3 on page 3, there is no special problem on that page either. There is 1 special problem in her workbook. Note: See the diagram in the Explanation section for more details. Function DescriptionComplete the workbook function in the editor below. It should return an integer that represents the number of special problems in the workbook. workbook has the following parameter(s): n: an integer that denotes the number of chapters k: an integer that denotes the maximum number of problems per page arr: an array of integers that denote the number of problems in each chapter Input FormatThe first line contains two integers n and k, the number of chapters and the maximum number of problems per page.The second line contains n space-separated integers arr[i] where arr[i] denotes the number of problems in the ith chapter. Constraints 1 &lt;= n,k,arr[i] &lt;= 100 Output FormatPrint the number of special problems in Lisa’s workbook. Sample Input125 34 2 6 1 10 Sample Output14 ExplanationThe diagram below depicts Lisa’s workbook with n = 5 chapters and a maximum of k = 3 problems per page. Special problems are outlined in red, and page numbers are in yellow squares. There are 4 special problems and thus we print the number 4 on a new line. Solution12345678910111213141516171819202122// Complete the workbook function below.function workbook(n, k, arr) { let result = 0; let page = 1; for (let i of Array.from({ length: n }, (value, index) =&gt; index)) { const problems = arr[i]; for (let j of Array.from( { length: problems }, (value, index) =&gt; index + 1 )) { j === page &amp;&amp; result++; j !== problems &amp;&amp; !(j % k) &amp;&amp; page++; } page++; } return result;}","link":"/2019/10/08/lisaWorkbook/"},{"title":"Flatland Space Stations","text":"Flatland is a country with a number of cities, some of which have space stations. Cities are numbered consecutively and each has a road of 1km length connecting it to the next city. It is not a circular route, so the first city doesn’t connect with the last city. Determine the maximum distance from any city to it’s nearest space station. For example, there are n = 3 cities and m = 1 of them has a space station, city 1. They occur consecutively along a route. City 2 is 2 - 1 = 1 unit away and city 3 is 3 - 1 = 2 units away. City 1 is 0 units from its nearest space station as one is located there. The maximum distance is 2. Function DescriptionComplete the flatlandSpaceStations function in the editor below. It should return an integer that represents the maximum distance any city is from a space station. flatlandSpaceStations has the following parameter(s): n: the number of cities c: an integer array that contains the indices of cities with a space station, 1-based indexing Input FormatThe first line consists of two space-separated integers, n and m.The second line contains m space-separated integers, the indices of each city having a space-station. These values are unordered and unique. Constraints 1 &lt;= n &lt;= 105 1 &lt;= m &lt;= n There will be at least 1 city with a space station. No city has more than one space station. Output FormatPrint an integer denoting the maximum distance that an astronaut in a Flatland city would need to travel to reach the nearest space station. Sample Input 0125 20 4 Sample Output 012 Explanation 0This sample corresponds to following graphic: The distance to the nearest space station for each city is listed below: c[0] has distance 0 km, as it contains a space station. c[1] has distance 1 km to the space station in c[0]. c[2] has distance 2 km to the space stations in c[0] and c[4]. c[3] has distance 1 km to the space station in c[4]. c[4] has distance 0 km, as it contains a space station. We then take max(0,1,2,1,0) = 2. Sample Input 1126 60 1 2 4 3 5 Sample Output 110 Explanation 1In this sample,n = m so every city has space station and we print 0 as our answer. Solution1234567891011121314151617// Complete the flatlandSpaceStations function below.function flatlandSpaceStations(n, c) { let max = 0; c.sort((a, b) =&gt; a - b); for (let i of Array.from({ length: c.length - 1 }, (value, index) =&gt; index)) { let value = +Math.ceil((c[i + 1] - c[i] - 1) / 2.0); value &gt; max &amp;&amp; (max = value); } c[0] - 0 &gt; max &amp;&amp; (max = c[0] - 0); n - 1 - c[c.length - 1] &gt; max &amp;&amp; (max = n - 1 - c[c.length - 1]); return max;}","link":"/2019/10/10/flatlandSpaceStations/"},{"title":"Fair Rations","text":"You are the benevolent ruler of Rankhacker Castle, and today you’re distributing bread. Your subjects are in a line, and some of them already have some loaves. Times are hard and your castle’s food stocks are dwindling, so you must distribute as few loaves as possible according to the following rules: Every time you give a loaf of bread to some person i, you must also give a loaf of bread to the person immediately in front of or behind them in the line (i.e., persons i + 1 or i - 1). After all the bread is distributed, each person must have an even number of loaves. Given the number of loaves already held by each citizen, find and print the minimum number of loaves you must distribute to satisfy the two rules above. If this is not possible, print NO. For example, the people in line have loaves B = [4,5,6,7]. We can first give a loaf to i = 3 and i = 4 so B = [4,5,7,8]. Next we give a loaf to i = 2 and i = 3 and have B = [4,6,8,8] which satisfies our conditions. We had to distribute 4 loaves. Function DescriptionComplete the fairRations function in the editor below. It should return an integer that represents the minimum number of loaves required. fairRations has the following parameter(s): B: an array of integers that represent the number of loaves each persons starts with . Input FormatThe first line contains an integer N, the number of subjects in the bread line. The second line contains N space-separated integers B[i]. Constraints 2 &lt;= N &lt;= 1000 1 &lt;= B[i] &lt;= 10, where 1 &lt;= i &lt;= N Output FormatPrint a single integer taht denotes the minimum number of loaves that must be distributed so that every person has an even number of loaves. If it’s not possible to do this, print NO. Sample Input 01252 3 4 5 6 Sample Output 014 Explanation 0The initial distribution is (2,3,4,5,6). The requirements can be met as follows: Give 1 loaf of bread each to the second and third people so that the distribution becomes (2,3,5,5,6). Give 1 loaf of bread each to the third and fourth people so that the distribution becomes (2,3,6,6,6). Each of the N subjects has an even number of loaves after 4 loaves were distributed. Sample Input 11221 2 Sample Output 11NO Explanation 1The initial distribution is (1,2). As there are only 2 people in the line, any time you give one person a loaf you must always give the other person a loaf. Because the first person has an odd number of loaves and the second person has an even number of loaves, no amount of distributed loaves will ever result in both subjects having an even number of loaves. Solution12345678910// Complete the fairRations function below.function fairRations(B) { let count = new Array(B.length - 1).fill(0).reduce((target, item, index) =&gt; { !!(B[index] % 2) &amp;&amp; (B[index + 1]++, (target += 2)); return target; }, 0); return !(B[B.length - 1] % 2) ? count : \"NO\";}","link":"/2019/10/11/fairRations/"},{"title":"Organizing Containers of Balls","text":"David has several containers, each with a number of balls in it. He has just enough containers to sort each type of ball he has into its own container. David wants to sort the balls using his sort method. As an example, David has n = 2 containers and 2 different types of balls, both of which are numbered from 0 to n - 1 = 1. The distribution of ball types per container are described by n x n an matrix of integers, M[container][type]. For example, consider the following diagram for M = [[1, 4], [2, 3]]: In a single operation, David can swap two balls located in different containers. The diagram below depicts a single swap operation: David wants to perform some number of swap operations such that: Each container contains only balls of the same type. No two balls of the same type are located in different containers. You must perform q queries where each query is in the form of a matrix, M. For each query, print Possible on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print Impossible. Function DescriptionComplete the organizingContainers function in the editor below. It should return a string, either Possible or Impossible. organizingContainers has the following parameter(s): containter: a two dimensional array of integers that represent the number of balls of each color in each container Input FormatThe first line contains an integer q, the number of queries. Each of the next q sets of lines is as follows: The first line contains an integer n, the number of containers (rows) and ball types (columns). Each of the next n lines contains n space-separated integers describing row M[i]. Constraints 1 &lt;= q &lt;= 10 1 &lt;= n &lt;= 100 0 &lt;= M[container][type] &lt;= 109 Scoring For 33% of score, 1 &lt;= n &lt;= 1. For 100% of score, 1 &lt;= n &lt;= 100. Output FormatFor each query, print Possible on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print Impossible. Sample Input 01234567221 11 120 21 1 Sample Output 012PossibleImpossible Explanation 0We perform the following q = 2 queries: The diagram below depicts one possible way to satisfy David’s requirements for the first query: Thus, we print Possible on a new line. The diagram below depicts the matrix for the second query: No matter how many times we swap balls of type t0 and t1 and between the two containers, we’ll never end up with one container only containing type t0 and the other container only containing type t1. Thus, we print Impossible on a new line. Sample Input 1123456789231 3 12 1 23 3 330 2 11 1 12 0 0 Sample Output 112ImpossiblePossible Solution123456789101112131415161718192021222324252627282930313233343536// Complete the organizingContainers function below.function organizingContainers(container) { let result = true; let { row, col } = container.reduce( (target, items, index) =&gt; { items.reduce((itemTarget, item, subIndex) =&gt; { target[\"row\"][index] += item; target[\"col\"][subIndex] += item; return itemTarget; }, []); return target; }, { row: new Array(container.length).fill(0), col: new Array(container.length).fill(0) } ); row.sort(); col.sort(); for (let value of Array.from( { length: container.length }, (value, index) =&gt; index )) { if (row[value] !== col[value]) { result = false; break; } } return result ? \"Possible\" : \"Impossible\";}","link":"/2019/10/02/organizingContainers/"},{"title":"Halloween Sale","text":"You wish to buy video games from the famous online video game store Mist. Usually, all games are sold at the same price, p dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at p dollars, but every subsequent game you buy will be sold at exactly d dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to m dollars, after which every game you buy will cost m dollars each. For example, if p = 20, d = 3 and m = 6, then the following are the costs of the first 11 games you buy, in order: 20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6 You have s dollars in your Mist wallet. How many games can you buy during the Halloween Sale? Input FormatThe first and only line of input contains four space-separated integers p, d, m and s. Constraints 1 &lt;= m &lt;= p &lt;= 100 1 &lt;= d &lt;= 100 0 &lt;= s &lt;= 104 Output FormatPrint a single line containing a single integer denoting the maximum number of games you can buy. Sample Input 0120 3 6 80 Sample Output 016 Explanation 0We have p = 20, d = 3 and m = 6, the same as in the problem statement. We also have s = 80 dollars. We can buy 6 games since they cost 20 + 17 + 14 + 11 + 8 + 6 = 76 dollars. However, we cannot buy a 7th game. Thus, the answer is 6. Sample Input 1120 3 6 85 Sample Output 117 Explanation 1This is the same as the previous case, except this time we have s = 85 dollars. This time, we can buy 7 games since they cost 20 + 17 + 14 + 11 + 8 + 6 + 6 = 82 dollars. However, we cannot buy an 8th game. Thus, the answer is 7. Solution12345678910111213// Complete the howManyGames function below.function howManyGames(p, d, m, s) { // Return the number of games you can buy let count = 0; while (s &gt;= p) { count++; s = s - p; p = Math.max(p - d, m); } return count;}","link":"/2019/10/05/halloweenSale/"},{"title":"The Time in Words","text":"Given the time in numerals we may convert it into words, as shown below: 5:00 -&gt; five o’clock5:01 -&gt; one minute past five5:10 -&gt; ten minutes past five5:15 -&gt; quarter past five5:30 -&gt; half past five5:40 -&gt; twenty minutes to six5:45 -&gt; quarter to six5:47 -&gt; thirteen minutes to six5:28 -&gt; twenty eight minutes past At minutes = 0, use o’ clock. For 1 &lt;= minutes &lt;= 30, use past, and for 30 &lt; minutes use to. Note the space between the apostrophe and clock in o' clock. Write a program which prints the time in words for the input given in the format described. Function DescriptionComplete the timeInWords function in the editor below. It should return a time string as described. timeInWords has the following parameter(s): h: an integer representing hour of the day m: an integer representing minutes after the hour Input FormatThe first line contains h, the hours portion The second line contains m, the minutes portion Constraints 1 &lt;= h &lt;= 12 0 &lt;= m &lt; 60 Output FormatPrint the time in words as described. Sample Input 012547 Sample Output 01thirteen minutes to six Sample Input 112300 Sample Output 11three o&apos; clock Sample Input 212715 Sample Output 21quarter past seven Solution1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// Complete the timeInWords function below.function timeInWords(h, m) { let words = [ \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eightteen\", \"nineteen\", \"twenty\", \"twenty one\", \"twenty two\", \"twenty three\", \"twenty four\", \"twenty five\", \"twenty six\", \"twenty seven\", \"twenty eight\", \"twenty nine\" ]; return !m ? `${words[h]} o' clock` : `${ !(m % 30) ? \"half\" : !(m % 15) ? \"quarter\" : `${m &lt;= 30 ? words[m] : words[60 - m]} ${`minute${ m &gt; 1 ? \"s\" : \"\" }`}` } ${m &lt;= 30 ? \"past\" : \"to\"} ${words[m &lt;= 30 ? h : h + 1]}`;}","link":"/2019/10/06/timeInWords/"},{"title":"Cavity Map","text":"You are given a square map as a matrix of integer strings. Each cell of the map has a value denoting its depth. We will call a cell of the map a cavity if and only if this cell is not on the border of the map and each cell adjacent to it has strictly smaller depth. Two cells are adjacent if they have a common side, or edge. Find all the cavities on the map and replace their depths with the uppercase character X. Examplegrid = [‘989’, ‘191’, ‘111’] The grid is rearranged for clarity: 123989191111 Return: 1239891X1111 The center cell was deeper than those on its edges: [8,1,1,1]. The deep cells in the top two corners do not share an edge with the center cell, and none of the border cells is eligible. Function DescriptionComplete the cavityMap function in the editor below. cavityMap has the following parameter(s): string grid[n]: each string represents a row of the grid Returnsstring{n}: the modified grid Input FormatThe first line contains an integer , the number of rows and columns in the grid. Each of the following lines (rows) contains positive digits without spaces (columns) that represent the depth at . Constraints 1 &lt;= n &lt;= 100 Sample Input1234567STDIN Function----- --------4 grid[] size n = 41112 grid = [&apos;1112&apos;, &apos;1912&apos;, &apos;1892&apos;, &apos;1234&apos;]191218921234 Sample Output123411121X1218X21234 ExplanationThe two cells with the depth of 9 are not on the border and are surrounded on all sides by shallower cells. Their values are replaced by X. SolutionSolution 1 with JS123456789101112131415161718192021222324252627282930313233343536/* * Complete the 'cavityMap' function below. * * The function is expected to return a STRING_ARRAY. * The function accepts STRING_ARRAY grid as parameter. */function cavityMap(grid) { // Write your code here const cavities = grid.map(item =&gt; item.split('')); return cavities.reduce((target, list, index, source) =&gt; { const result = list .reduce((listTarget, item, itemIndex) =&gt; { listTarget.push( index &gt;= 1 &amp;&amp; itemIndex &gt;= 1 &amp;&amp; index &lt; source.length - 1 &amp;&amp; itemIndex &lt; list.length &amp;&amp; item &gt; source[index][itemIndex - 1] &amp;&amp; item &gt; source[index][itemIndex + 1] &amp;&amp; item &gt; source[index - 1][itemIndex] &amp;&amp; item &gt; source[index + 1][itemIndex] ? 'X' : item ); return listTarget; }, []) .join(''); target.push(result); return target; }, []);} Solution 2 with TS1234567891011121314151617181920212223242526272829303132333435/* * Complete the 'cavityMap' function below. * * The function is expected to return a STRING_ARRAY. * The function accepts STRING_ARRAY grid as parameter. */function cavityMap(grid: string[]): string[] { // Write your code here const cavities: string[][] = grid.map(item =&gt; (item || '').split('')); return cavities.reduce((target, list, index, source) =&gt; { const result = list .reduce((listTarget, item, itemIndex) =&gt; { listTarget.push( index &gt;= 1 &amp;&amp; itemIndex &gt;= 1 &amp;&amp; index &lt; source.length - 1 &amp;&amp; itemIndex &lt; list.length &amp;&amp; item &gt; source[index][itemIndex - 1] &amp;&amp; item &gt; source[index][itemIndex + 1] &amp;&amp; item &gt; source[index - 1][itemIndex] &amp;&amp; item &gt; source[index + 1][itemIndex] ? 'X' : item ); return listTarget; }, [] as string[]) .join(''); target.push(result); return target; }, [] as string[]);}","link":"/2022/09/18/cavity-map/"},{"title":"Chrome으로 Android Debugging 방법","text":"Android 디바이스의 모바일 브라우저 환경과 PC Chrome 브라우저에서는 서로 다르게 동작하거나, 다르게 화면이 보이는 경우가 있습니다.매번 배포한 후 디바이스에서 테스트하는 것은 시간이 많이 소요되며, 빠르게 이슈 파악하여 대응하기 어려워지기도 합니다.여기 PC에서 Android 디바이스의 브라우저를 디버깅할 수 있는 방법을 소개합니다. RequirementsUSB 케이블 데이터 전송 케이블 (충전 케이블 :dizzy_face:) 충전 케이블이 아니라 데이터 전송 케이블로 연결해야합니다. Android 개발자 모드 설정 Android Device &gt; 설정 &gt; 휴대전화 정보 &gt; 소프트 웨어 정보 &gt; [빌드번호] 7번 터치 Android Device &gt; 설정 &gt; 개발자 옵션 &gt; USB 디버깅 활성화 선택 ADB 설치Android SDK에 포함된 ADB(Android Debug Bridge) 를 설치해야합니다. Chrome 확장 프로그램으로 를 설치 How to DebuggingADB 실행 PC 크롬 브라우저를 실행 시켜 설치한 ADB 확장 프로그램을 실행합니다. Discover USB devices 가 체크되어 있는 지 확인합니다. PC와 Android 디바이스 USB 연결Android 디바이스와 PC를 USB 케이블로 연결합니다. 디바이스에서 USB 디버깅을 허용하겠습니까? 라는 확인 창이 뜨면 허용 을 선택합니다. PC 크롬 브라우저에서 chrome://inspect#devices 창을 새로 고침을 합니다.연결된 디바이스의 모바일 브라우저 리스트가 아래와 같이 표시된다. 디바이스 브라우저 항목 밑의 inspect 를 클릭하여 디버깅 한다. References Remote debug Android devices - Chrome Developers PC 크롬 브라우저로 Android 기기 브라우저 디버깅하기 크롬으로 안드로이드 디바이스 디버깅 하기","link":"/2021/09/02/chrome-android-debugging/"},{"title":"The Grid Search","text":"Given an array of strings of digits, try to find the occurrence of a given pattern of digits. In the grid and pattern arrays, each string represents a row in the grid. For example, consider the following grid: 12345123456789009**876543**2111**111111**1111**111111**112222222222 The pattern array is: 123876543111111111111 The pattern begins at the second row and the third column of the grid and continues in the following two rows. The pattern is said to be present in the grid. The return value should be YES or NO, depending on whether the pattern is found. In this case, return YES. Function DescriptionComplete the gridSearch function in the editor below. It should return YES if the pattern exists in the grid, or NO otherwise. gridSearch has the following parameter(s): string G[R]: the grid to search string P[r]: the pattern to search for Input FormatThe first line contains an integer t, the number of test cases. Each of the t test cases is represented as follows:The first line contains two space-separated integers R and C, the number of rows in the search grid G and the length of each row string.This is followed by R lines, each with a string of C digits that represent the grid G. The following line contains two space-separated integers, r and c, the number of rows in the pattern grid P and the length of each pattern row string.This is followed by r lines, each with a string of c digits that represent the pattern grid P. Returns string: either YES or NO Constraints 1 &lt;= t &lt;= 5 1 &lt;= R, r, C, c &lt;= 1000 0 &lt;= r &lt;= R 0 &lt;= c &lt;= C Sample Input1234567891011121314151617181920212223242526272829303132333435210 1072834558646731158619898824264338305893242229505813563384537464735302937053106601083428295646079241373 495053845353015 154004535921265601142131330986924743860828796485223569511891698871094504874962528026333887825027714849667480759752076937805117997895628064040074542725045490438099160809624108095348114458935237334757687053032141746506292708871602 29999 Sample Output12YESNO ExplanationThe first test in the input file is: 12345678910111213141510 1072834558646731158619898824264338305893242229505813563384537464735302937053106601083428295646079241373 4950538453530 The pattern is present in the larger grid as marked in bold below. 123456789107283455864673115861989882426433830589324222950581356338453746473530293705310660108342829564607924137 The second test in the input file is: 1234567891011121314151617181915 154004535921265601142131330986924743860828796485223569511891698871094504874962528026333887825027714849667480759752076937805117997895628064040074542725045490438099160809624108095348114458935237334757687053032141746506292708871602 29999 The search pattern is: 129999 This pattern is not found in the larger grid. Solution12345678910111213141516171819202122232425262728293031323334353637/* * Complete the 'gridSearch' function below. * * The function is expected to return a STRING. * The function accepts following parameters: * 1. STRING_ARRAY G * 2. STRING_ARRAY P */function gridSearch(G: string[], P: string[]): string { // Write your code here for (let i = 0, itotal = G.length - P.length; i &lt;= itotal; i++) { let indexes = []; for (let k = 0, ktotal = G[i].length - P[0].length; k &lt;= ktotal; k++) { if (G[i].slice(k, k + P[0].length) == P[0]) { indexes.push(k); } } if (indexes.length &gt; 0) { for (const index of indexes) { for (let j = i + 1, jtotal = P.length + i; j &lt; jtotal; j++) { if (G[j].slice(index, index + P[j - i].length) != P[j - i]) { break; } if (j - i + 1 == P.length) { return 'YES'; } } } } } return 'NO';}","link":"/2022/09/20/the-grid-search/"},{"title":"Happy Ladybugs","text":"Happy Ladybugs is a board game having the following properties: The board is represented by a string, b, of length n. The ith character of the string, b[i], denotes the ith cell of the board. If b[i] is an underscore (i.e., _), it means the ith cell of the board is empty. If b[i] is an uppercase English alphabetic letter (ascii[A-Z]), it means the ith cell contains a ladybug of color b[i]. String b will not contain any other characters. A ladybug is happy only when its left or right adjacent cell (i.e., ) is occupied by another ladybug having the same color.In a single move, you can move a ladybug from its current position to any empty cell.Given the values of and for games of Happy Ladybugs, determine if it’s possible to make all the ladybugs happy. For each game, return YES if all the ladybugs can be made happy through some number of moves. Otherwise, return NO. Exampleb=[YYR_B_BR] You can move the rightmost B and R to make b=[YYRRBB__BR__] and all the ladybugs are happy. Return YES. Function DescriptionComplete the happyLadybugs function in the editor below. happyLadybugs has the following parameters: string b: the initial positions and colors of the ladybugs Returns string: either YES or NO Input FormatThe first line contains an integer g, the number of games. The next g pairs of lines are in the following format: The first line contains an integer n, the number of cells on the board.The second line contains a string b that describes the n cells of the board. Constraints 1 &lt;= g,n &lt;= 100 Sample Input 012345678947RBY_YBR6X_Y__X2__6B_RRBR Sample Output 01234YESNOYESYES Explanation 0The four games of Happy Ladybugs are explained below: Initial board: After the first move: After the second move: After the third move: Now all the ladybugs are happy, so we print YES on a new line. There is no way to make the ladybug having color Y happy, so we print NO on a new line. There are no unhappy ladybugs, so we print YES on a new line. Move the rightmost B and R to form b=[BBRRR__]. Sample Input 1123456789101155AABBC7AABBC_C1_10DD__FQ_QQF6AABCBC Sample Output 112345NOYESYESYESNO Solution123456789101112131415161718192021222324252627282930313233343536373839/* * Complete the 'happyLadybugs' function below. * * The function is expected to return a STRING. * The function accepts STRING b as parameter. */function happyLadybugs(b) { // Write your code here let result = {}; let isUnderscore = false; for (let i = 0; i &lt; b.length; i++) { if (b[i] === '_') { isUnderscore = true; continue; } if (!result[b[i]]) { result[b[i]] = 0; } result[b[i]]++; } if (!isUnderscore) { for (let i = 1; i &lt; b.length - 1; i++) { if (b[i - 1] !== b[i] &amp;&amp; b[i] !== b[i + 1]) { return 'NO'; } } } for (const [key, value] of Object.entries(result)) { if (value === 1) return 'NO'; } return 'YES';}","link":"/2022/09/21/happy-ladybugs/"},{"title":"Strange Counter","text":"There is a strange counter. At the first second, it displays the number 3. Each second, the number displayed by decrements by 1 until it reaches 1. In next second, the timer resets to 2 X the initial number for the prior cycle and continues counting down. The diagram below shows the counter values for each time t in the first three cycles: Find and print the value displayed by the counter at time t. Function DescriptionComplete the strangeCounter function in the editor below. strangeCounter has the following parameter(s): int t: an integer Returns int: the value displayed at time t Input FormatA single integer, the value of t. Constraints 1 &lt;= t &lt;= 1012 Subtask 1 &lt;= t &lt;= 105 for 60% of the maximum score. Sample Input14 Sample Output16 ExplanationTime t = 4 marks the beginning of the second cycle. It is double the number displayed at the beginning of the first cycle: . This is shown in the diagram in the problem statement. Solution123456789101112131415161718/* * Complete the 'strangeCounter' function below. * * The function is expected to return a LONG_INTEGER. * The function accepts LONG_INTEGER t as parameter. */function strangeCounter(t) { // Write your code here let time = 3; while (2 * time - 2 &lt;= t) { time *= 2; } return time - (t - (time - 2));}","link":"/2022/09/22/strange-counter/"},{"title":"3D Surface Area","text":"Madison is a little girl who is fond of toys. Her friend Mason works in a toy manufacturing factory. Mason has a 2D board A of size with H rows and W columns. The board is divided into cells of size with each cell indicated by its coordinate (i,j). The cell (i,j) has an integer Aij written on it. To create the toy Mason stacks Aij number of cubes of size on the cell (i, j). Given the description of the board showing the values of Aij and that the price of the toy is equal to the 3d surface area find the price of the toy. Input FormatThe first line contains two space-separated integers H and W the height and the width of the board respectively. The next H lines contains W space separated integers. The jth integer in ith line denotes Aij. Constraints 1 &lt;= H, W &lt;= 100 Output FormatPrint the required answer, i.e the price of the toy, in one line. Sample Input 0121 11 Sample Output 016 Explanation 0 The surface area of cube is 6. Sample Input 112343 31 3 42 2 31 2 4 Sample Output 1160 Explanation 1 The object is rotated so the front row matches column 1 of the input, heights 1, 2, and 1. The front face is 1 + 2 + 1 = 4 units in area.The top is 3 units.The sides are 4 units.None of the rear faces are exposed.The underside is 3 units.The front row contributes 4 + 3 + 4 + 3 = 14 units to the surface area. Solution12345678910111213141516171819202122232425/* * Complete the 'surfaceArea' function below. * * The function is expected to return an INTEGER. * The function accepts 2D_INTEGER_ARRAY A as parameter. */function surfaceArea(A) { // Write your code here let count = 0; for (let i = 0, itotal = A.length; i &lt; itotal; i++) { for (let j = 0, jtotal = A[0].length; j &lt; jtotal; j++) { count += [ (A[i - 1] &amp;&amp; A[i - 1][j]) || 0, (A[i + 1] &amp;&amp; A[i + 1][j]) || 0, A[i][j - 1] || 0, A[i][j + 1] || 0 ].reduce((target, item) =&gt; target + Math.max(0, A[i][j] - item), 0) + 2; } } return count;}","link":"/2022/09/23/3d-surface-area/"},{"title":"iPhone Safari Debugging 방법","text":"모바일 Safari 브라우저는 MacOS 환경의 Safari 브라우저와 다른 동작 또는 화면을 보여주는 경우가 있습니다.그래서 모바일 웹 브라우저 환경에서 개발을 진행할 때마다 모바일 Safari 브라우저에서 디버깅해야 합니다.여기 모바일 Safari 브라우저 디버깅할 수 있는 방법을 소개합니다. Safari Technology PreviewMacOS 환경의 Safari 브라우저에서는 더 이상 디버깅 기능을 지원하지 않습니다.이 기능을 대체할 수 있는 Safari Technology Preview 를 설치하면 디버깅 기능 사용이 가능합니다. Setup Safari Browser 에서 Develop &gt; Get Safari Technology Preview 클릭 &gt; 다운로드 페이지 접속하여 다운받아 설치하거나, homebrew 를 통해 설치할 수 있습니다. new GDemo('#terminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`brew install cask safari-technology-preview`, {onCompleteDelay: 500}) .respond(``) .end(); iPhone SimulatoriPhone Simulator 기능을 사용하면, 모바일 웹 브라우저를 디버깅을 할 수 있습니다. Xcode 설치 Appstore에서 설치 Simulator 실행 Xcode 실행 &gt; 상단 메뉴 Xcode &gt; Open Developer Tool &gt; Simulator Simulator 실행 &gt; 상단 메뉴 File &gt; Open Simulator &gt; iOS [버전] &gt; [디바이스 선택] 선택한 디바이스 시뮬레이터가 실행됩니다. 디바이스를 소지하고 있다면, USB 연결을 통해서도 debugging이 가능합니다. 디바이스 디버깅을 위해서는 Mac과 IPhone이 동일한 계정으로 로그인 되어있어야합니다. MobileWeb Safari 디버깅 방법Simulator 에서 Safari 앱을 실행하여, 디버깅 타겟 사이트로 접속합니다. Safari Technology Preview 브라우저를 실행하고, 다음과 같이 Develop &gt; Simulator - iPhone … 를 선택합니다. → 디버깅 가능한 Web Inspector가 실행된 것을 확인 할 수 있습니다. References Safari Technology Preview Mac Safari Technology Preview 설치 및 사용","link":"/2021/09/01/iphone-safari-debugging/"},{"title":"Absolute Permutation","text":"We define P to be a permutation of the first n natural numbers in the range [1, n]. Let pos[i] denote the value at position i in permutation P using 1-based indexing. P is considered to be an absolute permutation if |pos[i] - i| = k holds true for every . Given n and k, print the lexicographically smallest absolute permutation P. If no absolute permutation exists, print -1. Examplen = 4 k = 2 Create an array of elements from 1 to n, pos = [1, 2, 3, 4]. Using based indexing, create a permutation where every |pos[i] - i| = k. It can be rearranged to [3, 4, 1, 2] so that all of the absolute differences equal k = 2: 12345pos[i] i |pos[i] - i| 3 1 2 4 2 2 1 3 2 2 4 2 Function DescriptionComplete the absolutePermutation function in the editor below. absolutePermutation has the following parameter(s): int n: the upper bound of natural numbers to consider, inclusive int k: the absolute difference between each element’s value and its index Returns int[n]: the lexicographically smallest permutation, or [-1] if there is none Input FormatThe first line contains an integer t, the number of queries.Each of the next t lines contains 2 space-separated integers, n and k. Constraints 1 &lt;= t &lt;= 10 1 &lt;= n &lt;= 105 1 &lt;= k &lt; k Sample Input123456STDIN Function----- --------3 t = 3 (number of queries)2 1 n = 2, k = 13 0 n = 3, k = 03 2 n = 3, k = 2 Sample Output1232 11 2 3-1 ExplanationTest Case 0: Test Case 1: Test Case 2: No absolute permutation exists, so we print -1 on a new line. Solution1234567891011121314151617181920212223242526272829303132333435363738/* * Complete the 'absolutePermutation' function below. * * The function is expected to return an INTEGER_ARRAY. * The function accepts following parameters: * 1. INTEGER n * 2. INTEGER k */function absolutePermutation(n, k) { // Write your code here let result = [], contain = {}, x, y; for (let i = 1; i &lt;= n; i++) { x = i - k; y = i + k; switch (true) { case x &gt; 0 &amp;&amp; x &lt;= n &amp;&amp; !contain[x]: result.push(x); contain[x] = x; break; case y &gt; 0 &amp;&amp; y &lt;= n &amp;&amp; !contain[y]: result.push(y); contain[y] = y; break; default: return [-1]; } } return result;}","link":"/2022/09/24/absolute-permutation/"},{"title":"Insertion Sort - Part 1","text":"SortingOne common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms. Insertion SortThese challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with a nearly sorted list. Insert element into sorted listGiven a sorted list with an unsorted number e in the rightmost cell, can you write some simple code to insert e into the array so that it remains sorted? Since this is a learning exercise, it won’t be the most efficient way of performing the insertion. It will instead demonstrate the brute-force method in detail. Assume you are given the array arr=[1,2,4,5,3] indexed 0…4. Store the value of arr[4]. Now test lower index values successively from 3 to 0 until you reach a value that is lower than arr[4], at arr[1] in this case. Each time your test fails, copy the value at the lower index to the current index and print your array. When the next lower indexed value is smaller than arr[4], insert the stored value at the current index and print the entire array. Examplen = 5 arr = [1,2,4,5,3] Start at the rightmost index. Store the value of arr[4] = 3. Compare this to each element to the left until a smaller value is reached. Here are the results as described: 1231 2 4 5 51 2 4 4 51 2 3 4 5 Function DescriptionComplete the insertionSort1 function in the editor below. insertionSort1 has the following parameter(s): n: an integer, the size of arr arr: an array of integers to sort Returns-None: Print the interim and final arrays, each on a new line. No return value is expected.Input Format The first line contains the integer n, the size of the array arr. The next line contains n space-separated integers arr[0]…arr[n-1]. Constraints1 &lt;= n &lt;= 1000 -10000 &lt;= arr[i] &lt;= 10000 Output FormatPrint the array as a row of space-separated integers each time there is a shift or insertion. Sample Input1252 4 6 8 3 Sample Output12342 4 6 8 82 4 6 6 82 4 4 6 82 3 4 6 8 Explanation3 is removed from the end of the array. In the st line 1st, 8 &gt; 3 so 8 is shifted one cell to the right. In the nd line 2nd, 6 &gt; 3 so 6 is shifted one cell to the right. In the rd line 3nd, 4 &gt; 3 so 4 is shifted one cell to the right. In the th line 4th, 2 &lt;&gt; 3 so 3 is placed at position . Next ChallengeIn the next Challenge, we will complete the insertion sort. Solution123456789101112131415161718192021/* * Complete the 'insertionSort1' function below. * * The function accepts following parameters: * 1. INTEGER n * 2. INTEGER_ARRAY arr */function insertionSort1(n, arr) { // Write your code here const target = arr[n - 1]; while (arr[--n - 1] &gt; target) { arr[n] = arr[n - 1]; console.log(...arr); } arr[n] = target; console.log(...arr);}","link":"/2022/09/25/insertionsort1/"},{"title":"TypeScript Basics","text":"Overview기존의 자바스크립트로 만든 프로젝트는 규모가 커지고 코드가 복잡해질수록 디버그와 테스트 단계에 검수 시간이 늘어났었습니다. 이를 극복하고자 나온 자바스크립트 대체 언어 중 하나가 TypeScript(타입스크립트)입니다. What is the TypeScript?타입스크립트는 Microsoft에서 발표한 오픈소스로, JavaScript 프로그래밍 확장(Superset) 언어 정적 타입 정적 타입을 지원하여 컴파일 단계에서 오류를 확인 가능합니다 명시적인 정적 타입 지정은 개발자의 의도를 명확하게 전달하며, 코드 가독성을 높이고 디버깅을 쉽게 할 수 있도록 도와줍니다. 도구의 지원 IDE(Integrated Development Environment)와 같은 다양한 도구의 타입 정보를 제공 받아 높은 수준의 코드 어시스트, 타입 체크, 리팩토링 등을 지원받을 수 있으며 이러한 도구의 지원은 대규모 프로젝트를 위한 필수 요소입니다. 강력한 객체지향 프로그래밍 지원 인터페이스, 제네릭 등과 같은 객체지향 프로그래밍을 지원하여 크고 복잡한 프로젝트의 코드 기반을 쉽게 구성할 수 있도록 합니다. ES6 / ES NEXT 지원 TypeScript를 이용하여 새로운 스펙의 유용한 기능을 안정적으로 도입하기에 유리합니다. (TypeScript가 ECMAScript 표준에는 포함되어 있지 않지만, 표준화가 유력한 스펙을 도입하고 있습니다.) Requirements컴파일(Compile) / 트랜스파일(Transpile) : TypeScript로 작성된 .ts 파일은 컴파일러를 이용해 JavaScript 파일로 변환해주어야 브라우저에서 동작 합니다. Setup(설치) NPM을 통한 설치 new GDemo('#terminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`npm install --save typescript`, {onCompleteDelay: 500}) .respond(` `) .end(); Yarn을 통한 설치 new GDemo('#terminal2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`yarn add typescript`, {onCompleteDelay: 500}) .respond(` `) .end(); tsconfig.json 환경설정 해당 디렉토리에서 아래 명령어를 실행하면, tsconfig.json 파일이 자동 생성됩니다. new GDemo('#terminal3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`tsc --init`, {onCompleteDelay: 500}) .respond(``) .end(); tsconfig.jsontsconfig-json12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758{\"compilerOptions\": {/_ Basic Options _/// \"incremental\": true, /_ Enable incremental compilation _/\"target\": \"ES2016\", /_ Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. _/\"module\": \"commonjs\", /_ Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. _/// \"lib\": [], /_ Specify library files to be included in the compilation. _/// \"allowJs\": true, /_ Allow javascript files to be compiled. _/// \"checkJs\": true, /_ Report errors in .js files. _/// \"jsx\": \"preserve\", /_ Specify JSX code generation: 'preserve', 'react-native', or 'react'. _/// \"declaration\": true, /_ Generates corresponding '.d.ts' file. _/// \"declarationMap\": true, /_ Generates a sourcemap for each corresponding '.d.ts' file. _/// \"sourceMap\": true, /_ Generates corresponding '.map' file. _/// \"outFile\": \"./\", /_ Concatenate and emit output to single file. _/\"outDir\": \"./dist\", /_ Redirect output structure to the directory. _/// \"rootDir\": \"./\", /_ Specify the root directory of input files. Use to control the output directory structure with --outDir. _/// \"composite\": true, /_ Enable project compilation _/// \"tsBuildInfoFile\": \"./\", /_ Specify file to store incremental compilation information _/// \"removeComments\": true, /_ Do not emit comments to output. _/// \"noEmit\": true, /_ Do not emit outputs. _/// \"importHelpers\": true, /_ Import emit helpers from 'tslib'. _/// \"downlevelIteration\": true, /_ Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. _/// \"isolatedModules\": true, /_ Transpile each file as a separate module (similar to 'ts.transpileModule'). _//_ Strict Type-Checking Options _/\"strict\": true, /_ Enable all strict type-checking options. _/// \"noImplicitAny\": true, /_ Raise error on expressions and declarations with an implied 'any' type. _/// \"strictNullChecks\": true, /_ Enable strict null checks. _/// \"strictFunctionTypes\": true, /_ Enable strict checking of function types. _/// \"strictBindCallApply\": true, /_ Enable strict 'bind', 'call', and 'apply' methods on functions. _/// \"strictPropertyInitialization\": true, /_ Enable strict checking of property initialization in classes. _/// \"noImplicitThis\": true, /_ Raise error on 'this' expressions with an implied 'any' type. _/// \"alwaysStrict\": true, /_ Parse in strict mode and emit \"use strict\" for each source file. _//_ Additional Checks _/// \"noUnusedLocals\": true, /_ Report errors on unused locals. _/// \"noUnusedParameters\": true, /_ Report errors on unused parameters. _/// \"noImplicitReturns\": true, /_ Report error when not all code paths in function return a value. _/// \"noFallthroughCasesInSwitch\": true, /_ Report errors for fallthrough cases in switch statement. _//_ Module Resolution Options _/// \"moduleResolution\": \"node\", /_ Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). _/// \"baseUrl\": \"./\", /_ Base directory to resolve non-absolute module names. _/// \"paths\": {}, /_ A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. _/// \"rootDirs\": [], /_ List of root folders whose combined content represents the structure of the project at runtime. _/// \"typeRoots\": [], /_ List of folders to include type definitions from. _/// \"types\": [], /_ Type declaration files to be included in compilation. _/// \"allowSyntheticDefaultImports\": true, /_ Allow default imports from modules with no default export. This does not affect code emit, just typechecking. _/\"esModuleInterop\": true /_ Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. _/// \"preserveSymlinks\": true, /_ Do not resolve the real path of symlinks. _/// \"allowUmdGlobalAccess\": true, /_ Allow accessing UMD globals from modules. _//_ Source Map Options _/// \"sourceRoot\": \"\", /_ Specify the location where debugger should locate TypeScript files instead of source locations. _/// \"mapRoot\": \"\", /_ Specify the location where debugger should locate map files instead of generated locations. _/// \"inlineSourceMap\": true, /_ Emit a single file with source maps instead of having a separate file. _/// \"inlineSources\": true, /_ Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. _//_ Experimental Options _/// \"experimentalDecorators\": true, /_ Enables experimental support for ES7 decorators. _/// \"emitDecoratorMetadata\": true, /_ Enables experimental support for emitting type metadata for decorators. _/}} 컴파일 및 실행 아래와 같은 sample.ts 파일을 작성 한 후, tsc 명령어를 실행합니다. src/sample.ts123const message: string = 'Hello, LunarScents!';console.log(message); 타입스크립트 CLI를 통해 코드를 컴파일 하기 위해서는 타입스크립트를 전역으로 설치하거나, 또는 아래와 같이 package.json의 build 스크립트를 작성합니다. package.json1234567891011121314{\"name\": \"typescript-sample\",\"version\": \"1.0.0\",\"main\": \"index.js\",\"license\": \"MIT\",\"dependencies\": {\"typescript\": \"^3.6.4\"},\"scripts\": {\"build\": \"tsc\"}} Basic TypesJavaScript 에서 지원하는 기본형 타입(Boolean, Number, String, Array, Null, Undefined)을 지원하며, 추가적으로 지원하는 타입들은 아래와 같습니다. 두 가지의 타입은 | 연산자를 사용합니다. Tuple 튜플 타입은 고정된 개수의 요소 타입을 알고 있지만 반드시 같을 필요는 없는 배열을 표현할 수 있도록 합니다. 예를 들어, 다음과 같은 string과 number의 쌍으로 값을 나타낼 수 있습니다 1234567// 튜플 타입 선언let x: [string, number];// 초기화x = ['hello', 10]; // 좋아요// 부정확한 초기화x = [10, 'hello']; // 오류 Enum JavaScript의 표준 데이터 타입 집합에 추가할 수 있는 유용하고 부가적인 추가 자료는 enum 입니다. 멤버 중 하나의 값을 수동으로 설정하여 이를 변경할 수 있거나, 열거 형의 모든 값을 수동으로 설정합니다.(기본적으로 enums는 0부터 시작하는 자신의 멤버 번호를 매기기를 시작합니다.) enum의 편리한 기능은 숫자 값에서 enum의 해당 값 이름으로 이동할 수 있다는 것입니다. 123456789enum Color { Red = 1, Green, Blue}let colorName: string = Color[2];console.log(colorName); // 위의 값이 2 이므로 'Green'을 표시합니다. Any 코드를 작성할 때 알지 못하는 변수의 타입을 설명해야 할 수도 있습니다. 타입 검사를 선택하지 않고 그 값이 컴파일-타임 검사를 통과하도록 하고 싶은 경우, any 타입으로 지정합니다. any 타입은 기존 JavaScript로 작업할 수 있는 강력한 방법으로 컴파일 과정에서 타입 검사를 점진적으로 실행 (opt-in) 및 중지(opt-out) 할 수 있습니다. 객체와 다른 점은 객체는 객체 타입의 변수를 사용하면 해당 객체에는 값만 할당할 수 있습니다. 1234567let notSure: any = 4;notSure.ifItExists(); // 좋아요, 런타임에 ifItExists가 존재할 수 있습니다.notSure.toFixed(); // 좋아요, toFixed는 존재합니다. (그러나 컴파일러는 체크하지 않습니다)let prettySure: Object = 4;prettySure.toFixed(); // 오류: 'Object' 타입에 'toFixed' 프로퍼티는 존재하지 않습니다. Void void는 any의 정반대이지만 조금 비슷합니다. 반환 값을 반환하지 않는 함수의 반환 타입으로 볼 수 있습니다. void 타입의 변수 선언은 undefined 또는 null 만 할당할 수 있으므로 유용하지 않습니다. 12345function warnUser(): void { console.log('This is my warning message');}let unusable: void = undefined; Never never 타입은 절대로 발생하지 않는 값의 타입을 나타냅니다. 예를 들어, 함수 표현식의 반환 타입이거나 항상 예외를 던지는 화살표 함수 표현식이거나 절대 반환하지 않는 표현식입니다. 변수는 또한 never 일 때 타입 가드에 의해 좁혀지더라도 결코 사실일 수 없으며 타입을 획득하지 못합니다. never 타입은 모든 타입의 서브 타입이며 모든 타입에 할당할 수 있습니다. 어떤 타입도 never의 서브 타입이거나 할당 가능한 타입은 아닙니다. any 조차도 never에 할당할 수 없습니다. 1234567891011121314// 반환되는 함수에는 연결할 수 없는 end-point가 있어서는 안 됩니다.function error(message: string): never { throw new Error(message);}// 추론되는 반환 타입은 절대로 없습니다.function fail() { return error('Something failed');}// 반환되는 함수에는 연결할 수 없는 end-point가 있어서는 안 됩니다.function infiniteLoop(): never { while (true) {}} Type assertions Type assertions 은 컴파일러에게 “나를 믿어, 내가 하고 있는 일을 안다”라고 말하는 방법입니다. Type assertions 은 다른 언어의 형 변환(타입캐스팅)과 비슷하지만 특별한 검사나 데이터를 재구성하지는 않습니다. 런타임에 영향을 미치지 않으며 컴파일러에서만 사용됩니다. TypeScript는 개발자가 필요한 특별한 검사를 수행했다고 가정합니다. Type assertions은 두 가지 형태를 가집니다. angle-bracket(꺾쇠괄호) 구문 123let someValue: any = 'this is a string';let strLength: number = (&lt;string&gt;someValue).length; as 구문 TypeScript를 JSX와 함께 사용할 때는 as 스타일의 assertions(단언)만 허용합니다. 123let someValue: any = 'this is a string';let strLength: number = (someValue as string).length; FunctionsInterfaceInerface 는 클래스 나 객체를 위한 타입을 지정할 때 사용하는 문법입니다. GenericsGenerics 는 타입스크립트에서 함수, 클래스, interface, type을 사용하게 될 때 여러 종류의 타입에 대하여 호환을 맞춰야 하는 상황에서 사용하는 문법입니다. References TypeScript 공식 TypeScript 5분 안에 보는 TypeScript TypeScript 소개와 개발환경 구축 2019년과 이후 JavaScript의 동향 - 라이브러리와 프레임워크 2","link":"/2020/06/05/typescriptBasics/"},{"title":"Manasa and Stones","text":"Manasa is out on a hike with friends. She finds a trail of stones with numbers on them. She starts following the trail and notices that any two consecutive stones’ numbers differ by one of two values. Legend has it that there is a treasure trove at the end of the trail. If Manasa can guess the value of the last stone, the treasure will be hers. Examplen = 2 a = 2 b = 3 She finds stones and their differences are a = 2 or b = 3. We know she starts with a 0 stone not included in her count. The permutations of differences for the two stones are [2, 2], [2, 3], [3, 2] or [3, 3]. Looking at each scenario, stones might have [2, 4], [2, 5], [3, 5] or [3, 6] on them. The last stone might have any of 4, 5 or 6 on its face. Compute all possible numbers that might occur on the last stone given a starting stone with a 0 on it, a number of additional stones found, and the possible differences between consecutive stones. Order the list ascending. Function DescriptionComplete the stones function in the editor below.stones has the following parameter(s): int n: the number of non-zero stones int a: one possible integer difference int b: another possible integer difference Returns int[]: all possible values of the last stone, sorted ascending Input FormatThe first line contains an integer , the number of test cases. Each test case contains lines: The first line contains , the number of non-zero stones found. The second line contains , one possible difference The third line contains , the other possible difference. Constraints 1 &lt;= T &lt;= 10 1 &lt;= n, a, b &lt;= 103 Sample Input123456789STDIN Function----- --------2 T = 2 (test cases)3 n = 3 (test case 1)1 a = 12 b = 24 n = 4 (test case 2)10 a = 10100 b = 100 Sample Output122 3 430 120 210 300 ExplanationWith differences 1 and 2, all possible series for the first test case are given below: 0,1,2 0,1,3 0,2,3 0,2,4 Hence the answer 2 3 4. With differences 10 and 100, all possible series for the second test case are the following: 0, 10, 20, 30 0, 10, 20, 120 0, 10, 110, 120 0, 10, 110, 210 0, 100, 110, 120 0, 100, 110, 210 0, 100, 200, 210 0, 100, 200, 300 Hence the answer 30 120 210 300. SolutionSolution 1 with JS12345678910111213141516171819202122/* * Complete the 'stones' function below. * * The function is expected to return an INTEGER_ARRAY. * The function accepts following parameters: * 1. INTEGER n * 2. INTEGER a * 3. INTEGER b */function stones(n, a, b) { // Write your code here return new Array(n) .fill(0) .map((item, index) =&gt; a * (n - index - 1) + b * index) .sort((a, b) =&gt; a - b) .reduce((target, item) =&gt; { !target.includes(item) &amp;&amp; target.push(item); return target; }, []);} Solution 2 with TS1234567891011121314151617181920212223/* * Complete the 'stones' function below. * * The function is expected to return an INTEGER_ARRAY. * The function accepts following parameters: * 1. INTEGER n * 2. INTEGER a * 3. INTEGER b */function stones(n: number, a: number, b: number): number[] { // Write your code here return new Array(n) .fill(0) .map((item: number, index: number) =&gt; a * (n - index - 1) + b * index) .sort((a, b) =&gt; a - b) .reduce((target: number[], item: number) =&gt; { // includes 문법은 ES7 (ES2016)부터 지원된다. !target.includes(item) &amp;&amp; target.push(item); return target; }, [] as number[]);}","link":"/2022/09/19/manasa-and-stones/"},{"title":"Correctness and the Loop Invariant","text":"In the previous challenge, you wrote code to perform an Insertion Sort on an unsorted array. But how would you prove that the code is correct? I.e. how do you show that for any input your code will provide the right output? Loop InvariantIn computer science, you could prove it formally with a loop invariant, where you state that a desired property is maintained in your loop. Such a proof is broken down into the following parts: Initialization: It is true (in a limited sense) before the loop runs.Maintenance: If it’s true before an iteration of a loop, it remains true before the next iteration. Termination: It will terminate in a useful way once it is finished. Insertion Sort’s InvariantSay, you have some InsertionSort code, where the outer loop goes through the whole array A: 12for(int i = 1; i &lt; A.length; i++){//insertion sort code You could then state the following loop invariant: At the start of every iteration of the outer loop (indexed with i), the subarray until ar[i] consists of the original elements that were there, but in sorted order. To prove Insertion Sort is correct, you will then demonstrate it for the three stages: Initialization - The subarray starts with the first element of the array, and it is (obviously) sorted to begin with. Maintenance - Each iteration of the loop expands the subarray, but keeps the sorted property. An element V gets inserted into the array only when it is greater than the element to its left. Since the elements to its left have already been sorted, it means V is greater than all the elements to its left, so the array remains sorted. (In Insertion Sort 2 we saw this by printing the array each time an element was properly inserted.) Termination - The code will terminate after i has reached the last element in the array, which means the sorted subarray has expanded to encompass the entire array. The array is now fully sorted. You can often use a similar process to demonstrate the correctness of many algorithms. You can see these notes for more information. ChallengeIn the InsertionSort code below, there is an error. Can you fix it? Print the array only once, when it is fully sorted. Input FormatThere will be two lines of input: s - the size of the array arr - the list of numbers that makes up the array Constraints1 &lt;= s &lt;= 1000 -1500 &lt;= V &lt;= 1500, Output FormatOutput the numbers in order, space-separated on one line. Sample Input1267 4 3 5 6 2 Sample Output12 3 4 5 6 7 ExplanationThe corrected code returns the sorted array. Solution1234567891011121314function insertionSort(ar) { for (i = 1; i &lt; ar.length; i++) { const value = ar[i]; let j = i - 1; while (j &gt;= 0 &amp;&amp; ar[j] &gt; value) { ar[j + 1] = ar[j]; j = j - 1; } ar[j + 1] = value; } return ar;}","link":"/2022/09/28/correctness-invariant/"},{"title":"Running Time of Algorithms","text":"In a previous challenge you implemented the Insertion Sort algorithm. It is a simple sorting algorithm that works well with small or mostly sorted data. However, it takes a long time to sort large unsorted data. To see why, we will analyze its running time. Running Time of AlgorithmsThe running time of an algorithm for a specific input depends on the number of operations executed. The greater the number of operations, the longer the running time of an algorithm. We usually want to know how many operations an algorithm will execute in proportion to the size of its input, which we will call N. What is the ratio of the running time of Insertion Sort to the size of the input? To answer this question, we need to examine the algorithm. Analysis of Insertion SortFor each element V in an array of N numbers, Insertion Sort compares the number to those to its left until it reaches a lower value element or the start. At that point it shifts everything to the right up one and inserts V into the array. How long does all that shifting take? In the best case, where the array was already sorted, no element will need to be moved, so the algorithm will just run through the array once and return the sorted array. The running time would be directly proportional to the size of the input, so we can say it will take N time. However, we usually focus on the worst-case running time (computer scientists are pretty pessimistic). The worst case for Insertion Sort occurs when the array is in reverse order. To insert each number, the algorithm will have to shift over that number to the beginning of the array. Sorting the entire array of N numbers will therefore take 1 + 2 + … + (N - 1) operations, which is N(N - 1)/2 (almost N2/2). Computer scientists just round that up (pick the dominant term) to N2 and say that Insertion Sort is an “N2 time” algorithm. What this meansThe running time of the algorithm against an array of N elements is N2. For 2N elements, it will be 4N2. Insertion Sort can work well for small inputs or if you know the data is likely to be nearly sorted, like check numbers as they are received by a bank. The running time becomes unreasonable for larger inputs. ChallengeCan you modify your previous Insertion Sort implementation to keep track of the number of shifts it makes while sorting? The only thing you should print is the number of shifts made by the algorithm to completely sort the array. A shift occurs when an element’s position changes in the array. Do not shift an element if it is not necessary. Function DescriptionComplete the runningTime function in the editor below. runningTime has the following parameter(s): int arr[n]: an array of integers Returns int: the number of shifts it will take to sort the array Input FormatThe first line contains the integer n, the number of elements to be sorted.The next line contains n integers of arr[arr[0]…arr[n - 1]]. Constraints1 &lt;= n &lt;= 1001 -10000 &lt;= a[i] &lt;= 10000, where Sample Input1234STDIN Function----- --------5 arr[] size n =52 1 3 1 2 arr = [2, 1, 3, 1, 2] Sample Output14 Explanation12345678Iteration Array Shifts0 2 1 3 1 21 1 2 3 1 2 12 1 2 3 1 2 03 1 1 2 3 2 24 1 1 2 2 3 1Total 4 Solution1234567891011121314151617181920212223/* * Complete the 'runningTime' function below. * * The function is expected to return an INTEGER. * The function accepts INTEGER_ARRAY arr as parameter. */function runningTime(arr) { // Write your code here let count = 0; for (let i = 0, itotal = arr.length - 1; i &lt; itotal; i++) { if (arr[i] &gt; arr[i + 1]) { let value = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = value; count++; i = -1; } } return count;}","link":"/2022/09/29/runningtime/"},{"title":"Quicksort 1 - Partition","text":"The previous challenges covered Insertion Sort, which is a simple and intuitive sorting algorithm with a running time of O(n2). In these next few challenges, we’re covering a divide-and-conquer algorithm called Quicksort (also known as Partition Sort). This challenge is a modified version of the algorithm that only addresses partitioning. It is implemented as follows: Step 1: DivideChoose some pivot element, p, and partition your unsorted array, arr, into three smaller arrays: left, right, and equal, where each element in left &lt; p, each element in right &gt; p, and each element in equal = p. Examplearr = [5, 7, 4, 3, 8] In this challenge, the pivot will always be at arr[0], so the pivot is 5. arr is divided into left = {4,3}, equal = {5}, and right = {7,8}. Putting them all together, you get {4,3,5,7,8}. There is a flexible checker that allows the elements of left and right to be in any order. For example, {3,4,5,8,7} is valid as well. Given arr and p = arr[0], partition arr into left, right, and equal using the Divide instructions above. Return a 1-dimensional array containing each element in left first, followed by each element in equal, followed by each element in right. Function DescriptionComplete the quickSort function in the editor below. quickSort has the following parameter(s): int arr[n]: arr[0] is the pivot element Returns int[n]: an array of integers as described above Input FormatThe first line contains n, the size of arr. The second line contains n space-separated integers arr[i] (the unsorted array). The first integer, arr[0], is the pivot element, p. Constraints 1 &lt;= n &lt;= 1000 -1000 &lt;= arr[i] &lt;= 1000 where 0 &lt;= i &lt; n All elements are distinct. Sample Input1234STDIN Function----- --------5 arr[] size n =54 5 3 7 2 arr =[4, 5, 3, 7, 2] Sample Output13 2 4 5 7 Explanationarr = [4,5,3,7,2,] Pivot: p = arr[0] = 4. left = {}; equal = {4}; right = {} arr[1] = 5 &gt; p, so it is added to right. left = {}; equal = {4}; right = {5} arr[2] = 3 &lt; p, so it is added to left. left = {3}; equal = {4}; right = {5} arr[3] = 7 &gt; p, so it is added to right. left = {3}; equal = {4}; right = {5,7} arr[4] = 2 &lt; p, so it is added to left. left = {3,2}; equal = {4}; right = {5,7} Return the array {32457}. The order of the elements to the left and right of 4 does not need to match this answer. It is only required that 3 and 2 are to the left of 4, and 5 and 7 are to the right. Solution12345678910111213141516171819/* * Complete the 'quickSort' function below. * * The function is expected to return an INTEGER_ARRAY. * The function accepts INTEGER_ARRAY arr as parameter. */function quickSort(arr) { // Write your code here const result = [[], [], []]; arr.reduce((target, item, index) =&gt; { result[(item &gt; arr[0]) + (item &gt;= arr[0])].push(item); return target; }, []); return result.flat();}","link":"/2022/09/30/quicksort1/"},{"title":"Insertion Sort - Part 2","text":"In Insertion Sort Part 1, you inserted one element into an array at its correct sorted position. Using the same approach repeatedly, can you sort an entire array? Guideline: You already can place an element into a sorted array. How can you use that code to build up a sorted array, one element at a time? Note that in the first step, when you consider an array with just the first element, it is already sorted since there’s nothing to compare it to. In this challenge, print the array after each iteration of the insertion sort, i.e., whenever the next element has been inserted at its correct position. Since the array composed of just the first element is already sorted, begin printing after placing the second element. Examplen = 7 arr = [3,4,7,5,6,2,1] Working from left to right, we get the following output: 1234563 4 7 5 6 2 13 4 7 5 6 2 13 4 5 7 6 2 13 4 5 6 7 2 12 3 4 5 6 7 11 2 3 4 5 6 7 Function DescriptionComplete the insertionSort2 function in the editor below. insertionSort2 has the following parameter(s): int n: the length of arr int arr[n]: an array of integers PrintsAt each iteration, print the array as space-separated integers on its own line. Input FormatThe first line contains an integer, n, the size of arr. The next line contains n space-separated integers arr[i]. Constraints1 &lt;= n &lt;= 1000 -10000 &lt;= arr[i] &lt;= 10000,0 &lt;= i &lt; n Output FormatPrint the entire array on a new line at every iteration. Sample Input1234STDIN Function----- --------6 n = 61 4 3 5 6 2 arr = [1, 4, 3, 5, 6, 2] Sample Output123451 4 3 5 6 21 3 4 5 6 21 3 4 5 6 21 3 4 5 6 21 2 3 4 5 6 ExplanationSkip testing 1 against itself at position 0. It is sorted. Test position 1 against position 0: 4 &gt; 1, no more to check, no change. Print arr Test position 2 against positions 1 and 0: 3 &lt; 4, new position may be 1. Keep checking. 3 &gt; 1, so insert 3 at position 1 and move others to the right. Print arr Test position 3 against positions 2,1,0 (as necessary): no change. Print arr Test position 4 against positions 3,2,1,0: no change. Print arr Test position 5 against positions 4,3,2,1,0, insert 2 at position 1 and move others to the right. Print arr Solution123456789101112131415161718/* * Complete the 'insertionSort2' function below. * * The function accepts following parameters: * 1. INTEGER n * 2. INTEGER_ARRAY arr */function insertionSort2(n, arr) { // Write your code here for (let i = 1, itotal = arr.length; i &lt; itotal; i++) { for (let j = i; arr[j] &lt; arr[j - 1]; j--) { [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]]; } console.log(arr.join(' ')); }}","link":"/2022/09/27/insertionsort2/"},{"title":"HackerRank in a String!","text":"We say that a string contains the word hackerrank if a subsequence of its characters spell the word hackerrank. Remeber that a subsequence maintains the order of characters selected from a sequence. More formally, let p[0], p[1], … , p[9] be the respective indices of h, a, c, k, e, r, r, a, n, k in string s. If p[0] &lt; p[1] &lt; p[2] &lt; … &lt; p[9] is true, then s contains hackerrank. For each query, print YES on a new line if the string contains hackerrank, otherwise, print NO. Examples = haacckkerrannkk This contains a subsequence of all of the characters in the proper order. Answer YES s = haacckkerannk This is missing the second ‘r’. Answer NO. s = hccaakkerrannkk There is no ‘c’ after the first occurrence of an ‘a’, so answer NO. Function DescriptionComplete the hackerrankInString function in the editor below. hackerrankInString has the following parameter(s): string s: a string Returns string: YES or NO Input FormatThe first line contains an integer q, the number of queries.Each of the next q lines contains a single query string s. Constraints 2 &lt;= q &lt;= 102 10 &lt;= length of s &lt;= 104 Sample Input 01232hereiamstackerrankhackerworld Sample Output 012YESNO Explanation 0We perform the following q = 2 queries: s = hereiamstackerrankThe characters of hackerrank are bolded in the string above. Because the string contains all the characters in hackerrank in the same exact order as they appear in hackerrank, we return YES. s = hackerworld does not contain the last three characters of hackerrank, so we return NO. Sample Input 11232hhaacckkekraraannkrhbaasdndfsdskgbfefdbrsdfhuyatrjtcrtyytktjjt Sample Output 112YESNO SolutionSolution 1 with JS12345678910111213141516171819/* * Complete the 'hackerrankInString' function below. * * The function is expected to return a STRING. * The function accepts STRING s as parameter. */function hackerrankInString(s) { // Write your code here const value = 'hackerrank'; const count = (s.split('') || []).reduce((target, item, index) =&gt; { value[target] === s[index] &amp;&amp; target++; return target; }, 0); return count === value.length ? 'YES' : 'NO';} Solution 2 with TS12345678910111213141516171819202122/* * Complete the 'hackerrankInString' function below. * * The function is expected to return a STRING. * The function accepts STRING s as parameter. */function hackerrankInString(s: string): string { // Write your code here const value = 'hackerrank'; const count = (s.split('') || []).reduce( (target: number, item: string, index: number): number =&gt; { value[target] === s[index] &amp;&amp; target++; return target; }, 0 ); return count === value.length ? 'YES' : 'NO';}","link":"/2022/10/27/hackerrank-in-a-string/"},{"title":"Pangrams","text":"A pangram is a string that contains every letter of the alphabet. Given a sentence determine whether it is a pangram in the English alphabet. Ignore case. Return either pangram or not pangram as appropriate. Examples = ‘The quick brown fox jumps over the lazy dog’ The string contains all letters in the English alphabet, so return pangram. Function DescriptionComplete the function pangrams in the editor below. It should return the string pangram if the input string is a pangram. Otherwise, it should return not pangram. pangrams has the following parameter(s): string s: a string to test Returns string: either pangram or not pangram Input FormatA single line with string s. Constraints0 &lt; length of s &lt;= 103 Each character of s, Sample InputSample Input 0We promptly judged antique ivory buckles for the next prize Sample Output 0pangram Sample Explanation 0All of the letters of the alphabet are present in the string. Sample Input 1We promptly judged antique ivory buckles for the prize Sample Output 1not pangram Sample Explanation 0The string lacks an x. SolutionSolution 1 with JS123456789101112131415161718/* * Complete the 'pangrams' function below. * * The function is expected to return a STRING. * The function accepts STRING s as parameter. */function pangrams(s) { // Write your code here const values = 'abcdefghijklmnopqrstuvwxyz'; return values.split('').reduce((target, item, index) =&gt; { if (!s.toLowerCase().includes(item)) { target = 'not pangram'; } return target; }, 'pangram');} Solution 2 with TS12345678910111213141516171819/* * Complete the 'pangrams' function below. * * The function is expected to return a STRING. * The function accepts STRING s as parameter. */function pangrams(s: string): string { // Write your code here const values = 'abcdefghijklmnopqrstuvwxyz'; return values.split('').reduce((target: string, item: string) =&gt; { if (!s.toLowerCase().includes(item)) { target = 'not pangram'; } return target; }, 'pangram');}","link":"/2022/10/28/pangrams/"},{"title":"Hello, LunarScents!","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post new GDemo('#demo-teriminal1') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo new \"My New Post\"`, {onCompleteDelay: 500}) .respond(``) .end(); More info: Writing Run server new GDemo('#demo-teriminal2') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo server`, {onCompleteDelay: 500}) .respond(``) .end(); More info: Server Generate static files new GDemo('#demo-teriminal3') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo generate`, {onCompleteDelay: 500}) .respond(``) .end(); More info: Generating Deploy to remote sites new GDemo('#demo-teriminal4') .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'}) .command(`hexo deploy`, {onCompleteDelay: 500}) .respond(``) .end(); More info: Deployment","link":"/2019/05/29/hello-lunarscents/"},{"title":"Strong Password","text":"Louise joined a social networking site to stay in touch with her friends. The signup page required her to input a name and a password. However, the password must be strong. The website considers a password to be strong if it satisfies the following criteria: Its length is at least 6. It contains at least one digit. It contains at least one lowercase English character. It contains at least one uppercase English character. It contains at least one special character. The special characters are: !@#$%^&amp;*()-+ She typed a random string of length n in the password field but wasn’t sure if it was strong. Given the string she typed, can you find the minimum number of characters she must add to make her password strong? Note: Here’s the set of types of characters in a form you can paste in your solution: 1234numbers = &quot;0123456789&quot;lower_case = &quot;abcdefghijklmnopqrstuvwxyz&quot;upper_case = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;special_characters = &quot;!@#$%^&amp;*()-+&quot; Examplepassword = ‘2bbbb’ This password is 5 characters long and is missing an uppercase and a special character. The minimum number of characters to add is 2. password = ‘2bb#A’ This password is 5 characters long and has at least one of each character type. The minimum number of characters to add is 1. Function DescriptionComplete the minimumNumber function in the editor below. minimumNumber has the following parameters: int n: the length of the password string password: the password to test Returns int: the minimum number of characters to add Input FormatThe first line contains an integer n, the length of the password. The second line contains the password string. Each character is either a lowercase/uppercase English alphabet, a digit, or a special character. Constraints 1 &lt;= n &lt;= 100 All characters in password are in [a-z], [A-Z], [0-9], or [!@#$%^&amp;*()-+ ]. Sample Input 0123Ab1 Sample Output 013 Explanation 0She can make the password strong by adding 3 characters, for example, $hk, turning the password into Ab1$hk which is strong. 2 characters aren’t enough since the length must be at least 6. Sample Input 11211#HackerRank Sample Output 111 Explanation 1The password isn’t strong, but she can make it strong by adding a single digit. Solution12345678910111213141516171819202122232425262728/* * Complete the 'minimumNumber' function below. * * The function is expected to return an INTEGER. * The function accepts following parameters: * 1. INTEGER n * 2. STRING password */function minimumNumber(n, password) { // Return the minimum number of characters to make the password strong let count = 4; [ '0123456789', 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', '!@#$%^&amp;*()-+' ].reduce((target, validator, index) =&gt; { Array.from(password).some(item =&gt; validator.includes(item) ? count-- : null ); return target; }, []); return Math.max(count, 6 - n);}","link":"/2022/10/04/strong-password/"}],"tags":[{"name":"Tools","slug":"Tools","link":"/tags/Tools/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"Devlog","slug":"Devlog","link":"/tags/Devlog/"},{"name":"Prologue","slug":"Prologue","link":"/tags/Prologue/"},{"name":"JS Library","slug":"JS-Library","link":"/tags/JS-Library/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"React Hooks","slug":"React-Hooks","link":"/tags/React-Hooks/"},{"name":"Front-End","slug":"Front-End","link":"/tags/Front-End/"},{"name":"react-hook-form","slug":"react-hook-form","link":"/tags/react-hook-form/"},{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"HackerRank","slug":"HackerRank","link":"/tags/HackerRank/"},{"name":"Problem Solving","slug":"Problem-Solving","link":"/tags/Problem-Solving/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"ES6","slug":"ES6","link":"/tags/ES6/"},{"name":"Strings","slug":"Strings","link":"/tags/Strings/"},{"name":"Two Characters of Algorithms hackerrank solution in javascript","slug":"Two-Characters-of-Algorithms-hackerrank-solution-in-javascript","link":"/tags/Two-Characters-of-Algorithms-hackerrank-solution-in-javascript/"},{"name":"String","slug":"String","link":"/tags/String/"},{"name":"Caesar Cipher hackerrank solution in javascript","slug":"Caesar-Cipher-hackerrank-solution-in-javascript","link":"/tags/Caesar-Cipher-hackerrank-solution-in-javascript/"},{"name":"Programmers","slug":"Programmers","link":"/tags/Programmers/"},{"name":"Level1","slug":"Level1","link":"/tags/Level1/"},{"name":"RoadMap","slug":"RoadMap","link":"/tags/RoadMap/"},{"name":"the bomberman game hackerrank solution in javascript","slug":"the-bomberman-game-hackerrank-solution-in-javascript","link":"/tags/the-bomberman-game-hackerrank-solution-in-javascript/"},{"name":"Stipe","slug":"Stipe","link":"/tags/Stipe/"},{"name":"Payments","slug":"Payments","link":"/tags/Payments/"},{"name":"결제","slug":"결제","link":"/tags/결제/"},{"name":"10Days of JS","slug":"10Days-of-JS","link":"/tags/10Days-of-JS/"},{"name":"30Days of Code","slug":"30Days-of-Code","link":"/tags/30Days-of-Code/"},{"name":"Loops","slug":"Loops","link":"/tags/Loops/"},{"name":"Level2","slug":"Level2","link":"/tags/Level2/"},{"name":"Settings","slug":"Settings","link":"/tags/Settings/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Generator","slug":"Generator","link":"/tags/Generator/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo 블로그 만들기","slug":"Hexo-블로그-만들기","link":"/tags/Hexo-블로그-만들기/"},{"name":"Hexo Icarus theme","slug":"Hexo-Icarus-theme","link":"/tags/Hexo-Icarus-theme/"},{"name":"Hexo+Github","slug":"Hexo-Github","link":"/tags/Hexo-Github/"},{"name":"Github Page with Hexo","slug":"Github-Page-with-Hexo","link":"/tags/Github-Page-with-Hexo/"},{"name":"Basic for Web","slug":"Basic-for-Web","link":"/tags/Basic-for-Web/"},{"name":"Browsers","slug":"Browsers","link":"/tags/Browsers/"},{"name":"How Browsers work","slug":"How-Browsers-work","link":"/tags/How-Browsers-work/"},{"name":"Development Environment in MacOS","slug":"Development-Environment-in-MacOS","link":"/tags/Development-Environment-in-MacOS/"},{"name":"MacOS 개발 환경 설정하기","slug":"MacOS-개발-환경-설정하기","link":"/tags/MacOS-개발-환경-설정하기/"},{"name":"TypeScript","slug":"TypeScript","link":"/tags/TypeScript/"},{"name":"Debug Tools","slug":"Debug-Tools","link":"/tags/Debug-Tools/"},{"name":"Chrome으로 Android Debugging 방법","slug":"Chrome으로-Android-Debugging-방법","link":"/tags/Chrome으로-Android-Debugging-방법/"},{"name":"Android Debugging","slug":"Android-Debugging","link":"/tags/Android-Debugging/"},{"name":"Android Debug Bridge","slug":"Android-Debug-Bridge","link":"/tags/Android-Debug-Bridge/"},{"name":"Mobile web Debugging","slug":"Mobile-web-Debugging","link":"/tags/Mobile-web-Debugging/"},{"name":"안드로이드 디버깅하는 방법","slug":"안드로이드-디버깅하는-방법","link":"/tags/안드로이드-디버깅하는-방법/"},{"name":"모바일 웹 디버깅","slug":"모바일-웹-디버깅","link":"/tags/모바일-웹-디버깅/"},{"name":"안드로이드 디버그 브리지","slug":"안드로이드-디버그-브리지","link":"/tags/안드로이드-디버그-브리지/"},{"name":"iPhone Safari Debugging 방법","slug":"iPhone-Safari-Debugging-방법","link":"/tags/iPhone-Safari-Debugging-방법/"},{"name":"Safari Debugging","slug":"Safari-Debugging","link":"/tags/Safari-Debugging/"},{"name":"Safari Technology Preview","slug":"Safari-Technology-Preview","link":"/tags/Safari-Technology-Preview/"},{"name":"아이폰 사파리를 디버깅하는 방법","slug":"아이폰-사파리를-디버깅하는-방법","link":"/tags/아이폰-사파리를-디버깅하는-방법/"},{"name":"Sorting","slug":"Sorting","link":"/tags/Sorting/"},{"name":"insertion sort","slug":"insertion-sort","link":"/tags/insertion-sort/"},{"name":"Insertion Sort - Part 1 hackerrank solution in javascript","slug":"Insertion-Sort-Part-1-hackerrank-solution-in-javascript","link":"/tags/Insertion-Sort-Part-1-hackerrank-solution-in-javascript/"},{"name":"Correctness and the Loop Invariant hackerrank solution in javascript","slug":"Correctness-and-the-Loop-Invariant-hackerrank-solution-in-javascript","link":"/tags/Correctness-and-the-Loop-Invariant-hackerrank-solution-in-javascript/"},{"name":"Running Time of Algorithms hackerrank solution in javascript","slug":"Running-Time-of-Algorithms-hackerrank-solution-in-javascript","link":"/tags/Running-Time-of-Algorithms-hackerrank-solution-in-javascript/"},{"name":"Quicksort 1 - Partition hackerrank solution in javascript","slug":"Quicksort-1-Partition-hackerrank-solution-in-javascript","link":"/tags/Quicksort-1-Partition-hackerrank-solution-in-javascript/"},{"name":"Insertion Sort - Part 2 hackerrank solution in javascript","slug":"Insertion-Sort-Part-2-hackerrank-solution-in-javascript","link":"/tags/Insertion-Sort-Part-2-hackerrank-solution-in-javascript/"},{"name":"HackerRank in a String of Algorithms hackerrank solution in javascript","slug":"HackerRank-in-a-String-of-Algorithms-hackerrank-solution-in-javascript","link":"/tags/HackerRank-in-a-String-of-Algorithms-hackerrank-solution-in-javascript/"},{"name":"HackerRank in a String of Algorithms hackerrank solution in typescript","slug":"HackerRank-in-a-String-of-Algorithms-hackerrank-solution-in-typescript","link":"/tags/HackerRank-in-a-String-of-Algorithms-hackerrank-solution-in-typescript/"},{"name":"Pangrams of Algorithms hackerrank solution in javascript","slug":"Pangrams-of-Algorithms-hackerrank-solution-in-javascript","link":"/tags/Pangrams-of-Algorithms-hackerrank-solution-in-javascript/"},{"name":"Pangrams of Algorithms hackerrank solution in typescript","slug":"Pangrams-of-Algorithms-hackerrank-solution-in-typescript","link":"/tags/Pangrams-of-Algorithms-hackerrank-solution-in-typescript/"},{"name":"Strong Password of Algorithms hackerrank solution in javascript","slug":"Strong-Password-of-Algorithms-hackerrank-solution-in-javascript","link":"/tags/Strong-Password-of-Algorithms-hackerrank-solution-in-javascript/"}],"categories":[{"name":"Tools","slug":"Tools","link":"/categories/Tools/"},{"name":"Devlog","slug":"Devlog","link":"/categories/Devlog/"},{"name":"JS Library","slug":"JS-Library","link":"/categories/JS-Library/"},{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"React","slug":"JS-Library/React","link":"/categories/JS-Library/React/"},{"name":"Programmers","slug":"Algorithm/Programmers","link":"/categories/Algorithm/Programmers/"},{"name":"HackerRank","slug":"Algorithm/HackerRank","link":"/categories/Algorithm/HackerRank/"},{"name":"Level1","slug":"Algorithm/Programmers/Level1","link":"/categories/Algorithm/Programmers/Level1/"},{"name":"10Days of JS","slug":"Algorithm/HackerRank/10Days-of-JS","link":"/categories/Algorithm/HackerRank/10Days-of-JS/"},{"name":"Problem Solving","slug":"Algorithm/HackerRank/Problem-Solving","link":"/categories/Algorithm/HackerRank/Problem-Solving/"},{"name":"30Days of Code","slug":"Algorithm/HackerRank/30Days-of-Code","link":"/categories/Algorithm/HackerRank/30Days-of-Code/"},{"name":"Level2","slug":"Algorithm/Programmers/Level2","link":"/categories/Algorithm/Programmers/Level2/"},{"name":"Settings","slug":"Settings","link":"/categories/Settings/"},{"name":"Basic for Web","slug":"Basic-for-Web","link":"/categories/Basic-for-Web/"},{"name":"Debug","slug":"Tools/Debug","link":"/categories/Tools/Debug/"},{"name":"TypeScript","slug":"TypeScript","link":"/categories/TypeScript/"},{"name":"Hexo","slug":"Tools/Hexo","link":"/categories/Tools/Hexo/"},{"name":"Hexo","slug":"Settings/Hexo","link":"/categories/Settings/Hexo/"},{"name":"Browsers","slug":"Basic-for-Web/Browsers","link":"/categories/Basic-for-Web/Browsers/"},{"name":"Development Environment","slug":"Settings/Development-Environment","link":"/categories/Settings/Development-Environment/"}]}