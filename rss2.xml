<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LunarScents&#39;s DevLog</title>
    <link>https://lunarscents.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>The logging space of LunarScents.</description>
    <pubDate>Tue, 20 Sep 2022 00:28:48 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>The Grid Search</title>
      <link>https://lunarscents.github.io/2022/09/20/the-grid-search/</link>
      <guid>https://lunarscents.github.io/2022/09/20/the-grid-search/</guid>
      <pubDate>Mon, 19 Sep 2022 23:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given an array of strings of digits, try to find the occurrence of a given pattern of digits. In the grid and pattern arrays, each string represents a row in the grid. For example, consider the following grid:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1234567890&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09**876543**21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11**111111**11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11**111111**11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2222222222&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The pattern array is:&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;876543&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111111&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The pattern begins at the second row and the third column of the grid and continues in the following two rows. The pattern is said to be present in the grid. The return value should be &lt;code&gt;YES&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt;, depending on whether the pattern is found. In this case, return &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given an array of strings of digits, try to find the occurrence of a given pattern of digits. In the grid and pattern arrays, each string represents a row in the grid. For example, consider the following grid:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1234567890</span><br><span class="line">09**876543**21</span><br><span class="line">11**111111**11</span><br><span class="line">11**111111**11</span><br><span class="line">2222222222</span><br></pre></td></tr></table></figure><p>The pattern array is:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">876543</span><br><span class="line">111111</span><br><span class="line">111111</span><br></pre></td></tr></table></figure><p>The pattern begins at the second row and the third column of the grid and continues in the following two rows. The pattern is said to be present in the grid. The return value should be <code>YES</code> or <code>NO</code>, depending on whether the pattern is found. In this case, return <code>YES</code>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the gridSearch function in the editor below. It should return <code>YES</code> if the pattern exists in the grid, or <code>NO</code> otherwise.</p><p>gridSearch has the following parameter(s):</p><ul><li>string G[R]: the grid to search</li><li>string P[r]: the pattern to search for</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <code>t</code>, the number of test cases.</p><p>Each of the <code>t</code> test cases is represented as follows:<br>The first line contains two space-separated integers <code>R</code> and <code>C</code>, the number of rows in the search grid <code>G</code> and the length of each row string.<br>This is followed by <code>R</code> lines, each with a string of <code>C</code> digits that represent the grid <code>G</code>.The following line contains two space-separated integers, <code>r</code> and <code>c</code>, the number of rows in the pattern grid <code>P</code> and the length of each pattern row string.<br>This is followed by <code>r</code> lines, each with a string of <code>c</code> digits that represent the pattern grid <code>P</code>.</p><h2 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h2><ul><li>string: either <code>YES</code> or <code>NO</code></li></ul><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= t &lt;= 5</li><li>1 &lt;= R, r, C, c &lt;= 1000</li><li>0 &lt;= r &lt;= R</li><li>0 &lt;= c &lt;= C</li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">10 10</span><br><span class="line">7283455864</span><br><span class="line">6731158619</span><br><span class="line">8988242643</span><br><span class="line">3830589324</span><br><span class="line">2229505813</span><br><span class="line">5633845374</span><br><span class="line">6473530293</span><br><span class="line">7053106601</span><br><span class="line">0834282956</span><br><span class="line">4607924137</span><br><span class="line">3 4</span><br><span class="line">9505</span><br><span class="line">3845</span><br><span class="line">3530</span><br><span class="line">15 15</span><br><span class="line">400453592126560</span><br><span class="line">114213133098692</span><br><span class="line">474386082879648</span><br><span class="line">522356951189169</span><br><span class="line">887109450487496</span><br><span class="line">252802633388782</span><br><span class="line">502771484966748</span><br><span class="line">075975207693780</span><br><span class="line">511799789562806</span><br><span class="line">404007454272504</span><br><span class="line">549043809916080</span><br><span class="line">962410809534811</span><br><span class="line">445893523733475</span><br><span class="line">768705303214174</span><br><span class="line">650629270887160</span><br><span class="line">2 2</span><br><span class="line">99</span><br><span class="line">99</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The first test in the input file is:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">7283455864</span><br><span class="line">6731158619</span><br><span class="line">8988242643</span><br><span class="line">3830589324</span><br><span class="line">2229505813</span><br><span class="line">5633845374</span><br><span class="line">6473530293</span><br><span class="line">7053106601</span><br><span class="line">0834282956</span><br><span class="line">4607924137</span><br><span class="line">3 4</span><br><span class="line">9505</span><br><span class="line">3845</span><br><span class="line">3530</span><br></pre></td></tr></table></figure><p>The pattern is present in the larger grid as marked in bold below.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">7283455864</span><br><span class="line">6731158619</span><br><span class="line">8988242643</span><br><span class="line">3830589324</span><br><span class="line">2229505813</span><br><span class="line">5633845374</span><br><span class="line">6473530293</span><br><span class="line">7053106601</span><br><span class="line">0834282956</span><br><span class="line">4607924137</span><br></pre></td></tr></table></figure><p>The second test in the input file is:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">15 15</span><br><span class="line">400453592126560</span><br><span class="line">114213133098692</span><br><span class="line">474386082879648</span><br><span class="line">522356951189169</span><br><span class="line">887109450487496</span><br><span class="line">252802633388782</span><br><span class="line">502771484966748</span><br><span class="line">075975207693780</span><br><span class="line">511799789562806</span><br><span class="line">404007454272504</span><br><span class="line">549043809916080</span><br><span class="line">962410809534811</span><br><span class="line">445893523733475</span><br><span class="line">768705303214174</span><br><span class="line">650629270887160</span><br><span class="line">2 2</span><br><span class="line">99</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>The search pattern is:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">99</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>This pattern is not found in the larger grid.</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'gridSearch' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return a STRING.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. STRING_ARRAY G</span></span><br><span class="line"><span class="hljs-comment"> *  2. STRING_ARRAY P</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gridSearch</span>(<span class="hljs-params">G: string[], P: string[]</span>): <span class="hljs-title">string</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, itotal = G.length - P.length; i &lt;= itotal; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> indexes = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>, ktotal = G[i].length - P[<span class="hljs-number">0</span>].length; k &lt;= ktotal; k++) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (G[i].slice(k, k + P[<span class="hljs-number">0</span>].length) == P[<span class="hljs-number">0</span>]) &#123;</span><br><span class="line">        indexes.push(k);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (indexes.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> index <span class="hljs-keyword">of</span> indexes) &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>, jtotal = P.length + i; j &lt; jtotal; j++) &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span> (G[j].slice(index, index + P[j - i].length) != P[j - i]) &#123;</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> == P.length) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">'YES'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">'NO'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2022/09/20/the-grid-search/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Manasa and Stones</title>
      <link>https://lunarscents.github.io/2022/09/19/manasa-and-stones/</link>
      <guid>https://lunarscents.github.io/2022/09/19/manasa-and-stones/</guid>
      <pubDate>Sun, 18 Sep 2022 23:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Manasa is out on a hike with friends. She finds a trail of stones with numbers on them. She starts following the trail and notices that any two consecutive stones’ numbers differ by one of two values. Legend has it that there is a treasure trove at the end of the trail. If Manasa can guess the value of the last stone, the treasure will be hers.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Manasa is out on a hike with friends. She finds a trail of stones with numbers on them. She starts following the trail and notices that any two consecutive stones’ numbers differ by one of two values. Legend has it that there is a treasure trove at the end of the trail. If Manasa can guess the value of the last stone, the treasure will be hers.</p><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong><p align="center">n = 2</p></strong></p><p><strong><p align="center">a = 2</p></strong></p><p><strong><p align="center">b = 3</p></strong></p><p>She finds stones and their differences are <strong>a = 2</strong> or <strong>b = 3</strong>. We know she starts with a <strong>0</strong> stone not included in her count. The permutations of differences for the two stones are <strong>[2, 2], [2, 3], [3, 2]</strong> or <strong>[3, 3]</strong>. Looking at each scenario, stones might have <strong>[2, 4], [2, 5], [3, 5]</strong> or <strong>[3, 6]</strong> on them. The last stone might have any of <strong>4</strong>, <strong>5</strong> or <strong>6</strong> on its face.</p><p>Compute all possible numbers that might occur on the last stone given a starting stone with a <strong>0</strong> on it, a number of additional stones found, and the possible differences between consecutive stones. Order the list ascending.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the stones function in the editor below.<br>stones has the following parameter(s):</p><ul><li>int n: the number of non-zero stones</li><li>int a: one possible integer difference</li><li>int b: another possible integer difference</li></ul><h2 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h2><ul><li>int[]: all possible values of the last stone, sorted ascending</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer , the number of test cases.</p><p>Each test case contains lines:</p><ul><li>The first line contains , the number of non-zero stones found.</li><li>The second line contains , one possible difference</li><li>The third line contains , the other possible difference.</li></ul><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= T &lt;= 10</li><li>1 &lt;= n, a, b &lt;= 10<sup>3</sup></li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STDIN   Function</span><br><span class="line">-----   --------</span><br><span class="line">2       T = 2 (test cases)</span><br><span class="line">3       n = 3 (test case 1)</span><br><span class="line">1       a = 1</span><br><span class="line">2       b = 2</span><br><span class="line">4       n = 4 (test case 2)</span><br><span class="line">10      a = 10</span><br><span class="line">100     b = 100</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 3 4</span><br><span class="line">30 120 210 300</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>With differences 1 and 2, all possible series for the first test case are given below:</p><ol><li>0,1,2</li><li>0,1,3</li><li>0,2,3</li><li>0,2,4</li></ol><p>Hence the answer <code>2 3 4</code>.</p><p>With differences 10 and 100, all possible series for the second test case are the following:</p><ol><li>0, 10, 20, <strong>30</strong></li><li>0, 10, 20, <strong>120</strong></li><li>0, 10, 110, <strong>120</strong></li><li>0, 10, 110, <strong>210</strong></li><li>0, 100, 110, <strong>120</strong></li><li>0, 100, 110, <strong>210</strong></li><li>0, 100, 200, <strong>210</strong></li><li>0, 100, 200, <strong>300</strong></li></ol><p>Hence the answer <code>30 120 210 300</code>.</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-with-JS"><a href="#Solution-1-with-JS" class="headerlink" title="Solution 1 with JS"></a>Solution 1 with JS</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'stones' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return an INTEGER_ARRAY.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER n</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER a</span></span><br><span class="line"><span class="hljs-comment"> *  3. INTEGER b</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stones</span>(<span class="hljs-params">n, a, b</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n)</span><br><span class="line">    .fill(<span class="hljs-number">0</span>)</span><br><span class="line">    .map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> a * (n - index - <span class="hljs-number">1</span>) + b * index)</span><br><span class="line">    .sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    .reduce(<span class="hljs-function">(<span class="hljs-params">target, item</span>) =&gt;</span> &#123;</span><br><span class="line">      !target.includes(item) &amp;&amp; target.push(item);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2-with-TS"><a href="#Solution-2-with-TS" class="headerlink" title="Solution 2 with TS"></a>Solution 2 with TS</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'stones' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return an INTEGER_ARRAY.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER n</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER a</span></span><br><span class="line"><span class="hljs-comment"> *  3. INTEGER b</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stones</span>(<span class="hljs-params">n: <span class="hljs-built_in">number</span>, a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n)</span><br><span class="line">    .fill(<span class="hljs-number">0</span>)</span><br><span class="line">    .map(<span class="hljs-function">(<span class="hljs-params">item: <span class="hljs-built_in">number</span>, index: <span class="hljs-built_in">number</span></span>) =&gt;</span> a * (n - index - <span class="hljs-number">1</span>) + b * index)</span><br><span class="line">    .sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    .reduce(<span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">number</span>[], item: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// includes 문법은 ES7 (ES2016)부터 지원된다.</span></span><br><span class="line">      !target.includes(item) &amp;&amp; target.push(item);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, [] <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>[]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2022/09/19/manasa-and-stones/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cavity Map</title>
      <link>https://lunarscents.github.io/2022/09/18/cavity-map/</link>
      <guid>https://lunarscents.github.io/2022/09/18/cavity-map/</guid>
      <pubDate>Sun, 18 Sep 2022 11:11:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;You are given a square map as a matrix of integer strings. Each cell of the map has a value denoting its depth. We will call a cell of the map a cavity if and only if this cell is not on the border of the map and each cell adjacent to it has strictly smaller depth. Two cells are adjacent if they have a common side, or edge.&lt;/p&gt;
&lt;p&gt;Find all the cavities on the map and replace their depths with the uppercase character X.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You are given a square map as a matrix of integer strings. Each cell of the map has a value denoting its depth. We will call a cell of the map a cavity if and only if this cell is not on the border of the map and each cell adjacent to it has strictly smaller depth. Two cells are adjacent if they have a common side, or edge.</p><p>Find all the cavities on the map and replace their depths with the uppercase character X.</p><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong><p align="center">grid = [‘989’, ‘191’, ‘111’]</p></strong></p><p>The grid is rearranged for clarity:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">989</span><br><span class="line">191</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>Return:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">989</span><br><span class="line">1X1</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>The center cell was deeper than those on its edges: [8,1,1,1]. The deep cells in the top two corners do not share an edge with the center cell, and none of the border cells is eligible.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the cavityMap function in the editor below.</p><p>cavityMap has the following parameter(s):</p><p>string grid[n]: each string represents a row of the grid</p><h2 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h2><p>string{n}: the modified grid</p><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer , the number of rows and columns in the grid.</p><p>Each of the following lines (rows) contains positive digits without spaces (columns) that represent the depth at .</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 100</li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STDIN   Function</span><br><span class="line">-----   --------</span><br><span class="line">4       grid[] size n = 4</span><br><span class="line">1112    grid = [&apos;1112&apos;, &apos;1912&apos;, &apos;1892&apos;, &apos;1234&apos;]</span><br><span class="line">1912</span><br><span class="line">1892</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1112</span><br><span class="line">1X12</span><br><span class="line">18X2</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The two cells with the depth of 9 are not on the border and are surrounded on all sides by shallower cells. Their values are replaced by X.</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-with-JS"><a href="#Solution-1-with-JS" class="headerlink" title="Solution 1 with JS"></a>Solution 1 with JS</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'cavityMap' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return a STRING_ARRAY.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts STRING_ARRAY grid as parameter.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cavityMap</span>(<span class="hljs-params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">const</span> cavities = grid.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.split(<span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> cavities.reduce(<span class="hljs-function">(<span class="hljs-params">target, list, index, source</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> result = list</span><br><span class="line">      .reduce(<span class="hljs-function">(<span class="hljs-params">listTarget, item, itemIndex</span>) =&gt;</span> &#123;</span><br><span class="line">        listTarget.push(</span><br><span class="line">          index &gt;= <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            itemIndex &gt;= <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            index &lt; source.length - <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            itemIndex &lt; list.length &amp;&amp;</span><br><span class="line">            item &gt; source[index][itemIndex - <span class="hljs-number">1</span>] &amp;&amp;</span><br><span class="line">            item &gt; source[index][itemIndex + <span class="hljs-number">1</span>] &amp;&amp;</span><br><span class="line">            item &gt; source[index - <span class="hljs-number">1</span>][itemIndex] &amp;&amp;</span><br><span class="line">            item &gt; source[index + <span class="hljs-number">1</span>][itemIndex]</span><br><span class="line">            ? <span class="hljs-string">'X'</span></span><br><span class="line">            : item</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> listTarget;</span><br><span class="line">      &#125;, [])</span><br><span class="line">      .join(<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line">    target.push(result);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-2-with-TS"><a href="#Solution-2-with-TS" class="headerlink" title="Solution 2 with TS"></a>Solution 2 with TS</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'cavityMap' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return a STRING_ARRAY.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts STRING_ARRAY grid as parameter.</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cavityMap</span>(<span class="hljs-params">grid: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-title">string</span>[] </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">const</span> cavities: <span class="hljs-built_in">string</span>[][] = grid.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (item || <span class="hljs-string">''</span>).split(<span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> cavities.reduce(<span class="hljs-function">(<span class="hljs-params">target, list, index, source</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> result = list</span><br><span class="line">      .reduce(<span class="hljs-function">(<span class="hljs-params">listTarget, item, itemIndex</span>) =&gt;</span> &#123;</span><br><span class="line">        listTarget.push(</span><br><span class="line">          index &gt;= <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            itemIndex &gt;= <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            index &lt; source.length - <span class="hljs-number">1</span> &amp;&amp;</span><br><span class="line">            itemIndex &lt; list.length &amp;&amp;</span><br><span class="line">            item &gt; source[index][itemIndex - <span class="hljs-number">1</span>] &amp;&amp;</span><br><span class="line">            item &gt; source[index][itemIndex + <span class="hljs-number">1</span>] &amp;&amp;</span><br><span class="line">            item &gt; source[index - <span class="hljs-number">1</span>][itemIndex] &amp;&amp;</span><br><span class="line">            item &gt; source[index + <span class="hljs-number">1</span>][itemIndex]</span><br><span class="line">            ? <span class="hljs-string">'X'</span></span><br><span class="line">            : item</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> listTarget;</span><br><span class="line">      &#125;, [] <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[])</span><br><span class="line">      .join(<span class="hljs-string">''</span>);</span><br><span class="line"></span><br><span class="line">    target.push(result);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, [] <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2022/09/18/cavity-map/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TypeScript Basics</title>
      <link>https://lunarscents.github.io/2020/06/05/typescriptBasics/</link>
      <guid>https://lunarscents.github.io/2020/06/05/typescriptBasics/</guid>
      <pubDate>Fri, 05 Jun 2020 10:08:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;기존의 자바스크립트로 만든 프로젝트는 규모가 커지고 코드가 복잡해질수록 디버그와 테스트 단계에 검수 시간이 늘어났었습니다.&lt;/p&gt;
&lt;p&gt;이를 극복하고자 나온 자바스크립트 대체 언어 중 하나가 &lt;code&gt;TypeScript(타입스크립트)&lt;/code&gt;입니다.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>기존의 자바스크립트로 만든 프로젝트는 규모가 커지고 코드가 복잡해질수록 디버그와 테스트 단계에 검수 시간이 늘어났었습니다.</p><p>이를 극복하고자 나온 자바스크립트 대체 언어 중 하나가 <code>TypeScript(타입스크립트)</code>입니다.<br><br></p><a id="more"></a><h2 id="What-is-the-TypeScript"><a href="#What-is-the-TypeScript" class="headerlink" title="What is the TypeScript?"></a>What is the TypeScript?</h2><blockquote><p>타입스크립트는 Microsoft에서 발표한 오픈소스로, JavaScript 프로그래밍 확장(Superset) 언어</p></blockquote><ol><li><p><code>정적 타입</code></p><ul><li>정적 타입을 지원하여 컴파일 단계에서 오류를 확인 가능합니다</li><li>명시적인 정적 타입 지정은 개발자의 의도를 명확하게 전달하며, 코드 가독성을 높이고 디버깅을 쉽게 할 수 있도록 도와줍니다.</li></ul></li><li><p><code>도구의 지원</code></p><ul><li>IDE(Integrated Development Environment)와 같은 다양한 도구의 타입 정보를 제공 받아 높은 수준의 코드 어시스트, 타입 체크, 리팩토링 등을 지원받을 수 있으며 이러한 도구의 지원은 대규모 프로젝트를 위한 필수 요소입니다.</li></ul></li><li><p><code>강력한 객체지향 프로그래밍 지원</code></p><ul><li>인터페이스, 제네릭 등과 같은 객체지향 프로그래밍을 지원하여 크고 복잡한 프로젝트의 코드 기반을 쉽게 구성할 수 있도록 합니다.</li></ul></li><li><p><code>ES6 / ES NEXT 지원</code></p><ul><li>TypeScript를 이용하여 새로운 스펙의 유용한 기능을 안정적으로 도입하기에 유리합니다. (TypeScript가 ECMAScript 표준에는 포함되어 있지 않지만, 표준화가 유력한 스펙을 도입하고 있습니다.)</li></ul></li></ol><br><hr><br><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p><code>컴파일(Compile) / 트랜스파일(Transpile)</code> : TypeScript로 작성된 <code>.ts</code> 파일은 컴파일러를 이용해 JavaScript 파일로 변환해주어야 브라우저에서 동작 합니다.</p><h3 id="Setup-설치"><a href="#Setup-설치" class="headerlink" title="Setup(설치)"></a>Setup(설치)</h3><ul><li><p>NPM을 통한 설치</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="terminal1" style="height: 70px"></div>            <script>        new GDemo('#terminal1')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`npm install --save typescript`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script></li><li><p>Yarn을 통한 설치</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="terminal2" style="height: 70px"></div>            <script>        new GDemo('#terminal2')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`yarn add typescript`, {onCompleteDelay: 500})          .respond(`  `)          .end();    </script></li></ul><p><strong>tsconfig.json 환경설정</strong></p><ul><li>해당 디렉토리에서 아래 명령어를 실행하면, <code>tsconfig.json</code> 파일이 자동 생성됩니다.</li></ul><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.css"><script src="https://cdn.jsdelivr.net/npm/@glorious/demo@0.8.0/dist/gdemo.min.js"></script>            <div id="terminal3" style="height: 70px"></div>            <script>        new GDemo('#terminal3')          .openApp('terminal', {minHeight: '70px', windowTitle: 'zsh', promptString: '$'})          .command(`tsc --init`, {onCompleteDelay: 500})          .respond(``)          .end();    </script><figure class="highlight typescript hljs"><figcaption><span>tsconfig.json</span><a href="https://www.typescriptlang.org/ko/docs/handbook/tsconfig-json.html" rel="external nofollow noopener noreferrer" target="_blank">tsconfig-json</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"compilerOptions"</span>: &#123;</span><br><span class="line">/_ Basic Options _/</span><br><span class="line"><span class="hljs-comment">// "incremental": true, /_ Enable incremental compilation _/</span></span><br><span class="line"><span class="hljs-string">"target"</span>: <span class="hljs-string">"ES2016"</span>, <span class="hljs-regexp">/_ Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. _/</span></span><br><span class="line"><span class="hljs-string">"module"</span>: <span class="hljs-string">"commonjs"</span>, <span class="hljs-regexp">/_ Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. _/</span></span><br><span class="line"><span class="hljs-comment">// "lib": [], /_ Specify library files to be included in the compilation. _/</span></span><br><span class="line"><span class="hljs-comment">// "allowJs": true, /_ Allow javascript files to be compiled. _/</span></span><br><span class="line"><span class="hljs-comment">// "checkJs": true, /_ Report errors in .js files. _/</span></span><br><span class="line"><span class="hljs-comment">// "jsx": "preserve", /_ Specify JSX code generation: 'preserve', 'react-native', or 'react'. _/</span></span><br><span class="line"><span class="hljs-comment">// "declaration": true, /_ Generates corresponding '.d.ts' file. _/</span></span><br><span class="line"><span class="hljs-comment">// "declarationMap": true, /_ Generates a sourcemap for each corresponding '.d.ts' file. _/</span></span><br><span class="line"><span class="hljs-comment">// "sourceMap": true, /_ Generates corresponding '.map' file. _/</span></span><br><span class="line"><span class="hljs-comment">// "outFile": "./", /_ Concatenate and emit output to single file. _/</span></span><br><span class="line"><span class="hljs-string">"outDir"</span>: <span class="hljs-string">"./dist"</span>, <span class="hljs-regexp">/_ Redirect output structure to the directory. _/</span></span><br><span class="line"><span class="hljs-comment">// "rootDir": "./", /_ Specify the root directory of input files. Use to control the output directory structure with --outDir. _/</span></span><br><span class="line"><span class="hljs-comment">// "composite": true, /_ Enable project compilation _/</span></span><br><span class="line"><span class="hljs-comment">// "tsBuildInfoFile": "./", /_ Specify file to store incremental compilation information _/</span></span><br><span class="line"><span class="hljs-comment">// "removeComments": true, /_ Do not emit comments to output. _/</span></span><br><span class="line"><span class="hljs-comment">// "noEmit": true, /_ Do not emit outputs. _/</span></span><br><span class="line"><span class="hljs-comment">// "importHelpers": true, /_ Import emit helpers from 'tslib'. _/</span></span><br><span class="line"><span class="hljs-comment">// "downlevelIteration": true, /_ Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. _/</span></span><br><span class="line"><span class="hljs-comment">// "isolatedModules": true, /_ Transpile each file as a separate module (similar to 'ts.transpileModule'). _/</span></span><br><span class="line">/_ Strict Type-Checking Options _/</span><br><span class="line"><span class="hljs-string">"strict"</span>: <span class="hljs-literal">true</span>, <span class="hljs-regexp">/_ Enable all strict type-checking options. _/</span></span><br><span class="line"><span class="hljs-comment">// "noImplicitAny": true, /_ Raise error on expressions and declarations with an implied 'any' type. _/</span></span><br><span class="line"><span class="hljs-comment">// "strictNullChecks": true, /_ Enable strict null checks. _/</span></span><br><span class="line"><span class="hljs-comment">// "strictFunctionTypes": true, /_ Enable strict checking of function types. _/</span></span><br><span class="line"><span class="hljs-comment">// "strictBindCallApply": true, /_ Enable strict 'bind', 'call', and 'apply' methods on functions. _/</span></span><br><span class="line"><span class="hljs-comment">// "strictPropertyInitialization": true, /_ Enable strict checking of property initialization in classes. _/</span></span><br><span class="line"><span class="hljs-comment">// "noImplicitThis": true, /_ Raise error on 'this' expressions with an implied 'any' type. _/</span></span><br><span class="line"><span class="hljs-comment">// "alwaysStrict": true, /_ Parse in strict mode and emit "use strict" for each source file. _/</span></span><br><span class="line">/_ Additional Checks _/</span><br><span class="line"><span class="hljs-comment">// "noUnusedLocals": true, /_ Report errors on unused locals. _/</span></span><br><span class="line"><span class="hljs-comment">// "noUnusedParameters": true, /_ Report errors on unused parameters. _/</span></span><br><span class="line"><span class="hljs-comment">// "noImplicitReturns": true, /_ Report error when not all code paths in function return a value. _/</span></span><br><span class="line"><span class="hljs-comment">// "noFallthroughCasesInSwitch": true, /_ Report errors for fallthrough cases in switch statement. _/</span></span><br><span class="line">/_ Module Resolution Options _/</span><br><span class="line"><span class="hljs-comment">// "moduleResolution": "node", /_ Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). _/</span></span><br><span class="line"><span class="hljs-comment">// "baseUrl": "./", /_ Base directory to resolve non-absolute module names. _/</span></span><br><span class="line"><span class="hljs-comment">// "paths": &#123;&#125;, /_ A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. _/</span></span><br><span class="line"><span class="hljs-comment">// "rootDirs": [], /_ List of root folders whose combined content represents the structure of the project at runtime. _/</span></span><br><span class="line"><span class="hljs-comment">// "typeRoots": [], /_ List of folders to include type definitions from. _/</span></span><br><span class="line"><span class="hljs-comment">// "types": [], /_ Type declaration files to be included in compilation. _/</span></span><br><span class="line"><span class="hljs-comment">// "allowSyntheticDefaultImports": true, /_ Allow default imports from modules with no default export. This does not affect code emit, just typechecking. _/</span></span><br><span class="line"><span class="hljs-string">"esModuleInterop"</span>: <span class="hljs-literal">true</span> /_ Enables emit interoperability between CommonJS and ES Modules via creation of <span class="hljs-keyword">namespace</span> objects <span class="hljs-keyword">for</span> all imports. Implies <span class="hljs-string">'allowSyntheticDefaultImports'</span>. _/</span><br><span class="line"><span class="hljs-comment">// "preserveSymlinks": true, /_ Do not resolve the real path of symlinks. _/</span></span><br><span class="line"><span class="hljs-comment">// "allowUmdGlobalAccess": true, /_ Allow accessing UMD globals from modules. _/</span></span><br><span class="line">/_ Source Map Options _/</span><br><span class="line"><span class="hljs-comment">// "sourceRoot": "", /_ Specify the location where debugger should locate TypeScript files instead of source locations. _/</span></span><br><span class="line"><span class="hljs-comment">// "mapRoot": "", /_ Specify the location where debugger should locate map files instead of generated locations. _/</span></span><br><span class="line"><span class="hljs-comment">// "inlineSourceMap": true, /_ Emit a single file with source maps instead of having a separate file. _/</span></span><br><span class="line"><span class="hljs-comment">// "inlineSources": true, /_ Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. _/</span></span><br><span class="line">/_ Experimental Options _/</span><br><span class="line"><span class="hljs-comment">// "experimentalDecorators": true, /_ Enables experimental support for ES7 decorators. _/</span></span><br><span class="line"><span class="hljs-comment">// "emitDecoratorMetadata": true, /_ Enables experimental support for emitting type metadata for decorators. _/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>컴파일 및 실행</strong></p><ul><li>아래와 같은 <code>sample.ts</code> 파일을 작성 한 후, <code>tsc</code> 명령어를 실행합니다.</li></ul><figure class="highlight typescript hljs"><figcaption><span>src/sample.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> message: <span class="hljs-built_in">string</span> = <span class="hljs-string">'Hello, LunarScents!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><ul><li>타입스크립트 CLI를 통해 코드를 컴파일 하기 위해서는 타입스크립트를 전역으로 설치하거나, 또는 아래와 같이 package.json의 build 스크립트를 작성합니다.</li></ul><figure class="highlight typescript hljs"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"typescript-sample"</span>,</span><br><span class="line"><span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</span><br><span class="line"><span class="hljs-string">"main"</span>: <span class="hljs-string">"index.js"</span>,</span><br><span class="line"><span class="hljs-string">"license"</span>: <span class="hljs-string">"MIT"</span>,</span><br><span class="line"><span class="hljs-string">"dependencies"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"typescript"</span>: <span class="hljs-string">"^3.6.4"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-string">"scripts"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"build"</span>: <span class="hljs-string">"tsc"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Basic-Types"><a href="#Basic-Types" class="headerlink" title="Basic Types"></a>Basic Types</h2><p>JavaScript 에서 지원하는 기본형 타입(<code>Boolean, Number, String, Array, Null, Undefined</code>)을 지원하며, 추가적으로 지원하는 타입들은 아래와 같습니다.</p><ul><li>두 가지의 타입은 <code>|</code> 연산자를 사용합니다.</li></ul><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><ul><li>튜플 타입은 고정된 개수의 요소 타입을 알고 있지만 반드시 같을 필요는 없는 배열을 표현할 수 있도록 합니다.</li><li>예를 들어, 다음과 같은 string과 number의 쌍으로 값을 나타낼 수 있습니다</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 튜플 타입 선언</span></span><br><span class="line"><span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 초기화</span></span><br><span class="line">x = [<span class="hljs-string">'hello'</span>, <span class="hljs-number">10</span>]; <span class="hljs-comment">// 좋아요</span></span><br><span class="line"><span class="hljs-comment">// 부정확한 초기화</span></span><br><span class="line">x = [<span class="hljs-number">10</span>, <span class="hljs-string">'hello'</span>]; <span class="hljs-comment">// 오류</span></span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><ul><li>JavaScript의 표준 데이터 타입 집합에 추가할 수 있는 유용하고 부가적인 추가 자료는 <code>enum</code> 입니다.</li><li>멤버 중 하나의 값을 수동으로 설정하여 이를 변경할 수 있거나, 열거 형의 모든 값을 수동으로 설정합니다.(기본적으로 enums는 0부터 시작하는 자신의 멤버 번호를 매기기를 시작합니다.)</li><li>enum의 편리한 기능은 숫자 값에서 enum의 해당 값 이름으로 이동할 수 있다는 것입니다.</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="hljs-number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> colorName: <span class="hljs-built_in">string</span> = Color[<span class="hljs-number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(colorName); <span class="hljs-comment">// 위의 값이 2 이므로 'Green'을 표시합니다.</span></span><br></pre></td></tr></table></figure><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li>코드를 작성할 때 알지 못하는 변수의 타입을 설명해야 할 수도 있습니다.</li><li>타입 검사를 선택하지 않고 그 값이 컴파일-타임 검사를 통과하도록 하고 싶은 경우, <code>any</code> 타입으로 지정합니다.</li><li>any 타입은 기존 JavaScript로 작업할 수 있는 강력한 방법으로 컴파일 과정에서 타입 검사를 점진적으로 실행 (opt-in) 및 중지(opt-out) 할 수 있습니다.</li><li>객체와 다른 점은 객체는 객체 타입의 변수를 사용하면 해당 객체에는 값만 할당할 수 있습니다.</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> notSure: <span class="hljs-built_in">any</span> = <span class="hljs-number">4</span>;</span><br><span class="line"></span><br><span class="line">notSure.ifItExists(); <span class="hljs-comment">// 좋아요, 런타임에 ifItExists가 존재할 수 있습니다.</span></span><br><span class="line">notSure.toFixed(); <span class="hljs-comment">// 좋아요, toFixed는 존재합니다. (그러나 컴파일러는 체크하지 않습니다)</span></span><br><span class="line"><span class="hljs-keyword">let</span> prettySure: <span class="hljs-built_in">Object</span> = <span class="hljs-number">4</span>;</span><br><span class="line"></span><br><span class="line">prettySure.toFixed(); <span class="hljs-comment">// 오류: 'Object' 타입에 'toFixed' 프로퍼티는 존재하지 않습니다.</span></span><br></pre></td></tr></table></figure><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><ul><li><code>void</code>는 <code>any</code>의 정반대이지만 조금 비슷합니다.</li><li>반환 값을 반환하지 않는 함수의 반환 타입으로 볼 수 있습니다.</li><li><code>void</code> 타입의 변수 선언은 <code>undefined</code> 또는 <code>null</code> 만 할당할 수 있으므로 유용하지 않습니다.</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">warnUser</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This is my warning message'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> unusable: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><ul><li><code>never</code> 타입은 절대로 발생하지 않는 값의 타입을 나타냅니다.</li><li>예를 들어, 함수 표현식의 반환 타입이거나 항상 예외를 던지는 화살표 함수 표현식이거나 절대 반환하지 않는 표현식입니다.</li><li>변수는 또한 <code>never</code> 일 때 타입 가드에 의해 좁혀지더라도 결코 사실일 수 없으며 타입을 획득하지 못합니다.</li><li><code>never</code> 타입은 모든 타입의 서브 타입이며 모든 타입에 할당할 수 있습니다.</li><li>어떤 타입도 never의 서브 타입이거나 할당 가능한 타입은 아닙니다.</li><li><code>any</code> 조차도 <code>never</code>에 할당할 수 없습니다.</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 반환되는 함수에는 연결할 수 없는 end-point가 있어서는 안 됩니다.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">never</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 추론되는 반환 타입은 절대로 없습니다.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fail</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> error(<span class="hljs-string">'Something failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 반환되는 함수에는 연결할 수 없는 end-point가 있어서는 안 됩니다.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">infiniteLoop</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Type-assertions"><a href="#Type-assertions" class="headerlink" title="Type assertions"></a>Type assertions</h3><ul><li><p><code>Type assertions</code> 은 컴파일러에게 “나를 믿어, 내가 하고 있는 일을 안다”라고 말하는 방법입니다.</p></li><li><p><code>Type assertions</code> 은 다른 언어의 형 변환(타입캐스팅)과 비슷하지만 특별한 검사나 데이터를 재구성하지는 않습니다.</p></li><li><p>런타임에 영향을 미치지 않으며 컴파일러에서만 사용됩니다.</p></li><li><p>TypeScript는 개발자가 필요한 특별한 검사를 수행했다고 가정합니다.</p></li><li><p>Type assertions은 두 가지 형태를 가집니다.</p><ul><li><p><code>angle-bracket(꺾쇠괄호)</code> 구문</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> someValue: <span class="hljs-built_in">any</span> = <span class="hljs-string">'this is a string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure></li><li><p><code>as</code> 구문</p></li><li><p>TypeScript를 JSX와 함께 사용할 때는 as 스타일의 assertions(단언)만 허용합니다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> someValue: <span class="hljs-built_in">any</span> = <span class="hljs-string">'this is a string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p><code>Inerface</code> 는 클래스 나 객체를 위한 타입을 지정할 때 사용하는 문법입니다.</p><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p><code>Generics</code> 는 타입스크립트에서 함수, 클래스, interface, type을 사용하게 될 때 여러 종류의 타입에 대하여 호환을 맞춰야 하는 상황에서 사용하는 문법입니다.</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.typescriptlang.org/index.html" rel="external nofollow noopener noreferrer" target="_blank">TypeScript 공식</a></li><li><a href="https://typescript-kr.github.io" rel="external nofollow noopener noreferrer" target="_blank">TypeScript</a></li><li><a href="https://typescript-kr.github.io/pages/tutorials/TypeScript%20in%205%20minutes.html" rel="external nofollow noopener noreferrer" target="_blank">5분 안에 보는 TypeScript</a></li><li><a href="https://freestrokes.tistory.com/94" rel="external nofollow noopener noreferrer" target="_blank">TypeScript 소개와 개발환경 구축</a></li><li><a href="https://d2.naver.com/helloworld/2108442" rel="external nofollow noopener noreferrer" target="_blank">2019년과 이후 JavaScript의 동향 - 라이브러리와 프레임워크 2</a></li></ul>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2020/06/05/typescriptBasics/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Service Lane</title>
      <link>https://lunarscents.github.io/2019/10/07/serviceLane/</link>
      <guid>https://lunarscents.github.io/2019/10/07/serviceLane/</guid>
      <pubDate>Mon, 07 Oct 2019 12:41:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hr-testcases.s3.amazonaws.com/1331&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.&lt;/p&gt;
&lt;p&gt;For example, there are &lt;strong&gt;n = 4&lt;/strong&gt; measurements yielding &lt;strong&gt;width = [2,3,2,1]&lt;/strong&gt;. If our entry index, &lt;strong&gt;i = 1&lt;/strong&gt; and our exit, &lt;strong&gt;j = 2&lt;/strong&gt;, there are two segment widths of &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;3&lt;/strong&gt; respectively. The widest vehicle that can fit through both is &lt;strong&gt;2&lt;/strong&gt;. If &lt;strong&gt;i = 2&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, our widths are &lt;strong&gt;[3,2,1]&lt;/strong&gt; which limits vehicle width to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Calvin is driving his favorite vehicle on the 101 freeway. He notices that the check engine light of his vehicle is on, and he wants to service it immediately to avoid any risks. Luckily, a service lane runs parallel to the highway. The service lane varies in width along its length.</p><p><img src="https://hr-testcases.s3.amazonaws.com/1331" alt></p><p>You will be given an array of widths at points along the road (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the maximum size vehicle that can travel that segment of the service lane safely.</p><p>For example, there are <strong>n = 4</strong> measurements yielding <strong>width = [2,3,2,1]</strong>. If our entry index, <strong>i = 1</strong> and our exit, <strong>j = 2</strong>, there are two segment widths of <strong>2</strong> and <strong>3</strong> respectively. The widest vehicle that can fit through both is <strong>2</strong>. If <strong>i = 2</strong> and <strong>j = 4</strong>, our widths are <strong>[3,2,1]</strong> which limits vehicle width to <strong>1</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the serviceLane function in the editor below. It should return an array of integers representing the maximum width vehicle that can pass through each segment of the highway described.</p><p>serviceLane has the following parameter(s):</p><ul><li>n: an integer denoting the size of the <strong>cases</strong> array</li><li>cases: a two dimensional array of integers where each element is an array of two integers representing starting and ending indices for a segment to consider .</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains two integers, <strong>n</strong> and <strong>t</strong>, where <strong>n</strong> denotes the number of width measurements you will receive and <strong>t</strong> the number of test cases. The next line has <strong>n</strong> space-separated integers which represent the array <strong>width[w<sub>0</sub>, w<sub>1</sub> …, w<sub>n-1</sub>]</strong>.</p><p>The next <strong>t</strong> lines contain two integers, <strong>i</strong> and <strong>j</strong>, where <strong>i</strong> is the start index and <strong>j</strong> is the end index of the segment being considered.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>2 &lt;= n &lt;= 100000</li><li>1 &lt;= t &lt;= 1000</li><li>0 &lt;= i &lt; j &lt; n</li><li>2 &lt;= j - i + 1 &lt;= min(n, 1000)</li><li>1 &lt;= width[k] &lt;= 3, where 0 &lt;= k &lt; n</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, print the number that represents the largest vehicle type that can pass through the entire segment of the service lane between indexes <strong>i</strong> and <strong>j</strong> inclusive.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 5</span><br><span class="line">2 3 1 2 3 2 3 3</span><br><span class="line">0 3</span><br><span class="line">4 6</span><br><span class="line">6 7</span><br><span class="line">3 5</span><br><span class="line">0 7</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Below is the representation of the lane:<br></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   |HIGHWAY|Lane|    -&gt;    Width</span><br><span class="line"></span><br><span class="line">0: |       |--|            2</span><br><span class="line">1: |       |---|           3</span><br><span class="line">2: |       |-|             1</span><br><span class="line">3: |       |--|            2</span><br><span class="line">4: |       |---|           3</span><br><span class="line">5: |       |--|            2</span><br><span class="line">6: |       |---|           3</span><br><span class="line">7: |       |---|           3</span><br></pre></td></tr></table></figure><ol><li><strong>(0, 3)</strong>: From index <strong>0</strong> through <strong>3</strong> we have widths <strong>2,3,1</strong> and <strong>2</strong>. Nothing wider than <strong>1</strong> can pass all segments.</li><li><strong>(4, 6)</strong>: From index <strong>4</strong> through <strong>6</strong> we have width <strong>3,2</strong> and <strong>3</strong>. Nothing wider than <strong>2</strong> can pass all segments.</li><li><strong>(6, 7)</strong>: <strong>3, 3 -&gt; 3</strong>.</li><li><strong>(3, 5)</strong>: <strong>2, 3, 2 -&gt; 2</strong></li><li><strong>(0, 7)</strong>: <strong>2, 3, 1, 2, 3, 2, 3, 3 -&gt; 1</strong>.</li></ol><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the serviceLane function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serviceLane</span>(<span class="hljs-params">n, width, cases</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> results = [];</span><br><span class="line"></span><br><span class="line">  cases.reduce(<span class="hljs-function">(<span class="hljs-params">target, items</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> min = width[items[<span class="hljs-number">0</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = items[<span class="hljs-number">0</span>]; i &lt;= items[<span class="hljs-number">1</span>]; i++) &#123;</span><br><span class="line">      width[i] &lt; min &amp;&amp; (min = width[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    results.push(min);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/07/serviceLane/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Time in Words</title>
      <link>https://lunarscents.github.io/2019/10/06/timeInWords/</link>
      <guid>https://lunarscents.github.io/2019/10/06/timeInWords/</guid>
      <pubDate>Sun, 06 Oct 2019 11:22:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given the time in numerals we may convert it into words, as shown below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:00 -&amp;gt; five o’clock&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:01 -&amp;gt; one minute past five&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:10 -&amp;gt; ten minutes past five&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:15 -&amp;gt; quarter past five&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:30 -&amp;gt; half past five&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:40 -&amp;gt; twenty minutes to six&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:45 -&amp;gt; quarter to six&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:47 -&amp;gt; thirteen minutes to six&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;5:28 -&amp;gt; twenty eight minutes past&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;At &lt;strong&gt;minutes = 0&lt;/strong&gt;, use o’ clock. For &lt;strong&gt;1 &amp;lt;= minutes &amp;lt;= 30&lt;/strong&gt;, use &lt;code&gt;past&lt;/code&gt;, and for &lt;strong&gt;30 &amp;lt; minutes&lt;/strong&gt; use &lt;code&gt;to&lt;/code&gt;. Note the space between the apostrophe and clock in &lt;code&gt;o&amp;#39; clock&lt;/code&gt;. Write a program which prints the time in words for the input given in the format described.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given the time in numerals we may convert it into words, as shown below:</p><p><strong><p align="center">5:00 -&gt; five o’clock</p></strong><br><strong><p align="center">5:01 -&gt; one minute past five</p></strong><br><strong><p align="center">5:10 -&gt; ten minutes past five</p></strong><br><strong><p align="center">5:15 -&gt; quarter past five</p></strong><br><strong><p align="center">5:30 -&gt; half past five</p></strong><br><strong><p align="center">5:40 -&gt; twenty minutes to six</p></strong><br><strong><p align="center">5:45 -&gt; quarter to six</p></strong><br><strong><p align="center">5:47 -&gt; thirteen minutes to six</p></strong><br><strong><p align="center">5:28 -&gt; twenty eight minutes past</p></strong></p><br><p>At <strong>minutes = 0</strong>, use o’ clock. For <strong>1 &lt;= minutes &lt;= 30</strong>, use <code>past</code>, and for <strong>30 &lt; minutes</strong> use <code>to</code>. Note the space between the apostrophe and clock in <code>o&#39; clock</code>. Write a program which prints the time in words for the input given in the format described.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the timeInWords function in the editor below. It should return a time string as described.</p><p>timeInWords has the following parameter(s):</p><ul><li>h: an integer representing hour of the day</li><li>m: an integer representing minutes after the hour</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>h</strong>, the hours portion The second line contains <strong>m</strong>, the minutes portion</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= h &lt;= 12</li><li>0 &lt;= m &lt; 60</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the time in words as described.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">47</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thirteen minutes to six</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">00</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">three o&apos; clock</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quarter past seven</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the timeInWords function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeInWords</span>(<span class="hljs-params">h, m</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> words = [</span><br><span class="line">    <span class="hljs-string">"zero"</span>,</span><br><span class="line">    <span class="hljs-string">"one"</span>,</span><br><span class="line">    <span class="hljs-string">"two"</span>,</span><br><span class="line">    <span class="hljs-string">"three"</span>,</span><br><span class="line">    <span class="hljs-string">"four"</span>,</span><br><span class="line">    <span class="hljs-string">"five"</span>,</span><br><span class="line">    <span class="hljs-string">"six"</span>,</span><br><span class="line">    <span class="hljs-string">"seven"</span>,</span><br><span class="line">    <span class="hljs-string">"eight"</span>,</span><br><span class="line">    <span class="hljs-string">"nine"</span>,</span><br><span class="line">    <span class="hljs-string">"ten"</span>,</span><br><span class="line">    <span class="hljs-string">"eleven"</span>,</span><br><span class="line">    <span class="hljs-string">"twelve"</span>,</span><br><span class="line">    <span class="hljs-string">"thirteen"</span>,</span><br><span class="line">    <span class="hljs-string">"fourteen"</span>,</span><br><span class="line">    <span class="hljs-string">"fifteen"</span>,</span><br><span class="line">    <span class="hljs-string">"sixteen"</span>,</span><br><span class="line">    <span class="hljs-string">"seventeen"</span>,</span><br><span class="line">    <span class="hljs-string">"eightteen"</span>,</span><br><span class="line">    <span class="hljs-string">"nineteen"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty one"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty two"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty three"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty four"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty five"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty six"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty seven"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty eight"</span>,</span><br><span class="line">    <span class="hljs-string">"twenty nine"</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> !m</span><br><span class="line">    ? <span class="hljs-string">`<span class="hljs-subst">$&#123;words[h]&#125;</span> o' clock`</span></span><br><span class="line">    : <span class="hljs-string">`<span class="hljs-subst">$&#123;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">        !(m % <span class="hljs-number">30</span>)</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">          ? <span class="hljs-string">"half"</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">          : !(m % <span class="hljs-number">15</span>)</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">          ? <span class="hljs-string">"quarter"</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">          : <span class="hljs-string">`<span class="hljs-subst">$&#123;m &lt;= <span class="hljs-number">30</span> ? words[m] : words[<span class="hljs-number">60</span> - m]&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-string">`minute<span class="hljs-subst">$&#123;</span></span></span></span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string"><span class="hljs-subst">              m &gt; <span class="hljs-number">1</span> ? <span class="hljs-string">"s"</span> : <span class="hljs-string">""</span></span></span></span></span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string"><span class="hljs-subst">            &#125;</span>`</span>&#125;</span>`</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">      &#125;</span> <span class="hljs-subst">$&#123;m &lt;= <span class="hljs-number">30</span> ? <span class="hljs-string">"past"</span> : <span class="hljs-string">"to"</span>&#125;</span> <span class="hljs-subst">$&#123;words[m &lt;= <span class="hljs-number">30</span> ? h : h + <span class="hljs-number">1</span>]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/06/timeInWords/#disqus_thread</comments>
    </item>
    
    <item>
      <title>조이스틱</title>
      <link>https://lunarscents.github.io/2019/10/05/joystick/</link>
      <guid>https://lunarscents.github.io/2019/10/05/joystick/</guid>
      <pubDate>Fri, 04 Oct 2019 17:00:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink&quot; title=&quot;문제 설명&quot;&gt;&lt;/a&gt;문제 설명&lt;/h2&gt;&lt;p&gt;조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.&lt;br&gt;ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA&lt;/p&gt;
&lt;p&gt;조이스틱을 각 방향으로 움직이면 아래와 같습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;▲ - 다음 알파벳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;▶ - 커서를 오른쪽으로 이동&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;예를 들어 아래의 방법으로 “JAZ”를 만들 수 있습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;따라서 11번 이동시켜 &amp;quot;JAZ&amp;quot;를 만들 수 있고, 이때가 최소 이동입니다.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.<br>ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA</p><p>조이스틱을 각 방향으로 움직이면 아래와 같습니다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▲ - 다음 알파벳</span><br><span class="line">▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)</span><br><span class="line">◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)</span><br><span class="line">▶ - 커서를 오른쪽으로 이동</span><br></pre></td></tr></table></figure><p>예를 들어 아래의 방법으로 “JAZ”를 만들 수 있습니다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.</span><br><span class="line">- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.</span><br><span class="line">- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.</span><br><span class="line">따라서 11번 이동시켜 &quot;JAZ&quot;를 만들 수 있고, 이때가 최소 이동입니다.</span><br></pre></td></tr></table></figure><p>만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.</p><a id="more"></a><h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><ul><li>name은 알파벳 대문자로만 이루어져 있습니다.</li><li>name의 길이는 1 이상 20 이하입니다.</li></ul><br><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th>name</th><th>return</th></tr></thead><tbody><tr><td>“JEROEN”</td><td>56</td></tr><tr><td>“JAN”</td><td>23</td></tr></tbody></table><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><hr><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> letters = <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> answer = [...name].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> value = letters.indexOf(item);</span><br><span class="line"></span><br><span class="line">    target += value &gt; letters.length / <span class="hljs-number">2</span> ? letters.length - value : value;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, name.length - <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="hljs-attr">length</span>: name.length &#125;,</span><br><span class="line">    (value, index) =&gt; name.length + index * <span class="hljs-number">-1</span></span><br><span class="line">  )) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> p = name.indexOf(<span class="hljs-string">"A"</span>.repeat(i));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> &lt; p &amp;&amp; p &lt;= i) &#123;</span><br><span class="line">      answer += p - i - <span class="hljs-number">1</span>;</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/05/joystick/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Halloween Sale</title>
      <link>https://lunarscents.github.io/2019/10/05/halloweenSale/</link>
      <guid>https://lunarscents.github.io/2019/10/05/halloweenSale/</guid>
      <pubDate>Fri, 04 Oct 2019 15:23:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;You wish to buy video games from the famous online video game store Mist.&lt;/p&gt;
&lt;p&gt;Usually, all games are sold at the same price, &lt;strong&gt;p&lt;/strong&gt; dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at &lt;strong&gt;p&lt;/strong&gt; dollars, but every subsequent game you buy will be sold at exactly &lt;strong&gt;d&lt;/strong&gt; dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to &lt;strong&gt;m&lt;/strong&gt; dollars, after which every game you buy will cost &lt;strong&gt;m&lt;/strong&gt; dollars each.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;p = 20&lt;/strong&gt;, &lt;strong&gt;d = 3&lt;/strong&gt; and &lt;strong&gt;m = 6&lt;/strong&gt;, then the following are the costs of the first &lt;strong&gt;11&lt;/strong&gt; games you buy, in order:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have &lt;strong&gt;s&lt;/strong&gt; dollars in your Mist wallet. How many games can you buy during the Halloween Sale?&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You wish to buy video games from the famous online video game store Mist.</p><p>Usually, all games are sold at the same price, <strong>p</strong> dollars. However, they are planning to have the seasonal Halloween Sale next month in which you can buy games at a cheaper price. Specifically, the first game you buy during the sale will be sold at <strong>p</strong> dollars, but every subsequent game you buy will be sold at exactly <strong>d</strong> dollars less than the cost of the previous one you bought. This will continue until the cost becomes less than or equal to <strong>m</strong> dollars, after which every game you buy will cost <strong>m</strong> dollars each.</p><p>For example, if <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, then the following are the costs of the first <strong>11</strong> games you buy, in order:</p><p><strong><p align="center">20, 17, 14, 11, 8, 6, 6, 6, 6, 6, 6</p></strong></p><p>You have <strong>s</strong> dollars in your Mist wallet. How many games can you buy during the Halloween Sale?</p><a id="more"></a><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first and only line of input contains four space-separated integers <strong>p</strong>, <strong>d</strong>, <strong>m</strong> and <strong>s</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= m &lt;= p &lt;= 100</li><li>1 &lt;= d &lt;= 100</li><li>0 &lt;= s &lt;= 10<sup>4</sup></li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line containing a single integer denoting the maximum number of games you can buy.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 80</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We have <strong>p = 20</strong>, <strong>d = 3</strong> and <strong>m = 6</strong>, the same as in the problem statement. We also have <strong>s = 80</strong> dollars. We can buy <strong>6</strong> games since they cost <strong>20 + 17 + 14 + 11 + 8 + 6 = 76</strong> dollars. However, we cannot buy a <strong>7</strong>th game. Thus, the answer is <strong>6</strong>.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 3 6 85</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>This is the same as the previous case, except this time we have <strong>s = 85</strong> dollars. This time, we can buy <strong>7</strong> games since they cost <strong>20 + 17 + 14 + 11 + 8 + 6 + 6 = 82</strong> dollars. However, we cannot buy an <strong>8</strong>th game. Thus, the answer is <strong>7</strong>.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the howManyGames function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howManyGames</span>(<span class="hljs-params">p, d, m, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Return the number of games you can buy</span></span><br><span class="line">  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (s &gt;= p) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    s = s - p;</span><br><span class="line">    p = <span class="hljs-built_in">Math</span>.max(p - d, m);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/05/halloweenSale/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Minimum Distances</title>
      <link>https://lunarscents.github.io/2019/10/04/minimumDistances/</link>
      <guid>https://lunarscents.github.io/2019/10/04/minimumDistances/</guid>
      <pubDate>Thu, 03 Oct 2019 18:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;We define the distance between two array values as the number of indices between the two values. Given &lt;strong&gt;a&lt;/strong&gt;, find the minimum distance between any pair of equal elements in the array. If no such value exists, print &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;a = [3,2,1,2,3]&lt;/strong&gt;, there are two matching pairs of values: &lt;strong&gt;3 and 2&lt;/strong&gt;. The indices of the &lt;strong&gt;3&lt;/strong&gt;‘s are &lt;strong&gt;i = 0&lt;/strong&gt; and &lt;strong&gt;j = 4&lt;/strong&gt;, so their distance is &lt;strong&gt;d[i,j] = |j - i| = 4&lt;/strong&gt;. The indices of the &lt;strong&gt;2&lt;/strong&gt;‘s are &lt;strong&gt;i = 1&lt;/strong&gt; and &lt;strong&gt;j = 3&lt;/strong&gt;, so their distance is &lt;strong&gt;d|i,j| = |j - i| = 2&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>We define the distance between two array values as the number of indices between the two values. Given <strong>a</strong>, find the minimum distance between any pair of equal elements in the array. If no such value exists, print <strong>-1</strong>.</p><p>For example, if <strong>a = [3,2,1,2,3]</strong>, there are two matching pairs of values: <strong>3 and 2</strong>. The indices of the <strong>3</strong>‘s are <strong>i = 0</strong> and <strong>j = 4</strong>, so their distance is <strong>d[i,j] = |j - i| = 4</strong>. The indices of the <strong>2</strong>‘s are <strong>i = 1</strong> and <strong>j = 3</strong>, so their distance is <strong>d|i,j| = |j - i| = 2</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the minimumDistances function in the editor below. It should return the minimum distance between any two matching elements.</p><p>minimumDistances has the following parameter(s):</p><ul><li>a: an array of integers</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>n</strong>, the size of array <strong>a</strong>.<br><br>The second line contains <strong>n</strong> space-separated integers <strong>a[i]</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>3</sup></li><li>0 &lt;= a[i] &lt;= 10<sup>5</sup></li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single integer denoting the minimum <strong>d[i,j]</strong> in <strong>a</strong>. If no such value exists, print <strong>-1</strong>.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7 1 3 4 1 7</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Here, we have two options:<br></p><ul><li><strong>a[1]</strong> and <strong>a[4]</strong> and are both <strong>1</strong>, so <strong>d[1,4] = |1 - 4| = 3</strong>.</li><li><strong>a[0]</strong> and <strong>a[5]</strong> and are both <strong>7</strong>, so <strong>d[0,5] = |0 - 5| = 5</strong>.</li></ul><p>The answer is <strong>min(3,5) = 3</strong>.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the minimumDistances function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minimumDistances</span>(<span class="hljs-params">a</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(&#123; <span class="hljs-attr">length</span>: a.length &#125;, (value, index) =&gt; index)) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">      &#123; <span class="hljs-attr">length</span>: a.length &#125;,</span><br><span class="line">      (value, index) =&gt; index + i + <span class="hljs-number">1</span></span><br><span class="line">    )) &#123;</span><br><span class="line">      ((a[i] === a[j] &amp;&amp; !result) ||</span><br><span class="line">        (a[i] === a[j] &amp;&amp; <span class="hljs-built_in">Math</span>.abs(i - j) &lt; result)) &amp;&amp;</span><br><span class="line">        (result = <span class="hljs-built_in">Math</span>.abs(i - j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> !result ? <span class="hljs-number">-1</span> : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/04/minimumDistances/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Beautiful Triplets</title>
      <link>https://lunarscents.github.io/2019/10/03/beautifulTriplets/</link>
      <guid>https://lunarscents.github.io/2019/10/03/beautifulTriplets/</guid>
      <pubDate>Thu, 03 Oct 2019 10:04:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a sequence of integers &lt;strong&gt;a&lt;/strong&gt;, a triplet &lt;strong&gt;(a[i],a[j],a[k])&lt;/strong&gt; is beautiful if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;lt; j &amp;lt; k&lt;/li&gt;
&lt;li&gt;a[j] - a[i] = a[k] - a[j] = d&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an increasing sequenc of integers and the value of &lt;strong&gt;d&lt;/strong&gt;, count the number of beautiful triplets in the sequence.&lt;/p&gt;
&lt;p&gt;For example, the sequence &lt;strong&gt;arr = [2,2,3,4,5]&lt;/strong&gt; and &lt;strong&gt;d = 1&lt;/strong&gt;. There are three beautiful triplets, by index: &lt;strong&gt;[i,j,k]=[0,2,3], [1,2,3], [2,3,4]&lt;/strong&gt;. To test the first triplet, &lt;strong&gt;arr[j] - arr[i] = 3 - 2 = 1&lt;/strong&gt; and &lt;strong&gt;arr[k] - arr[j] = 4 - 3 = 1&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a sequence of integers <strong>a</strong>, a triplet <strong>(a[i],a[j],a[k])</strong> is beautiful if:</p><ul><li>i &lt; j &lt; k</li><li>a[j] - a[i] = a[k] - a[j] = d</li></ul><p>Given an increasing sequenc of integers and the value of <strong>d</strong>, count the number of beautiful triplets in the sequence.</p><p>For example, the sequence <strong>arr = [2,2,3,4,5]</strong> and <strong>d = 1</strong>. There are three beautiful triplets, by index: <strong>[i,j,k]=[0,2,3], [1,2,3], [2,3,4]</strong>. To test the first triplet, <strong>arr[j] - arr[i] = 3 - 2 = 1</strong> and <strong>arr[k] - arr[j] = 4 - 3 = 1</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the beautifulTriplets function in the editor below. It must return an integer that represents the number of beautiful triplets in the sequence.</p><p>beautifulTriplets has the following parameters:</p><ul><li>d: an integer</li><li>arr: an array of integers, sorted ascending</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers <strong>n</strong> and <strong>d</strong>, the length of the sequence and the beautiful difference.<br>The second line contains <strong>n</strong> space-separated integers <strong>arr[i]</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>4</sup></li><li>1 &lt;= d &lt;= 20</li><li>0 &lt;= arr[i] &lt;= 2 x 10<sup>4</sup></li><li>arr[i] &gt; arr[i - 1]</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print a single line denoting the number of beautiful triplets in the sequence.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 2 4 5 7 8 10</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The input sequence is <strong>1,2,4,5,7,8,10</strong>, and our beautiful difference <strong>d = 3</strong>. There are many possible triplets <strong>(arr[i],arr[j],arr[k])</strong>, but our only beautiful triplets are <strong>(1,4,7)</strong>, <strong>(4,7,10)</strong> and <strong>(2,5,8)</strong> by value not index.</p><p>Please see the equations below:</p><p>7 - 4 = 4 - 1 = 3 = d<br><br>10 - 7 = 7 - 4 = 3 = d<br><br>8 - 5 = 5 - 2 = 3 = d<br></p><p>Recall that a beautiful triplet satisfies the following equivalence relation:<br></p><p><strong>arr[j] - arr[i] = arr[k] - arr[j] = d</strong> where <strong>i &lt; j &lt; k</strong>.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the beautifulTriplets function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beautifulTriplets</span>(<span class="hljs-params">d, arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> count = arr[<span class="hljs-number">0</span>];</span><br><span class="line">  <span class="hljs-keyword">let</span> max = arr[arr.length - <span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> &#123; values &#125; = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(arr.length).fill(<span class="hljs-number">0</span>).reduce(</span><br><span class="line">    (target, item, index) =&gt; &#123;</span><br><span class="line">      target[<span class="hljs-string">"values"</span>][arr[index]] = target[<span class="hljs-string">"values"</span>][arr[index]]</span><br><span class="line">        ? (target[<span class="hljs-string">"values"</span>][arr[index]] += <span class="hljs-number">1</span>)</span><br><span class="line">        : <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="hljs-attr">values</span>: &#123;&#125; &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (count &lt;= max) &#123;</span><br><span class="line">    values[count] &amp;&amp;</span><br><span class="line">      values[count + d] &amp;&amp;</span><br><span class="line">      values[count + d * <span class="hljs-number">2</span>] &amp;&amp;</span><br><span class="line">      (result += <span class="hljs-built_in">Math</span>.max(</span><br><span class="line">        values[count],</span><br><span class="line">        values[count + d],</span><br><span class="line">        values[count + d * <span class="hljs-number">2</span>]</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/03/beautifulTriplets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Organizing Containers of Balls</title>
      <link>https://lunarscents.github.io/2019/10/02/organizingContainers/</link>
      <guid>https://lunarscents.github.io/2019/10/02/organizingContainers/</guid>
      <pubDate>Wed, 02 Oct 2019 00:40:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;David has several containers, each with a number of balls in it. He has just enough containers to sort each type of ball he has into its own container. David wants to sort the balls using his sort method.&lt;/p&gt;
&lt;p&gt;As an example, David has &lt;strong&gt;n = 2&lt;/strong&gt; containers and &lt;strong&gt;2&lt;/strong&gt; different types of balls, both of which are numbered from &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;n - 1 = 1&lt;/strong&gt;. The distribution of ball types per container are described by &lt;strong&gt;n x n&lt;/strong&gt; an matrix of integers, &lt;strong&gt;M[container][type]&lt;/strong&gt;. For example, consider the following diagram for &lt;strong&gt;M = [[1, 4], [2, 3]]&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/hr-challenge-images/0/1485811368-9e78c98652-swapping-balls.png&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>David has several containers, each with a number of balls in it. He has just enough containers to sort each type of ball he has into its own container. David wants to sort the balls using his sort method.</p><p>As an example, David has <strong>n = 2</strong> containers and <strong>2</strong> different types of balls, both of which are numbered from <strong>0</strong> to <strong>n - 1 = 1</strong>. The distribution of ball types per container are described by <strong>n x n</strong> an matrix of integers, <strong>M[container][type]</strong>. For example, consider the following diagram for <strong>M = [[1, 4], [2, 3]]</strong>:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485811368-9e78c98652-swapping-balls.png" alt></p><a id="more"></a><p>In a single operation, David can swap two balls located in different containers.</p><p>The diagram below depicts a single swap operation:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485811849-e97b84e218-swapping-balls-ps-1.png" alt></p><p>David wants to perform some number of swap operations such that:</p><ul><li>Each container contains only balls of the same type.</li><li>No two balls of the same type are located in different containers.</li></ul><p>You must perform <strong>q</strong> queries where each query is in the form of a matrix, <strong>M</strong>. For each query, print <code>Possible</code> on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print <code>Impossible</code>.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the organizingContainers function in the editor below. It should return a string, either <code>Possible</code> or <code>Impossible</code>.</p><p>organizingContainers has the following parameter(s):</p><ul><li>containter: a two dimensional array of integers that represent the number of balls of each color in each container</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains an integer <strong>q</strong>, the number of queries.</p><p>Each of the next <strong>q</strong> sets of lines is as follows:</p><ol><li>The first line contains an integer <strong>n</strong>, the number of containers (rows) and ball types (columns).</li><li>Each of the next <strong>n</strong> lines contains <strong>n</strong> space-separated integers describing row <strong>M[i]</strong>.</li></ol><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= q &lt;= 10</li><li>1 &lt;= n &lt;= 100</li><li>0 &lt;= M[container][type] &lt;= 10<sup>9</sup></li></ul><h2 id="Scoring"><a href="#Scoring" class="headerlink" title="Scoring"></a>Scoring</h2><ul><li>For <strong>33%</strong> of score, <strong>1 &lt;= n &lt;= 1</strong>.</li><li>For <strong>100%</strong> of score, <strong>1 &lt;= n &lt;= 100</strong>.</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each query, print <code>Possible</code> on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print <code>Impossible</code>.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">2</span><br><span class="line">0 2</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Possible</span><br><span class="line">Impossible</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We perform the following <strong>q = 2</strong> queries:</p><ol><li>The diagram below depicts one possible way to satisfy David’s requirements for the first query:</li></ol><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485813936-37f8a37dad-swapping-balls-sample-0-0.png" alt></p><p>Thus, we print Possible on a new line.<br></p><ol start="2"><li>The diagram below depicts the matrix for the second query:</li></ol><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485814141-d283776840-swapping-balls-sample-0-2.png" alt></p><p>No matter how many times we swap balls of type <strong>t<sub>0</sub></strong> and <strong>t<sub>1</sub></strong> and between the two containers, we’ll never end up with one container only containing type <strong>t<sub>0</sub></strong> and the other container only containing type <strong>t<sub>1</sub></strong>. Thus, we print <code>Impossible</code> on a new line.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 3 1</span><br><span class="line">2 1 2</span><br><span class="line">3 3 3</span><br><span class="line">3</span><br><span class="line">0 2 1</span><br><span class="line">1 1 1</span><br><span class="line">2 0 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Impossible</span><br><span class="line">Possible</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the organizingContainers function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">organizingContainers</span>(<span class="hljs-params">container</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> &#123; row, col &#125; = container.reduce(</span><br><span class="line">    (target, items, index) =&gt; &#123;</span><br><span class="line">      items.reduce(<span class="hljs-function">(<span class="hljs-params">itemTarget, item, subIndex</span>) =&gt;</span> &#123;</span><br><span class="line">        target[<span class="hljs-string">"row"</span>][index] += item;</span><br><span class="line">        target[<span class="hljs-string">"col"</span>][subIndex] += item;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> itemTarget;</span><br><span class="line">      &#125;, []);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      row: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(container.length).fill(<span class="hljs-number">0</span>),</span><br><span class="line">      col: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(container.length).fill(<span class="hljs-number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  row.sort();</span><br><span class="line">  col.sort();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="hljs-attr">length</span>: container.length &#125;,</span><br><span class="line">    (value, index) =&gt; index</span><br><span class="line">  )) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (row[value] !== col[value]) &#123;</span><br><span class="line">      result = <span class="hljs-literal">false</span>;</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result ? <span class="hljs-string">"Possible"</span> : <span class="hljs-string">"Impossible"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/02/organizingContainers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Modified Kaprekar Numbers</title>
      <link>https://lunarscents.github.io/2019/10/01/modifiedKaprekarNumbers/</link>
      <guid>https://lunarscents.github.io/2019/10/01/modifiedKaprekarNumbers/</guid>
      <pubDate>Tue, 01 Oct 2019 00:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.&lt;/p&gt;
&lt;p&gt;Consider a positive whole number &lt;strong&gt;n&lt;/strong&gt; with &lt;strong&gt;d&lt;/strong&gt; digits. We square &lt;strong&gt;n&lt;/strong&gt; to arrive at a number that is either &lt;strong&gt;2 x d&lt;/strong&gt; digits long or &lt;strong&gt;(2 x d) - 1&lt;/strong&gt; digits long. Split the string representation of the square into two parts, &lt;strong&gt;l&lt;/strong&gt; and &lt;strong&gt;r&lt;/strong&gt;. The right hand part, &lt;strong&gt;r&lt;/strong&gt; must be &lt;strong&gt;d&lt;/strong&gt; digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, if &lt;strong&gt;n = 5&lt;/strong&gt;, &lt;strong&gt;d = 1&lt;/strong&gt; then &lt;strong&gt;n&lt;sup&gt;2&lt;/sup&gt; = 25&lt;/strong&gt;. We split that into two strings and convert them back to integers &lt;strong&gt;2&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt;. We test &lt;img src=&quot;https://latex.codecogs.com/gif.latex?2&amp;space;+&amp;space;5&amp;space;=&amp;space;7&amp;space;%5Cneq&amp;space;5&quot; alt&gt;, so this is not a modified Kaprekar number. If &lt;strong&gt;n = 9&lt;/strong&gt;, still &lt;strong&gt;d = 1&lt;/strong&gt;, and &lt;strong&gt;n&lt;sup&gt;2&lt;/sup&gt; = 81&lt;/strong&gt;. This gives us &lt;strong&gt;1 + 8 = 9&lt;/strong&gt;, the original &lt;strong&gt;n&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>A modified Kaprekar number is a positive whole number with a special property. If you square it, then split the number into two integers and sum those integers, you have the same value you started with.</p><p>Consider a positive whole number <strong>n</strong> with <strong>d</strong> digits. We square <strong>n</strong> to arrive at a number that is either <strong>2 x d</strong> digits long or <strong>(2 x d) - 1</strong> digits long. Split the string representation of the square into two parts, <strong>l</strong> and <strong>r</strong>. The right hand part, <strong>r</strong> must be <strong>d</strong> digits long. The left is the remaining substring. Convert those two substrings back to integers, add them and see if you get <strong>n</strong>.</p><p>For example, if <strong>n = 5</strong>, <strong>d = 1</strong> then <strong>n<sup>2</sup> = 25</strong>. We split that into two strings and convert them back to integers <strong>2</strong> and <strong>5</strong>. We test <img src="https://latex.codecogs.com/gif.latex?2&space;+&space;5&space;=&space;7&space;%5Cneq&space;5" alt>, so this is not a modified Kaprekar number. If <strong>n = 9</strong>, still <strong>d = 1</strong>, and <strong>n<sup>2</sup> = 81</strong>. This gives us <strong>1 + 8 = 9</strong>, the original <strong>n</strong>.</p><a id="more"></a><p><strong>Note</strong>: r may have leading zeros.</p><p>Here’s an explanation from Wikipedia about the <strong>ORIGINAL</strong> <a href="https://en.wikipedia.org/wiki/Kaprekar_number" rel="external nofollow noopener noreferrer" target="_blank">Kaprekar Number</a> (spot the difference!):</p><blockquote><p>In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45² = 2025 and 20+25 = 45.</p></blockquote><p>Given two positive integers <strong>p</strong> and <strong>q</strong> where <strong>p</strong> is lower than <strong>q</strong>, write a program to print the modified Kaprekar numbers in the range between <strong>p</strong> and <strong>q</strong>, inclusive.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the kaprekarNumbers function in the editor below. It should print the list of modified Kaprekar numbers in ascending order.</p><p>kaprekarNumbers has the following parameter(s):</p><ul><li>p: an integer</li><li>q: an integer</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains the lower integer limit <strong>p</strong>.The second line contains the upper integer limit <strong>q</strong>.</p><p><strong>Note</strong>: Your range should be inclusive of the limits.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>0 &lt; p &lt; q &lt; 100000</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Output each modified Kaprekar number in the given range, space-separated on a single line. If no modified Kaprekar numbers exist in the given range, print <code>INVALID RANGE</code>.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 9 45 55 99</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p><strong>1</strong>, <strong>9</strong>, <strong>45</strong>, <strong>55</strong>, and <strong>99</strong> are the Kaprekar Numbers in the given range.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the kaprekarNumbers function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kaprekarNumbers</span>(<span class="hljs-params">p, q</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="hljs-attr">length</span>: q - p + <span class="hljs-number">1</span> &#125;,</span><br><span class="line">    (value, index) =&gt; index + p</span><br><span class="line">  ).reduce(<span class="hljs-function">(<span class="hljs-params">target, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> square = <span class="hljs-string">`<span class="hljs-subst">$&#123;value ** <span class="hljs-number">2</span>&#125;</span>`</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> right = +square.substring(</span><br><span class="line">      square.length - <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span>`</span>.length,</span><br><span class="line">      square.length</span><br><span class="line">    );</span><br><span class="line">    <span class="hljs-keyword">let</span> left = +square.substring(<span class="hljs-number">0</span>, square.length - <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span>`</span>.length);</span><br><span class="line"></span><br><span class="line">    left + right == value &amp;&amp; target.push(value);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(!result.length ? <span class="hljs-string">"INVALID RANGE"</span> : result.join(<span class="hljs-string">" "</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/10/01/modifiedKaprekarNumbers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bigger is Greater</title>
      <link>https://lunarscents.github.io/2019/09/30/biggerIsGreater/</link>
      <guid>https://lunarscents.github.io/2019/09/30/biggerIsGreater/</guid>
      <pubDate>Mon, 30 Sep 2019 02:01:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lexicographical_order&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Lexicographical&lt;/a&gt; order is often known as alphabetical order when dealing with strings. A string is greater than another string if it comes later in a lexicographically sorted list.&lt;/p&gt;
&lt;p&gt;Given a word, create a new word by swapping some or all of its characters. This new word must meet two criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It must be greater than the original word&lt;/li&gt;
&lt;li&gt;It must be the smallest word that meets the first condition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, given the word &lt;strong&gt;w = abcd&lt;/strong&gt;, the next largest word is &lt;strong&gt;abdc&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Complete the function biggerIsGreater below to create and return the new string meeting the criteria. If it is not possible, return no answer.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="external nofollow noopener noreferrer" target="_blank">Lexicographical</a> order is often known as alphabetical order when dealing with strings. A string is greater than another string if it comes later in a lexicographically sorted list.</p><p>Given a word, create a new word by swapping some or all of its characters. This new word must meet two criteria:</p><ul><li>It must be greater than the original word</li><li>It must be the smallest word that meets the first condition</li></ul><p>For example, given the word <strong>w = abcd</strong>, the next largest word is <strong>abdc</strong>.</p><p>Complete the function biggerIsGreater below to create and return the new string meeting the criteria. If it is not possible, return no answer.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the biggerIsGreater function in the editor below. It should return the smallest lexicographically higher string possible from the given string or no answer.</p><p>biggerIsGreater has the following parameter(s):</p><ul><li>w: a string</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line of input contains <strong>T</strong>, the number of test cases.<br>Each of the next <strong>T</strong> lines contains <strong>w</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= T &lt;= 10<sup>5</sup></li><li>1 &lt;= |w| &lt;= 100</li><li><strong>w</strong> will contain only letters in the range ascii[a..z].</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>For each test case, output the string meeting the criteria. If no answer exists, print no answer.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">ab</span><br><span class="line">bb</span><br><span class="line">hefg</span><br><span class="line">dhck</span><br><span class="line">dkhc</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ba</span><br><span class="line">no answer</span><br><span class="line">hegf</span><br><span class="line">dhkc</span><br><span class="line">hcdk</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><ul><li><p>Test case 1:<br>ba is the only string which can be made by rearranging ab. It is greater.</p></li><li><p>Test case 2:<br>It is not possible to rearrange bb and get a greater string.</p></li><li><p>Test case 3:<br>hegf is the next string greater than hefg.</p></li><li><p>Test case 4:<br>dhkc is the next string greater than dhck.</p></li><li><p>Test case 5:<br>hcdk is the next string greater than dkhc.</p></li></ul><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">lmno</span><br><span class="line">dcba</span><br><span class="line">dcbb</span><br><span class="line">abdc</span><br><span class="line">abcd</span><br><span class="line">fedcbabcd</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lmon</span><br><span class="line">no answer</span><br><span class="line">no answer</span><br><span class="line">acbd</span><br><span class="line">abdc</span><br><span class="line">fedcbabdc</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the biggerIsGreater function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">biggerIsGreater</span>(<span class="hljs-params">w</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> values = [...w];</span><br><span class="line">  <span class="hljs-keyword">let</span> point1 = values.length - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (point1 &gt; <span class="hljs-number">0</span> &amp;&amp; values[point1] &lt;= values[point1 - <span class="hljs-number">1</span>]) point1--;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (!point1) <span class="hljs-keyword">return</span> <span class="hljs-string">"no answer"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> point2 = point1;</span><br><span class="line"></span><br><span class="line">  point1--;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> min = values[point2];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = point1 + <span class="hljs-number">2</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">    values[i] &lt; min &amp;&amp;</span><br><span class="line">      values[i] &gt; values[point1] &amp;&amp;</span><br><span class="line">      ((point2 = i), (min = values[i]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [values[point1], values[point2]] = [values[point2], values[point1]];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [</span><br><span class="line">    ...values.slice(<span class="hljs-number">0</span>, point1 + <span class="hljs-number">1</span>),</span><br><span class="line">    ...values.slice(point1 + <span class="hljs-number">1</span>, values.length).sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> (x &gt;= y ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>))</span><br><span class="line">  ].join(<span class="hljs-string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/30/biggerIsGreater/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://lunarscents.github.io/2019/09/27/encryption/</link>
      <guid>https://lunarscents.github.io/2019/09/27/encryption/</guid>
      <pubDate>Fri, 27 Sep 2019 07:10:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;An English text needs to be encrypted using the following encryption scheme.&lt;/p&gt;
&lt;p&gt;First, the spaces are removed from the text. Let &lt;strong&gt;L&lt;/strong&gt; be the length of this text.&lt;/p&gt;
&lt;p&gt;Then, characters are written into a grid, whose rows and columns have the following constraints:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/gif.latex?%5Cleft&amp;space;%5Clfloor&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crfloor%5Cleq&amp;space;row%5Cleq&amp;space;column%5Cleq&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;%5Csqrt%7BL%7D&amp;space;%5Cright&amp;space;%5Crceil,&amp;space;where&amp;space;%5Cleft&amp;space;%5Clfloor&amp;space;x&amp;space;%5Cright&amp;space;%5Crfloor&amp;space;is&amp;space;floor&amp;space;function,&amp;space;and&amp;space;%5Cleft&amp;space;%5Clceil&amp;space;x&amp;space;%5Cright&amp;space;%5Crceil&amp;space;is&amp;space;,&amp;space;ceil&amp;space;function&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>An English text needs to be encrypted using the following encryption scheme.</p><p>First, the spaces are removed from the text. Let <strong>L</strong> be the length of this text.</p><p>Then, characters are written into a grid, whose rows and columns have the following constraints:</p><p><img src="https://latex.codecogs.com/gif.latex?%5Cleft&space;%5Clfloor&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crfloor%5Cleq&space;row%5Cleq&space;column%5Cleq&space;%5Cleft&space;%5Clceil&space;%5Csqrt%7BL%7D&space;%5Cright&space;%5Crceil,&space;where&space;%5Cleft&space;%5Clfloor&space;x&space;%5Cright&space;%5Crfloor&space;is&space;floor&space;function,&space;and&space;%5Cleft&space;%5Clceil&space;x&space;%5Cright&space;%5Crceil&space;is&space;,&space;ceil&space;function" alt></p><a id="more"></a><p>For example, the sentence <strong>s = if man was meant to stay on the ground god would have given us roots</strong>, after removing spaces is <strong>54</strong> characters long. <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B54%7D" alt> is between <strong>7</strong> and <strong>8</strong>, so it is written in the form of a grid with 7 rows and 8 columns.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifmanwas</span><br><span class="line">meanttos</span><br><span class="line">tayonthe</span><br><span class="line">groundgo</span><br><span class="line">dwouldha</span><br><span class="line">vegivenu</span><br><span class="line">sroots</span><br></pre></td></tr></table></figure><ul><li>Ensure that <img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns%5Cgeq&space;L" alt></li><li>If multiple grids satisfy the above conditions, choose the one with the minimum area, i.e. <img src="https://latex.codecogs.com/gif.latex?rows&space;%5Ctimes&space;columns" alt>.</li></ul><p>The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau</span><br></pre></td></tr></table></figure><p>You will be given a message to encode and print.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the encryption function in the editor below. It should return a single string composed as described.</p><p>encryption has the following parameter(s):</p><ul><li>s: a string to encrypt</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>One line of text, the string <strong>S</strong></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p><img src="https://latex.codecogs.com/gif.latex?1%5Cleq&space;%5Cleft&space;%7C&space;s&space;%5Cright&space;%7C%5Cleq&space;81" alt></p><p><strong>s</strong> is comprised only of characters in the range ascii[a-z].</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the encoded message on one line as described.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haveaniceday</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hae and via ecy</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>L = 12</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B12%7D" alt> is between <strong>3</strong> and <strong>4</strong>.</p><p>Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">have</span><br><span class="line">anic</span><br><span class="line">eday</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feedthedog</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fto ehg ee dd</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>L = 10</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B10%7D" alt> is between <strong>3</strong> and <strong>4</strong>.</p><p>Rewritten with <strong>3</strong> rows and <strong>4</strong> columns:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feed</span><br><span class="line">thed</span><br><span class="line">og</span><br></pre></td></tr></table></figure><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chillout</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clu hlt io</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p><strong>L = 8</strong>, <img src="https://latex.codecogs.com/gif.latex?%5Csqrt%7B8%7D" alt> is between <strong>2</strong> and <strong>3</strong>.</p><p>Rewritten with <strong>3</strong> columns and <strong>3</strong> rows (<strong>2 * 3 = 6 &lt; 8</strong> so we have to use <strong>3 x 3</strong>.)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chi</span><br><span class="line">llo</span><br><span class="line">ut</span><br></pre></td></tr></table></figure><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the encryption function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryption</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> value = <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.sqrt([...s].length));</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> [...s]</span><br><span class="line">    .reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      target[index % value] += item;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(value).fill(<span class="hljs-string">""</span>))</span><br><span class="line">    .join(<span class="hljs-string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/27/encryption/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ACM ICPC Team</title>
      <link>https://lunarscents.github.io/2019/09/26/acmICPCTeam/</link>
      <guid>https://lunarscents.github.io/2019/09/26/acmICPCTeam/</guid>
      <pubDate>Thu, 26 Sep 2019 09:42:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;There are a number of people who will be attending &lt;a href=&quot;https://en.wikipedia.org/wiki/ACM_International_Collegiate_Programming_Contest&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ACM-ICPC World Finals&lt;/a&gt;. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.&lt;/p&gt;
&lt;p&gt;For example, given three attendees’ data as follows:&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>There are a number of people who will be attending <a href="https://en.wikipedia.org/wiki/ACM_International_Collegiate_Programming_Contest" rel="external nofollow noopener noreferrer" target="_blank">ACM-ICPC World Finals</a>. Each of them may be well versed in a number of topics. Given a list of topics known by each attendee, you must determine the maximum number of topics a 2-person team can know. Also find out how many ways a team can be formed to know that many topics. Lists will be in the form of bit strings, where each string represents an attendee and each position in that string represents a field of knowledge, 1 if its a known field or 0 if not.</p><p>For example, given three attendees’ data as follows:<br></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10101</span><br><span class="line">11110</span><br><span class="line">00010</span><br></pre></td></tr></table></figure><a id="more"></a><p>These are all possible teams that can be formed:<br></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Members Subjects</span><br><span class="line">(1,2)   [1,2,3,4,5]</span><br><span class="line">(1,3)   [1,3,4,5]</span><br><span class="line">(2,3)   [1,2,3,4]</span><br></pre></td></tr></table></figure><p>In this case, the first team will know all 5 subjects. They are the only team that can be created knowing that many subjects.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the acmTeam function in the editor below. It should return an integer array with two elements: the maximum number of topics any team can know and the number of teams that can be formed that know that maximum number of topics.</p><p>acmTeam has the following parameter(s):<br></p><ul><li>topic: a string of binary digits</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>m</strong>, where <strong>n</strong> represents the number of attendees and <strong>m</strong> represents the number of topics.</p><p>Each of the next <strong>n</strong> lines contains a binary string of length <strong>m</strong>. If the <strong>i<sup>th</sup></strong> line’s <strong>j<sup>th</sup></strong> character is <strong>1</strong>, then the <strong>i<sup>th</sup></strong> person knows the <strong>j<sup>th</sup></strong> topic.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>2 &lt;= n &lt;= 500<br><br>1 &lt;= m &lt;= 500</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>On the first line, print the maximum number of topics a 2-person team can know.<br><br>On the second line, print the number of ways to form a 2-person team that knows the maximum number of topics.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">10101</span><br><span class="line">11100</span><br><span class="line">11010</span><br><span class="line">00101</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>Calculating topics known for all permutations of 2 attendees we get: <br></p><p>(1,2) -&gt; 4<br><br>(1,3) -&gt; 5<br><br>(1,4) -&gt; 3<br><br>(2,3) -&gt; 4<br><br>(2,4) -&gt; 4<br><br>(3,4) -&gt; 5<br></p><p>The 2 teams (1, 3) and (3, 4) know all 5 topics which is maximal.<br></p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the acmTeam function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acmTeam</span>(<span class="hljs-params">topic</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> results = [];</span><br><span class="line">  <span class="hljs-keyword">let</span> range = topic.length - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(&#123; <span class="hljs-attr">length</span>: range &#125;, (value, index) =&gt; index)) &#123;</span><br><span class="line">    results.push(</span><br><span class="line">      ...Array.from(</span><br><span class="line">        &#123; <span class="hljs-attr">length</span>: range - i &#125;,</span><br><span class="line">        (value, index) =&gt; index + <span class="hljs-number">1</span> + i</span><br><span class="line">      ).reduce(<span class="hljs-function">(<span class="hljs-params">target, compare</span>) =&gt;</span> &#123;</span><br><span class="line">        target.push(</span><br><span class="line">          [...topic[i]].reduce(<span class="hljs-function">(<span class="hljs-params">target, item, valueIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            (!!+item || !!+topic[compare][valueIndex]) &amp;&amp; target++;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> target;</span><br><span class="line">          &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">      &#125;, [])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> results</span><br><span class="line">    .sort()</span><br><span class="line">    .reverse()</span><br><span class="line">    .reduce(</span><br><span class="line">      (target, item, index) =&gt; &#123;</span><br><span class="line">        !index &amp;&amp; (target[<span class="hljs-number">0</span>] = item);</span><br><span class="line"></span><br><span class="line">        target[<span class="hljs-number">0</span>] == item &amp;&amp; target[<span class="hljs-number">1</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">      &#125;,</span><br><span class="line">      [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/26/acmICPCTeam/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Queen&#39;s Attack II</title>
      <link>https://lunarscents.github.io/2019/09/25/queensAttackII/</link>
      <guid>https://lunarscents.github.io/2019/09/25/queensAttackII/</guid>
      <pubDate>Wed, 25 Sep 2019 03:20:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;You will be given a square chess board with one queen and a number of obstacles placed on it. Determine how many squares the queen can attack.&lt;/p&gt;
&lt;p&gt;A queen is standing on an &lt;strong&gt;n x n&lt;/strong&gt; chessboard. The chess board’s rows are numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt;, going from bottom to top. Its columns are numbered from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt;, going from left to right. Each square is referenced by a tuple, &lt;strong&gt;(r, c)&lt;/strong&gt;, describing the row, &lt;strong&gt;r&lt;/strong&gt;, and column, &lt;strong&gt;c&lt;/strong&gt;, where the square is located.&lt;/p&gt;
&lt;p&gt;The queen is standing at position &lt;strong&gt;(r&lt;sub&gt;q&lt;/sub&gt;, c&lt;sub&gt;q&lt;/sub&gt;)&lt;/strong&gt;. In a single move, she can attack any square in any of the eight directions (left, right, up, down, and the four diagonals). In the diagram below, the green circles denote all the cells the queen can attack from &lt;strong&gt;(4, 4)&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/hr-challenge-images/0/1485426500-a4039ebb00-chess1.png&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You will be given a square chess board with one queen and a number of obstacles placed on it. Determine how many squares the queen can attack.</p><p>A queen is standing on an <strong>n x n</strong> chessboard. The chess board’s rows are numbered from <strong>1</strong> to <strong>n</strong>, going from bottom to top. Its columns are numbered from <strong>1</strong> to <strong>n</strong>, going from left to right. Each square is referenced by a tuple, <strong>(r, c)</strong>, describing the row, <strong>r</strong>, and column, <strong>c</strong>, where the square is located.</p><p>The queen is standing at position <strong>(r<sub>q</sub>, c<sub>q</sub>)</strong>. In a single move, she can attack any square in any of the eight directions (left, right, up, down, and the four diagonals). In the diagram below, the green circles denote all the cells the queen can attack from <strong>(4, 4)</strong>:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485426500-a4039ebb00-chess1.png" alt></p><a id="more"></a><p>There are obstacles on the chessboard, each preventing the queen from attacking any square beyond it on that path. For example, an obstacle at location <strong>(3, 5)</strong> in the diagram above prevents the queen from attacking cells <strong>(3, 5)</strong>, <strong>(2, 6)</strong>, and <strong>(1, 7)</strong>:</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485459132-3fdc1f1ca3-chess_4_.png" alt></p><p>Given the queen’s position and the locations of all the obstacles, find and print the number of squares the queen can attack from her position at . In the board above, there are such squares.</p><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the queensAttack function in the editor below. It should return an integer that describes the number of squares the queen can attack.</p><p>queensAttack has the following parameters:</p><ul><li>n: an integer, the number of rows and columns in the board</li><li>k: an integer, the number of obstacles on the board</li><li>r_q: integer, the row number of the queen’s position</li><li>c_q: integer, the column number of the queen’s position</li><li>obstacles: a two dimensional array of integers where each element is an array of <strong>2</strong> integers, the row and column of an obstacle</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains two space-separated integers <strong>n</strong> and <strong>k</strong>, the length of the board’s sides and the number of obstacles.<br><br>The next line contains two space-separated integers <strong>r<sub>q</sub></strong> and <strong>c<sub>q</sub></strong>, the queen’s row and column position.<br><br>Each of the next <strong>k</strong> lines contains two space-separated integers <strong>r[i]</strong> and <strong>c[i]</strong>, the row and column position of <strong>obstacle[i]</strong>. <br></p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>5</sup></li><li>1 &lt;= k &lt;= 10<sup>5</sup></li><li>A single cell may contain more than one obstacle.</li><li>There will never be an obstacle at the position where the queen is located.</li></ul><h2 id="Subtasks"><a href="#Subtasks" class="headerlink" title="Subtasks"></a>Subtasks</h2><p>For <strong>30%</strong> of the maximum score:<br></p><ul><li>0 &lt; n &lt;= 100</li><li>0 &lt;= k &lt;= 100</li></ul><p>For <strong>55%</strong> of the maximum score:<br></p><ul><li>0 &lt; n &lt;= 1000</li><li>0 &lt;= k &lt;= 10<sup>5</sup></li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of squares that the queen can attack from position <strong>(r<sub>q</sub>, c<sub>q</sub>)</strong></p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 0</span><br><span class="line">4 4</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>The queen is standing at position <strong>(4, 4)</strong> on a <strong>4 x 4</strong> chessboard with no obstacles:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485426553-3064e08638-chess2.png" alt></p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">4 3</span><br><span class="line">5 5</span><br><span class="line">4 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>The queen is standing at position <strong>(4, 3)</strong> on a <strong>5 x 5</strong> chessboard with <strong>k = 3</strong> obstacles:<br></p><p><img src="https://s3.amazonaws.com/hr-challenge-images/0/1485426870-84a6a0ce97-chess3.png" alt></p><p>The number of squares she can attack from that position is <strong>10</strong>.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>Since there is only one square, and the queen is on it, the queen can move 0 squares.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the queensAttack function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queensAttack</span>(<span class="hljs-params">n, k, r_q, c_q, obstacles</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> up = n - r_q;</span><br><span class="line">  <span class="hljs-keyword">let</span> right = n - c_q;</span><br><span class="line">  <span class="hljs-keyword">let</span> down = r_q - <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> left = c_q - <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> up_left = <span class="hljs-built_in">Math</span>.min(up, left);</span><br><span class="line">  <span class="hljs-keyword">let</span> up_right = n - <span class="hljs-built_in">Math</span>.max(c_q, r_q);</span><br><span class="line">  <span class="hljs-keyword">let</span> down_left = <span class="hljs-built_in">Math</span>.min(c_q, r_q) - <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> down_right = <span class="hljs-built_in">Math</span>.min(r_q - <span class="hljs-number">1</span>, n - c_q);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(&#123; <span class="hljs-attr">length</span>: k &#125;, (value, index) =&gt; index)) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> &#123; <span class="hljs-number">0</span>: r_o, <span class="hljs-number">1</span>: c_o &#125; = obstacles[i];</span><br><span class="line"></span><br><span class="line">    r_o == r_q &amp;&amp;</span><br><span class="line">      (c_o &gt; c_q</span><br><span class="line">        ? (up = <span class="hljs-built_in">Math</span>.min(up, c_o - c_q - <span class="hljs-number">1</span>))</span><br><span class="line">        : (down = <span class="hljs-built_in">Math</span>.min(down, c_q - c_o - <span class="hljs-number">1</span>)));</span><br><span class="line"></span><br><span class="line">    c_o == c_q &amp;&amp;</span><br><span class="line">      (r_o &gt; r_q</span><br><span class="line">        ? (right = <span class="hljs-built_in">Math</span>.min(right, r_o - r_q - <span class="hljs-number">1</span>))</span><br><span class="line">        : (left = <span class="hljs-built_in">Math</span>.min(left, r_q - r_o - <span class="hljs-number">1</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">Math</span>.abs(c_o - c_q) == <span class="hljs-built_in">Math</span>.abs(r_o - r_q) &amp;&amp;</span><br><span class="line">      (c_o &gt; c_q &amp;&amp; r_o &gt; r_q &amp;&amp; (up_right = <span class="hljs-built_in">Math</span>.min(up_right, c_o - c_q - <span class="hljs-number">1</span>)),</span><br><span class="line">      c_o &gt; c_q &amp;&amp;</span><br><span class="line">        r_o &lt; r_q &amp;&amp;</span><br><span class="line">        (down_right = <span class="hljs-built_in">Math</span>.min(down_right, c_o - c_q - <span class="hljs-number">1</span>)),</span><br><span class="line">      c_o &lt; c_q &amp;&amp; r_o &gt; r_q &amp;&amp; (up_left = <span class="hljs-built_in">Math</span>.min(up_left, c_q - c_o - <span class="hljs-number">1</span>)),</span><br><span class="line">      c_o &lt; c_q &amp;&amp;</span><br><span class="line">        r_o &lt; r_q &amp;&amp;</span><br><span class="line">        (down_left = <span class="hljs-built_in">Math</span>.min(down_left, c_q - c_o - <span class="hljs-number">1</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> right + left + up + down + down_left + up_left + down_right + up_right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/25/queensAttackII/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Non-Divisible Subset</title>
      <link>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/</link>
      <guid>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/</guid>
      <pubDate>Tue, 24 Sep 2019 12:09:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Given a set of distinct integers, print the size of a maximal subset of &lt;strong&gt;S&lt;/strong&gt; where the sum of any &lt;strong&gt;2&lt;/strong&gt; numbers in &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;&lt;/strong&gt; is not evenly divisible by &lt;strong&gt;k&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, the array &lt;strong&gt;S = [19,10,12,10,24,25,22]&lt;/strong&gt; and &lt;strong&gt;k = 4&lt;/strong&gt;. One of the arrays that can be created is &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;[0] = [10,12,25]&lt;/strong&gt;. Another is &lt;strong&gt;S&lt;sup&gt;‘&lt;/sup&gt;[1] = [19,22,24]&lt;/strong&gt;. After testing all permutations, the maximum length solution array has &lt;strong&gt;3&lt;/strong&gt; elements.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Given a set of distinct integers, print the size of a maximal subset of <strong>S</strong> where the sum of any <strong>2</strong> numbers in <strong>S<sup>‘</sup></strong> is not evenly divisible by <strong>k</strong>.</p><p>For example, the array <strong>S = [19,10,12,10,24,25,22]</strong> and <strong>k = 4</strong>. One of the arrays that can be created is <strong>S<sup>‘</sup>[0] = [10,12,25]</strong>. Another is <strong>S<sup>‘</sup>[1] = [19,22,24]</strong>. After testing all permutations, the maximum length solution array has <strong>3</strong> elements.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the nonDivisibleSubset function in the editor below. It should return an integer representing the length of the longest subset of <strong>S</strong> meeting the criteria.</p><p>nonDivisibleSubset has the following parameter(s):</p><ul><li>S: an array of integers</li><li>k: an integer</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains <strong>2</strong> space-separated integers, <strong>n</strong> and <strong>k</strong>, the number of values in <strong>S</strong> and the non factor.<br><br>The second line contains <strong>n</strong> space-separated integers describing <strong>S[i]</strong>, the unique values of the set.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= n &lt;= 10<sup>5</sup></li><li>1 &lt;= k &lt;= 100</li><li>1 &lt;= S[i] &lt;= 10<sup>9</sup></li><li>All of the given numbers are distinct.</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the size of the largest possible subset (<strong>S<sup>‘</sup></strong>).</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 7 2 4</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><p>The sums of all permutations of two elements from <strong>S<sup>`</sup> = {1,7,2,4}</strong> are:<br></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 + 7 = 8</span><br><span class="line">1 + 2 = 3</span><br><span class="line">1 + 4 = 5</span><br><span class="line">7 + 2 = 9</span><br><span class="line">7 + 4 = 11</span><br><span class="line">2 + 4 = 6</span><br></pre></td></tr></table></figure><p>We see that only <strong>S<sup>`</sup> = {1,7,4}</strong> will not ever sum to a multiple of <strong>k = 3</strong>.<br></p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'nonDivisibleSubset' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return an INTEGER.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER k</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER_ARRAY s</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nonDivisibleSubset</span>(<span class="hljs-params">k, s</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Write your code here</span></span><br><span class="line">  <span class="hljs-keyword">let</span> values = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(k).fill(<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  s.reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    values[item % k] += <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> target;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="hljs-attr">length</span>: (k + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &#125;,</span><br><span class="line">    (value, index) =&gt; index + <span class="hljs-number">1</span></span><br><span class="line">  )) &#123;</span><br><span class="line">    result += <span class="hljs-built_in">Math</span>.max(values[i], values[k - i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  !(k % <span class="hljs-number">2</span>) &amp;&amp; !!values[k / <span class="hljs-number">2</span>] &amp;&amp; (result += <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">  values[<span class="hljs-number">0</span>] &amp;&amp; (result += <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/09/24/non-DivisibleSubset/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Taum and B&#39;day</title>
      <link>https://lunarscents.github.io/2019/08/21/taumAndBday/</link>
      <guid>https://lunarscents.github.io/2019/08/21/taumAndBday/</guid>
      <pubDate>Wed, 21 Aug 2019 14:40:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy &lt;strong&gt;b&lt;/strong&gt; black gifts and &lt;strong&gt;w&lt;/strong&gt; white gifts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cost of each black gift is &lt;strong&gt;bc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of every white gift is &lt;strong&gt;wc&lt;/strong&gt; units.&lt;/li&gt;
&lt;li&gt;The cost of converting each black gift into white gift or vice versa is  units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.&lt;/p&gt;
&lt;p&gt;For example, if Taum wants to buy &lt;strong&gt;b = 3&lt;/strong&gt; black gifts and &lt;strong&gt;w = 5&lt;/strong&gt; white gifts at a cost of &lt;strong&gt;bc = 3, wc = 4&lt;/strong&gt; and conversion cost &lt;strong&gt;z = 1&lt;/strong&gt;, we see that he can buy a black gift for &lt;strong&gt;3&lt;/strong&gt; and convert it to a white gift for &lt;strong&gt;1&lt;/strong&gt;, making the total cost of each white gift &lt;strong&gt;4&lt;/strong&gt;. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is &lt;strong&gt;3 * 3 + 5 * 4 = 29&lt;/strong&gt;.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Taum is planning to celebrate the birthday of his friend, Diksha. There are two types of gifts that Diksha wants from Taum: one is black and the other is white. To make her happy, Taum has to buy <strong>b</strong> black gifts and <strong>w</strong> white gifts.</p><ul><li>The cost of each black gift is <strong>bc</strong> units.</li><li>The cost of every white gift is <strong>wc</strong> units.</li><li>The cost of converting each black gift into white gift or vice versa is  units.</li></ul><p>Help Taum by deducing the minimum amount he needs to spend on Diksha’s gifts.</p><p>For example, if Taum wants to buy <strong>b = 3</strong> black gifts and <strong>w = 5</strong> white gifts at a cost of <strong>bc = 3, wc = 4</strong> and conversion cost <strong>z = 1</strong>, we see that he can buy a black gift for <strong>3</strong> and convert it to a white gift for <strong>1</strong>, making the total cost of each white gift <strong>4</strong>. That matches the cost of a white gift, so he can do that or just buy black gifts and white gifts. Either way, the overall cost is <strong>3 * 3 + 5 * 4 = 29</strong>.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the function taumBday in the editor below. It should return the minimal cost of obtaining the desired gifts.</p><p>taumBday has the following parameter(s):</p><ul><li>b: the number of black gifts</li><li>w: the number of white gifts</li><li>bc: the cost of a black gift</li><li>wc: the cost of a white gift</li><li>z: the cost to convert one color gift to the other color</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line will contain an integer <strong>t</strong>, the number of test cases.</p><p>The next <strong>t</strong> pairs of lines are as follows: </p><ul><li>The first line contains the values of integers <strong>b</strong> and <strong>w</strong>. </li><li>The next line contains the values of integers <strong>bc</strong>, <strong>wc</strong>, and <strong>z</strong>.</li></ul><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>1 &lt;= t &lt;= 10<br><br>0 &lt;= b,w,bc,wc,z &lt;= 10<sup>9</sup></p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p><strong>t</strong> lines, each containing an integer: the minimum amount of units Taum needs to spend on gifts.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 10</span><br><span class="line">1 1 1</span><br><span class="line">5 9</span><br><span class="line">2 3 4</span><br><span class="line">3 6</span><br><span class="line">9 1 1</span><br><span class="line">7 7</span><br><span class="line">4 2 1</span><br><span class="line">3 3</span><br><span class="line">1 9 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">37</span><br><span class="line">12</span><br><span class="line">35</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><ul><li><p>Test Case #01: <br><br>Since black gifts cost the same as white, there is no benefit to converting the gifts. Taum will have to buy each gift for 1 unit. The cost of buying all gifts will be: <strong>b * bc + w * wc = 10 * 1 + 10 * 1 = 20</strong>.</p></li><li><p>Test Case #02: <br><br>Again, we can’t decrease the cost of black or white gifts by converting colors.  is too high. We will buy gifts at their original prices, so the cost of buying all gifts will be: <strong>b * bc + w * wc = 5 * 2 + 9 * 3 = 10 + 27 = 37</strong>.</p></li><li><p>Test Case #03: <br><br>Since <strong>bc &gt; wc + z</strong>, we will buy <strong>b + w = 3 + 6 = 9</strong>  white gifts at their original price of <strong>1</strong>. <strong>b = 3</strong> of the gifts must be black, and the cost per conversion, <strong>z = 1</strong>. Total cost is <strong>9 * 1 + 3 * 1 = 12</strong>.</p></li><li><p>Test Case #04: <br><br>Similarly, we will buy <strong>w = 7</strong> white gifts at their original price, <strong>wc = 2</strong>. For black gifts, we will first buy white ones and color them to black, so that their cost will be reduced to <strong>wc + z = 2 + 1 = 3</strong>. So cost of buying all gifts will be: <strong>7 * 3 + 7 * 2 = 35</strong>.</p></li><li><p>Test Case #05: <br><br>We will buy black gifts at their original price, <strong>bc = 1</strong>. For white gifts, we will first black gifts worth <strong>bc = 1</strong> unit and color them to white for <strong>z = 2</strong> units. The cost for white gifts is reduced to <strong>wc = bc + z = 2 + 1 =3</strong> units. The cost of buying all gifts will be: <strong>3 * 1 + 3 * 3 = 3 + 9 = 12</strong>.</p></li></ul><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * Complete the 'taumBday' function below.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * The function is expected to return a LONG_INTEGER.</span></span><br><span class="line"><span class="hljs-comment"> * The function accepts following parameters:</span></span><br><span class="line"><span class="hljs-comment"> *  1. INTEGER b</span></span><br><span class="line"><span class="hljs-comment"> *  2. INTEGER w</span></span><br><span class="line"><span class="hljs-comment"> *  3. INTEGER bc</span></span><br><span class="line"><span class="hljs-comment"> *  4. INTEGER wc</span></span><br><span class="line"><span class="hljs-comment"> *  5. INTEGER z</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taumBday</span>(<span class="hljs-params">b, w, bc, wc, z</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Write your code here</span></span><br><span class="line">    <span class="hljs-keyword">const</span> gifts = BigInt(b) + BigInt(w);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> whiteGifts = gifts * BigInt(wc) + (BigInt(b) * BigInt(z));</span><br><span class="line">    <span class="hljs-keyword">const</span> blackGifts = gifts * BigInt(bc) + (BigInt(w) * BigInt(z));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> min = BigInt(b) * BigInt(bc) + BigInt(w) * BigInt(wc);</span><br><span class="line"></span><br><span class="line">    (blackGifts &lt; min) &amp;&amp; (min = blackGifts);</span><br><span class="line">    (whiteGifts &lt; min) &amp;&amp; (min = whiteGifts);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/21/taumAndBday/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Append and Delete</title>
      <link>https://lunarscents.github.io/2019/08/19/appendAndDelete/</link>
      <guid>https://lunarscents.github.io/2019/08/19/appendAndDelete/</guid>
      <pubDate>Mon, 19 Aug 2019 09:39:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Append a lowercase English alphabetic letter to the end of the string.&lt;/li&gt;
&lt;li&gt;Delete the last character in the string. Performing this operation on an empty string results in an empty string.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given an integer, &lt;strong&gt;k&lt;/strong&gt;, and two strings, &lt;strong&gt;s&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt;, determine whether or not you can convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt; by performing exactly &lt;strong&gt;k&lt;/strong&gt; of the above operations on &lt;strong&gt;s&lt;/strong&gt;. If it’s possible, print Yes. Otherwise, print No.&lt;/p&gt;
&lt;p&gt;For example, strings &lt;strong&gt;s = [a,b,c]&lt;/strong&gt; and &lt;strong&gt;t = [d,e,f]&lt;/strong&gt;. Our number of moves, &lt;strong&gt;k = 6&lt;/strong&gt;. To convert &lt;strong&gt;s&lt;/strong&gt; to &lt;strong&gt;t&lt;/strong&gt;, we first delete all of the characters in &lt;strong&gt;3&lt;/strong&gt; moves. Next we add each of the characters of &lt;strong&gt;t&lt;/strong&gt; in order. On the &lt;strong&gt;6&lt;sup&gt;th&lt;/sup&gt;&lt;/strong&gt; move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than &lt;strong&gt;6&lt;/strong&gt; moves, we would not have succeeded in creating the new string.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>You have a string of lowercase English alphabetic letters. You can perform two types of operations on the string:</p><ol><li>Append a lowercase English alphabetic letter to the end of the string.</li><li>Delete the last character in the string. Performing this operation on an empty string results in an empty string.</li></ol><p>Given an integer, <strong>k</strong>, and two strings, <strong>s</strong> and <strong>t</strong>, determine whether or not you can convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k</strong> of the above operations on <strong>s</strong>. If it’s possible, print Yes. Otherwise, print No.</p><p>For example, strings <strong>s = [a,b,c]</strong> and <strong>t = [d,e,f]</strong>. Our number of moves, <strong>k = 6</strong>. To convert <strong>s</strong> to <strong>t</strong>, we first delete all of the characters in <strong>3</strong> moves. Next we add each of the characters of <strong>t</strong> in order. On the <strong>6<sup>th</sup></strong> move, you will have the matching string. If there had been more moves available, they could have been eliminated by performing multiple deletions on an empty string. If there were fewer than <strong>6</strong> moves, we would not have succeeded in creating the new string.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the appendAndDelete function in the editor below. It should return a string, either Yes or No.</p><p>appendAndDelete has the following parameter(s):</p><ul><li>s: the initial string</li><li>t: the desired string</li><li>k: an integer that represents the number of operations</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>The first line contains a string <strong>s</strong>, the initial string. <br><br>The second line contains a string <strong>t</strong>, the desired final string. <br><br>The third line contains an integer <strong>k</strong>, the number of operations.</p><h2 id="ConstraintstaumAndBday-md"><a href="#ConstraintstaumAndBday-md" class="headerlink" title="ConstraintstaumAndBday.md"></a>ConstraintstaumAndBday.md</h2><ul><li>1 &lt;= |s| &lt;= 100</li><li>1 &lt;= |t| &lt;= 100</li><li>1 &lt;= k &lt;= 100</li><li><strong>s</strong> and <strong>t</strong> consisit of lowercase English alphabetic letters, ascii[a-z].</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print Yes if you can obtain string <strong>t</strong> by performing exactly <strong>k</strong> operations on <strong>s</strong>. Otherwise, print No.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hackerhappy</span><br><span class="line">hackerrank</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p>We perform <strong>5</strong> delete operations to reduce string <strong>s</strong> to hacker. Next, we perform <strong>4</strong> append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 9</strong> operations, we print Yes.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aba</span><br><span class="line">aba</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p>We perform <strong>4</strong> delete operations to reduce string <strong>s</strong> to the empty string (recall that, though the string will be empty after <strong>3</strong> deletions, we can still perform a delete operation on an empty string to get the empty string). Next, we perform <strong>3</strong> append operations (i.e., a, b, and a). Because we were able to convert <strong>s</strong> to <strong>t</strong> by performing exactly <strong>k = 7</strong> operations, we print Yes.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ashley</span><br><span class="line">ash</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>To convert ashley to ash a minimum of <strong>3</strong> steps are needed. Hence we print No as answer.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the appendAndDelete function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendAndDelete</span>(<span class="hljs-params">s, t, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> ready = <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> total = s.length + t.length;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">Math</span>.min(t.length, s.length)).fill(<span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">target, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        (ready &amp;&amp; <span class="hljs-built_in">Object</span>.is([...s][index], [...t][index])) </span><br><span class="line">            ? target++</span><br><span class="line">            : (ready = <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> target;</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> ((total - <span class="hljs-number">2</span> * count) % <span class="hljs-number">2</span> == k % <span class="hljs-number">2</span>) ||  (total &lt;= k)</span><br><span class="line">        ? (((total - <span class="hljs-number">2</span> * count) &gt; k) ? <span class="hljs-string">'No'</span> : <span class="hljs-string">'Yes'</span>)</span><br><span class="line">        : <span class="hljs-string">'No'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/19/appendAndDelete/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mars Exploration</title>
      <link>https://lunarscents.github.io/2019/08/18/marsExploration/</link>
      <guid>https://lunarscents.github.io/2019/08/18/marsExploration/</guid>
      <pubDate>Sun, 18 Aug 2019 12:14:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Sami’s spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/hr-challenge-images/16032/1453204202-9e3fd295bb-NASA_Mars_Rover.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, &lt;strong&gt;s&lt;/strong&gt;, determine how many letters of Sami’s SOS have been changed by radiation.&lt;/p&gt;
&lt;p&gt;For example, Earth receives SOSTOT. Sami’s original message was SOSSOS. Two of the message characters were changed in transit.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Sami’s spaceship crashed on Mars! She sends a series of SOS messages to Earth for help.</p><p><img src="https://s3.amazonaws.com/hr-challenge-images/16032/1453204202-9e3fd295bb-NASA_Mars_Rover.jpg" alt></p><p>Letters in some of the SOS messages are altered by cosmic radiation during transmission. Given the signal received by Earth as a string, <strong>s</strong>, determine how many letters of Sami’s SOS have been changed by radiation.</p><p>For example, Earth receives SOSTOT. Sami’s original message was SOSSOS. Two of the message characters were changed in transit.</p><a id="more"></a><h2 id="Function-Description"><a href="#Function-Description" class="headerlink" title="Function Description"></a>Function Description</h2><p>Complete the marsExploration function in the editor below. It should return an integer representing the number of letters changed during transmission.</p><p>marsExploration has the following parameter(s):</p><ul><li>s: the string as received on Earth</li></ul><h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h2><p>There is one line of input: a single string, <strong>s</strong>.</p><p>Note: As the original message is just SOS repeated <strong>n</strong> times, <strong>s</strong>‘s length will be a multiple of <strong>3</strong>.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= |s| &lt;= 99</li><li>|s| % 3 = 0</li><li><strong>s</strong> will contain only uppercase English letters, ascii[A-Z].</li></ul><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h2><p>Print the number of letters in Sami’s message that were altered by cosmic radiation.</p><h2 id="Sample-Input-0"><a href="#Sample-Input-0" class="headerlink" title="Sample Input 0"></a>Sample Input 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSPSSQSSOR</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-0"><a href="#Sample-Output-0" class="headerlink" title="Sample Output 0"></a>Sample Output 0</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Explanation-0"><a href="#Explanation-0" class="headerlink" title="Explanation 0"></a>Explanation 0</h2><p><strong>s</strong> = SOSSPSSQSSOR, and signal length <strong>|s| = 12</strong>. Sami sent <strong>4</strong> SOS messages (i.e.: <strong>12/3 = 4</strong>).</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Expected signal: SOSSOSSOSSOS</span><br><span class="line">Recieved signal: SOSSPSSQSSOR</span><br><span class="line">Difference:          X  X   X</span><br></pre></td></tr></table></figure><p>We print the number of changed letters.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSOT</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation 1"></a>Explanation 1</h2><p><strong>s</strong> = SOSSOT, and signal length <strong>|s| = 6</strong>. Sami sent <strong>2</strong> SOS messages (i.e.: <strong>6/3 = 2</strong>).</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Expected Signal: SOSSOS     </span><br><span class="line">Received Signal: SOSSOT</span><br><span class="line">Difference:           X</span><br></pre></td></tr></table></figure><p>We print the number of changed letters, which is <strong>1</strong>.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2"></a>Sample Input 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOSSOSSOS</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2"></a>Sample Output 2</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation 2"></a>Explanation 2</h2><p>Since no character is altered, we print 0.</p><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Complete the marsExploration function below.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">marsExploration</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> signal = <span class="hljs-string">'SOS'</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, &#123; length &#125; = s; i &lt; length; i += <span class="hljs-number">3</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> focus = s.slice(i, i + <span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line">        (focus[<span class="hljs-number">0</span>] !== signal[<span class="hljs-number">0</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">        (focus[<span class="hljs-number">1</span>] !== signal[<span class="hljs-number">1</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">        (focus[<span class="hljs-number">2</span>] !== signal[<span class="hljs-number">2</span>]) &amp;&amp; (count += <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://lunarscents.github.io/2019/08/18/marsExploration/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
